{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Alfresco Developer Series","text":"<p>Welcome to the Alfresco Developer Series</p> <p>This site is a collection of hands-on tutorials that walk you through the most important developer concepts in Alfresco. Each tutorial is self-contained and comes with code samples, screenshots, and explanations you can apply directly in your own projects.</p> <p>Whether you are new to Alfresco or an experienced engineer, this series will help you:</p> <ul> <li>Understand the Alfresco Maven SDK and project structure  </li> <li>Define custom content types and expose them through CMIS  </li> <li>Extend the platform with Actions and Behaviors </li> <li>Build and publish WebScripts </li> <li>Design and deploy Workflows with the embedded Activiti engine  </li> </ul>"},{"location":"#how-to-use-this-site","title":"How to use this site","text":"<p>Use the navigation menu on the left to browse the tutorials in order, or jump straight to the topic you\u2019re interested in. Each tutorial provides:</p> <ul> <li>A step-by-step guide you can follow locally  </li> <li>Source code examples ready to copy into your own project  </li> <li>Explanations of why each step matters in the Alfresco ecosystem  </li> </ul>"},{"location":"#attribution","title":"Attribution","text":"<p>This series is based on the excellent work by Jeff Potts in the original alfresco-developer-series project. All credit for the foundational content belongs to him.  </p> <p>This site republishes and modernizes those tutorials to ensure they remain accessible and useful for current Alfresco versions. Community contributions are welcome!</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform/readme/","title":"Alfresco Custom Actions Tutorial","text":""},{"location":"actions/actions-tutorial/actions-tutorial-platform/readme/#alfresco-repository-configuration","title":"Alfresco Repository Configuration","text":"<p>These sample classes and sample Alfresco extension config files accompany an article called [Alfresco Developer Series: Developing Custom Actions, 2nd Edition](http://ecmarchitect.com.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform/readme/#dependencies","title":"Dependencies","text":"<p>This project assumes you have deployed the Custom Content Types Repo AMP. If you want to work with your custom actions from Alfresco Share, you will also need to deploy the Alfresco Custom Actions Share AMP.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war</code></p> <p>Which will start Alfresco on an embedded Jetty server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/","title":"Alfresco Custom Actions Tutorial","text":""},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/#alfresco-share-configuration","title":"Alfresco Share Configuration","text":"<p>These sample classes and sample Alfresco extension config files accompany an article called [Alfresco Developer Series: Developing Custom Actions, 2nd Edition](http://ecmarchitect.com.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/#dependencies","title":"Dependencies","text":"<p>This project assumes you have deployed the Custom Content Types Repo AMP and the Custom Actions Repo AMP.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps_share</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war -Djetty.port=8081</code></p> <p>Which will start Alfresco Share on an embedded Jetty server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p> <p>It is likely that you'll want Alfresco Share to connect to your test Alfresco repository. If you run them both simultaneously Share will find the repository as long as it is running on localhost and port 8080.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/readme/#note-for-42x","title":"NOTE for 4.2.x","text":"<p>Starting with 4.2, the .head.ftl files are deprecated. The tutorial doesn't mention this, but in the source code you'll see that the script tags have been moved from the head.ftl file to the html.ftl.</p> <p>I chose to override the entire html.ftl file. With the new \"module\" extension approach you do not have to do this. You can just inject that new script tag into the freemarker file without overriding the whole thing. But I'll save that for another tutorial.</p> <p>If you try to deploy the 4.0.x version of this tutorial code on 4.2.x you'll find that your rule editor form no longer works. It's due to this issue. Move the script tag to the HTML file as I've done here and it will work.</p>"},{"location":"actions/actions-tutorial/actions-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."},{"location":"actions/tutorial/tutorial/","title":"Creating Custom Actions in Alfresco","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"actions/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"actions/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>Alfresco is a flexible platform for developing content management applications. Clients have several options to consider when selecting a user interface approach. Alfresco comes with a web client, Alfresco Share, that can be used as-is or customized. Alternatively, developers can create custom applications using the Content Management Interoperability Services (CMIS) API, web scripts, or the Alfresco Application Development Framework (ADF).</p> <p>Many times, the out-of-the-box web client is sufficient, even if it has to be customized slightly to fit your requirements. This is particularly true when your requirements closely resemble the all-purpose document management use case.</p> <p>Deciding whether to go with the out-of-the-box web client, a customized web client, or building your own user interface from scratch requires careful thought and analysis that is beyond the scope of this document.</p> <p>This tutorial is part of a series of tutorials that cover Alfresco from a configuration and customization perspective. The previous tutorial discussed how to create custom content types and then expose those to the Alfresco Share user interface. The focus in this tutorial is on developing custom actions and configuring the user interface to show those custom actions.</p> <p>It is important to note that if you are looking for quick-and-dirty ways to operate against documents in the repository, you may not need a custom action. For example, you could:</p> <ul> <li>Write some Java, Groovy, Python, PHP, or .NET code that leverages an Apache Chemistry library to work with content stored in Alfresco</li> <li>Create some server-side JavaScript that gets executed using the JavaScript Console add-on available from Share Extras</li> <li>Use curl or some other HTTP client to make calls against the Alfresco REST API</li> <li>Use curl or some other HTTP client to make calls against web scripts</li> </ul> <p>None of the above require you to write actions.</p> <p>Actions are useful when:</p> <ul> <li>You want to define one or more operations that can be executed repeatedly</li> <li>You want to make it easy for end-users to invoke common operations, either by clicking a menu item or by configuring a rule on a folder that will execute the operations automatically</li> <li>You want to perform one or more operations on a schedule (which isn't covered in this tutorial)</li> </ul> <p>Part 1 of this document explains how to implement the \u201cback-end\u201d piece of the action. The document includes two different examples. One action, called \u201cMove Replaced\u201d will be used as a \u201cRule Action\u201d. The other action is called \u201cSet Web Flag\u201d and it will be called from menu items in the user interface.</p> <p>Part 2 explains how to configure the Alfresco Share user interface to work with the custom actions you developed in Part 1.</p>"},{"location":"actions/tutorial/tutorial/#setup","title":"Setup","text":"<p>Before getting too far down the road, let me tell you about the tools you'll need and then give you a description of the project organization.</p>"},{"location":"actions/tutorial/tutorial/#tools","title":"Tools","text":"<p>Here is what I am using on my machine:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 11.0.2</li> <li>Apache Maven 3.8.5</li> <li>Alfresco Maven SDK 4.2 (No download necessary)</li> <li>Docker 20.10.6</li> <li>Docker Compose 1.29.1</li> </ul> <p>By default, when you create an Alfresco project using the Alfresco Maven SDK the project will be configured to depend on the latest stable Alfresco Community Edition build.</p> <p>An IDE is optional. Most people working with Alfresco use IntelliJ, Eclipse, or something similar.</p>"},{"location":"actions/tutorial/tutorial/#project-organization","title":"Project Organization","text":"<p>I am going to use the Alfresco Maven SDK to create a project that will package up my customizations in two AMPs (Alfresco Module Packages). One AMP is for the Alfresco web application (the \"repo\" tier) and the other is for the Alfresco Share web application (the \"Share\" tier).</p> <p>I am not going to spend much time talking about how the Alfresco Maven SDK works. If you aren't already familiar with it, you may want to read the Getting Started with the Alfresco Maven SDK tutorial on ecmarchitect.com first and then come back to this one.</p> <p>This tutorial relies on code from the Custom Content Types tutorial. The tutorial assumes that the repo tier AMP and Share tier AMP created during that tutorial have been installed into your local Maven repository by running <code>mvn install</code> from the root of the content-tutorial project.</p> <p>If, rather than launching your project using the embedded Tomcat server, you are deploying to a separately installed Alfresco server, you must first deploy the content-tutorial repo tier and Share tier AMPs before deploying the AMPs you will create in this tutorial.</p> <p>If you are planning on following along, go ahead and use the Alfresco Maven SDK to create a new project from the \"all-in-one\" archetype. Use a <code>groupId</code> of \"com.someco\" and an <code>artifactId</code> of \"actions-tutorial\".</p> <p>I'm going to make three quick changes to the initial project files the SDK created:</p> <ol> <li>First, we always want to generate AMP files. Starting with SDK 3.0.0, the default is to generate only a JAR file. That's easily fixed by uncommenting the \"maven-assembly-plugin\" in the list of plugins in the pom.xml file.</li> <li> <p>Second, as I just mentioned, the actions tutorial project depends on the content tutorial project. When we launch the actions-tutorial project's Docker containers, we want the AMPs from the content tutorial to be installed, so those need to be set up as dependencies in the pom.xml of the platform docker module:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;            \n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>And also in the pom.xml of the share docker module:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;    \n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;        \n&lt;/dependencies&gt;\n</code></pre> </li> <li> <p>Third, not only do we want the content tutorial AMPs installed, but the actions tutorial actually has a compile-time dependency on that project. So, go into the \"actions-tutorial-platform\" directory and add the dependency to the pom.xml:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> </li> </ol> <p>Now we're ready to begin.</p>"},{"location":"actions/tutorial/tutorial/#part-1-implementing-an-action","title":"Part 1: Implementing an Action","text":"<p>Actions are very commonly used when implementing Alfresco. This part of the tutorial explains what actions are, sets up a couple of examples, then shows how actions are implemented in Java.</p>"},{"location":"actions/tutorial/tutorial/#what-is-an-action","title":"What is an Action?","text":"<p>The term, \u201caction\u201d is overloaded quite heavily across the Alfresco platform (and application development, in general). For the purposes of this document, an action is a discrete, reusable unit of work that can be performed against an object in the repository, and can optionally be configured at run-time by the user. Some of the out-of-the-box actions include things like: Check-out, Check-in, Add Aspect, Remove Aspect, Move, Send Email, and Specialize Type.</p> <p>Sometimes, the term \u201crule action\u201d is used to describe this type of action. That's because actions are frequently used when configuring a rule on a folder. For example, suppose that there is a requirement to always create a PNG version of GIFs checked in to a specific folder. This is easily done by creating a rule that watches for new or updated GIFs and then runs the \u201cTransform and Copy Image\u201d action when it finds an object that meets the criteria.</p> <p>The screenshots below show some of the out-of-the-box actions available when configuring a rule in Alfresco Share:</p> <p></p> <p>But actions aren't limited to running as part of a rule. Actions can be called from menu items in the Alfresco Share user interface. These are often called \u201cUI actions\u201d to distinguish the actual menu item, the UI action, from the thing that actually does the work, the \u201crule action\u201d or simply, the \u201caction\u201d.</p> <p>These screenshots show the UI actions available in Alfresco Share's document library's document list as well as the document details page:</p> <p></p> <p></p> <p>So actions can be invoked from a rule and can be triggered from a menu item. Actions can also be called from code which means they can be invoked from server-side JavaScript, workflows, web scripts, or any other piece of code that can get to the Action Service.</p> <p>Because the same action can be invoked from all of these places, actions are a powerful way to write content operations once and then leverage them in many places.</p>"},{"location":"actions/tutorial/tutorial/#example-1-move-replaced","title":"Example 1: Move Replaced","text":"<p>Using actions and workflow together can be an effective way to customize the web client for the needs of the business. Consider SomeCo, the fictitious company introduced in the content types tutorial. Suppose SomeCo wants to use Alfresco to manage the policies and procedures for their entire organization. They need to be able to track when a new policy or procedure is published that supersedes an older policy document.</p> <p>SomeCo uses three folders to keep track of the state of their policies: Draft, Approved, and Archived. SomeCo uses Alfresco's Simple Workflows to move policies from folder to folder. When someone moves a policy into the Approved folder, if that policy replaces an older policy, the older policy needs to be automatically moved to the Archived folder. Alfresco has a \u201cMove\u201d action, but doesn't have a \u201cMove Replaced\u201d action. A new \u201cMove Replaced\u201d action can easily be created to accomplish this.</p> <p>You're going to see how to implement this momentarily.</p>"},{"location":"actions/tutorial/tutorial/#example-2-set-web-flag","title":"Example 2: Set Web Flag","text":"<p>Recall from the first tutorial that SomeCo publishes a subset of the documents in their repository to a company portal. SomeCo uses a flag on the object to keep track of which documents should be shown on the portal. In the first tutorial, that flag was set either by editing the field in the user interface or by running code. Now it is time to make it a bit more user-friendly by providing menu items in the user interface that can enable and disable the flag.</p> <p>The rest of this document explains how to implement both of these actions including the configuration necessary to make them available from the Alfresco Share user interface.</p>"},{"location":"actions/tutorial/tutorial/#implementing-the-move-replaced-action","title":"Implementing the Move Replaced Action","text":"<p>Actions run against specific nodes. In this example, the action needs to find the documents that the \u201cactioned upon node\u201d replaces so they can be moved. In order to do this, the action needs to know where to move the old documents to and it needs to know how to find the old documents. The first part, where to move the old documents, will be a parameter that gets passed to the action. The second part will leverage a \u201creplaces\u201d relationship.</p> <p>A \"replaces\" relationship is a pretty common requirement. In fact, Alfresco already has a \"replaceable\" aspect in the out-of-the-box content model. The \u201creplaceable\u201d aspect defines an association called \u201ccm:replaces\u201d. So, the out-of-the-box content model already accommodates documents that replace other documents. All that is needed is some configuration to expose this relationship to the user interface.</p> <p>The business logic will reside in an action executer class. This will allow SomeCo end-users to call the action from a rule configured on any folder, without further involvement from the development team.</p> <p>Implementing the action's business logic involves two steps:</p> <ol> <li>Writing the action executer class</li> <li>Configuring the action in Spring</li> </ol> <p>Once that's done, the action can be called from code using the Action Service, or it can be wired in to the user interface (including rule configuration), which is covered in Part 2.</p>"},{"location":"actions/tutorial/tutorial/#step-1-write-the-action-executer-class","title":"Step 1: Write the action executer class","text":"<p>At its most basic, an action consists of an Action Executer class and its associated Spring bean configuration. Implementing an action involves extending <code>ActionExecuterAbstractBase</code> and then implementing the <code>executeImpl()</code> method. Before starting, though, think about similar code that might already exist within Alfresco that might be a good starting point for the new action. Alfresco is open source--it would be a shame to ignore that valuable resource. Plus, following the same patterns to implement this customization will make it easier for someone to support and makes it easier to share our code with others or even to contribute the code back to the Alfresco community project.</p> <p>The new action is doing a move, so the existing Move action is a good place to start. In fact, the only difference between the Move action and the custom Move Replaced action is that the node being moved isn't the current node--it's the node on the target end of a \"replaces\" association.</p> <p>Alfresco's executer class for the Move action is called <code>org.alfresco.repo.action.executer.MoveActionExecuter</code>. If you have the Alfresco source you can find it in the repository project. I'll copy it into my own repository project and call it \"MoveReplacedActionExecuter\".</p> <p>The out-of-the-box <code>executeImpl()</code> method is where the move logic is handled. It looks like this:</p> <pre><code>public void executeImpl(Action ruleAction, NodeRef actionedUponNodeRef)\n{\n    NodeRef destinationParent = (NodeRef)ruleAction.getParameterValue(PARAM_DESTINATION_FOLDER);\n    try\n    {\n        fileFolderService.move(actionedUponNodeRef, destinationParent, null);\n    }\n    catch (FileNotFoundException e)\n    {\n        // Do nothing\n    }\n}\n</code></pre> <p>The code simply grabs the parameter value for the destination folder and then calls the <code>FileFolderService</code> to do the move. This is a good start for Move Replaced. All I need to do is modify the <code>executeImpl()</code> method to find the nodes related to the current node by a \"replaces\" association, and then for each result, set up and perform a move.</p> <pre><code>public void executeImpl(Action ruleAction, NodeRef actionedUponNodeRef) {\n    // get the replaces associations for this node\n    List&lt;AssociationRef&gt; assocRefs = nodeService.getTargetAssocs(actionedUponNodeRef, ((QNamePattern) QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI, \"replaces\")) );\n\n    // if there are none, return\n    if (assocRefs.isEmpty()) {\n         // no work to do, return\n         return;\n    } else {\n        NodeRef destinationParent = (NodeRef)ruleAction.getParameterValue(PARAM_DESTINATION_FOLDER);\n        for (AssociationRef assocNode : assocRefs) {\n            // create a noderef for the replaces association\n            NodeRef targetNodeRef = assocNode.getTargetRef();\n            // if the node exists\n            if (this.nodeService.exists(targetNodeRef) == true) {\n                try {\n                    fileFolderService.move(targetNodeRef, destinationParent, null);\n                } catch (FileNotFoundException e) {\n                    // Do nothing\n                }\n            }\n        } // next assocNode\n    } // end if isEmpty\n}\n</code></pre> <p>The only other change needed is to change the value of the constant NAME from \"move\" to \"move-replaced\". (Throughout this document I'll only include relevant pieces of these classes\u2014check the source that accompanies this tutorial for code that actually compiles).</p>"},{"location":"actions/tutorial/tutorial/#step-2-configure-the-action-in-spring","title":"Step 2: Configure the action in Spring","text":"<p>In the content types tutorial, you learned that Spring bean configurations go in the context file for the AMP. That file is called \"service-context.xml\" and it resides in:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-platform/src/main/resources/alfresco/module/actions-tutorial-platform/context\n</code></pre> <p>The file is created for you by the Alfresco Maven SDK. Initially, it contains some <code>bean</code> elements for some demo classes that are also created by the Alfresco Maven SDK. It is safe to delete the demo beans. If you deleted the demo Java code that the SDK created, you must also delete the demo beans.</p> <p>Add the following <code>bean</code> element to the existing <code>beans</code> element:</p> <pre><code>&lt;bean id=\"move-replaced\" class=\"com.someco.action.executer.MoveReplacedActionExecuter\" parent=\"action-executer\"&gt;\n    &lt;property name=\"fileFolderService\"&gt;\n        &lt;ref bean=\"FileFolderService\" /&gt;\n    &lt;/property&gt;\n    &lt;property name=\"nodeService\"&gt;\n        &lt;ref bean=\"NodeService\" /&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>That's all there is to it. You can now invoke either of these two actions with the Action Service.</p>"},{"location":"actions/tutorial/tutorial/#testing-the-action","title":"Testing the Action","text":"<p>In the source code that accompanies this tutorial, I've included some integration tests. The integration tests just attempt to use the <code>ActionService</code> to get the action. For the Move Replaced action, I also execute the action.</p> <p>If you are following along, you can copy the <code>MoveReplacedActionIT</code> class into:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-platform/src/test/java/com/someco/action/test\n</code></pre> <p>Once you do that (or if you have simply checked out the tutorial source from GitHub) you can then run <code>./run.sh build_start_it_supported</code> to start up the Alfresco Docker containers with your extensions installed. Once everything is up, run <code>./run.sh test</code> to compile and run the integration tests.</p> <p>So at this point, you've got one new custom action, but it isn't configured in the Alfresco Share user interface. Before doing that, let's look at another Action Executer example, then we'll configure them both in the UI.</p>"},{"location":"actions/tutorial/tutorial/#implementing-the-set-web-flag-action","title":"Implementing the Set Web Flag action","text":"<p>This action will be used to set the flag on content which should be shown in the SomeCo portal. Recall from the content types tutorial that the property that controls whether or not content should show up in the portal is a boolean named <code>sc:isActive</code> which is defined as part of an aspect named <code>sc:webable</code>. Also in that aspect is a date property named <code>sc:published</code> that keeps track of when the content was last published to the portal.</p> <p>The Set Web Flag action, then, needs to set the <code>sc:isActive</code> flag. The value to set it to (<code>true</code> or <code>false</code>) can be passed in as a parameter to the action. When the flag is set to <code>true</code>, the action should set the <code>sc:published</code> property with the current date.</p> <p>This action could be called from a rule, but SomeCo intends to configure a UI action in the user interface to allow end-users the ability to enable or disable a piece of content for display on the portal with a single click.</p> <p>Just like in the Move Replaced example, the steps are:</p> <ol> <li>Write the action executer class</li> <li>Configure the action in Spring</li> </ol> <p>Then, the action will be ready to use.</p>"},{"location":"actions/tutorial/tutorial/#step-1-write-the-setwebflag-action-executer-class","title":"Step 1: Write the SetWebFlag action executer class","text":"<p>Like the <code>MoveReplacedAction</code>, this action class extends <code>ActionExecuterAbstractBase</code>. The action takes a parameter that specifies the value for the <code>sc:isActive</code> flag. Actions declare parameters by overriding the <code>addParameterDefinitions()</code> method, like this:</p> <pre><code>@Override\nprotected void addParameterDefinitions(List&lt;ParameterDefinition&gt; paramList) {\n    paramList.add(\n        new ParameterDefinitionImpl(\n                PARAM_ACTIVE,\n                DataTypeDefinition.BOOLEAN,\n                false,\n                getParamDisplayLabel(PARAM_ACTIVE)));\n}\n</code></pre> <p>The constructor for the <code>ParameterDefinitionImpl</code> takes the name of the parameter, the parameter's data type, whether or not the parameter is mandatory, and a label. If the custom action had additional parameters this method would have one <code>paramList.add()</code> call for each parameter.</p> <p>The next step is to create the action's logic in the <code>executeImpl()</code> method:</p> <pre><code>@Override\nprotected void executeImpl(Action action, NodeRef actionedUponNodeRef) {    \n    Boolean activeFlag = (Boolean)action.getParameterValue(PARAM_ACTIVE);\n\n    if (activeFlag == null) activeFlag = true; // default\n\n    // set the sc:isActive property to true\n    Map&lt;QName, Serializable&gt; properties = nodeService.getProperties(actionedUponNodeRef);\n    properties.put(\n        QName.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.PROP_IS_ACTIVE), activeFlag);\n\n    if (activeFlag) {\n        // set the sc:published property to now\n        properties.put(\n            QName.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.PROP_PUBLISHED), new Date());\n    }\n\n    // if the aspect has already been added, set the properties\n    if (nodeService.hasAspect(actionedUponNodeRef,\n                QName.createQName(\n                    SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL,\n                    SomeCoModel.ASPECT_SC_WEBABLE))) {\n        nodeService.setProperties(actionedUponNodeRef, properties);\n    } else {\n        // otherwise, add the aspect and set the properties\n        nodeService.addAspect(actionedUponNodeRef,\n                Qname.createQName(\n                    SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL,\n                    SomeCoModel.ASPECT_SC_WEBABLE), properties);\n    }                  \n}\n</code></pre> <p>The logic should be pretty easy to follow. The code grabs the value of the <code>active</code> parameter. Then, it sets up a <code>Map</code> to hold properties. If the active flag is being set to <code>true</code>, the date property is added to the <code>Map</code>. The last part of the method just checks to see whether the aspect needs to be added or not. If so, the aspect can be added and the properties set in a single call.</p>"},{"location":"actions/tutorial/tutorial/#step-2-configure-the-action-in-spring_1","title":"Step 2: Configure the action in Spring","text":"<p>The Spring configuration for this action goes in the same context file as the pervious action (service-context.xml):</p> <pre><code>&lt;bean id=\"set-web-flag\" class=\"com.someco.action.executer.SetWebFlag\" parent=\"action-executer\"&gt;\n    &lt;property name=\"nodeService\"&gt;\n        &lt;ref bean=\"NodeService\" /&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>The action can now be invoked by the Action Service. If you want, you can test it by starting up the Docker containers and then running <code>./run.sh test</code> just like you did for the Move Replaced action.</p>"},{"location":"actions/tutorial/tutorial/#localizing-the-actions","title":"Localizing the actions","text":"<p>This step isn't strictly necessary at this point, but it will save a step later. There are some places in the Alfresco Share user interface that get localized values from the repository tier. So a user-friendly title and description for each of these actions needs to be set.</p> <p>Following the same pattern as the content tutorial, I created a \"messages\" folder in:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-platform/src/main/resources/alfresco/module/actions-tutorial-platform\n</code></pre> <p>It is okay to delete the demo properties file that the SDK may have put in the messages folder.</p> <p>In that folder I created a file called \"somecoactions.properties\" with the following content:</p> <pre><code># Move Replaced action\nmove-replaced.title=Move replaced document to space\nmove-replaced.description=This will move the target node of a replaces association to a specified space.\n\n# Set web flag action\nset-web-flag.title=Sets the SC Web Flag\nset-web-flag.description=This\u00a0will\u00a0add the sc:webable aspect and set the isActive flag.\n</code></pre> <p>Spring needs to know about this properties bundle, so I replaced the demo Spring beans in bootstrap-context.xml with this bean:</p> <pre><code>&lt;bean id=\"${project.artifactId}_actionResourceBundles\" parent=\"actionResourceBundles\"&gt;\n    &lt;property name=\"resourceBundles\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco.module.${project.artifactId}.messages.somecoactions&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Now when Alfresco Share asks for the title or description of these actions, it will get the appropriate values.</p> <p>Both of these actions are now ready to be wired in to the user interface. That's covered in Part 2.</p>"},{"location":"actions/tutorial/tutorial/#part-2-configuring-the-actions-front-end-in-share","title":"Part 2: Configuring the Action's Front-End in Share","text":"<p>In Part 1 of this document you learned how to create an Action Executer class. The result was an action that could be called from code. But both actions need to be invoked by end-users. In the case of the Move Replaced action, an end-user will configure a rule that will invoke the action. When the end-user configures the action while setting up the rule, they need to specify the directory to send the replaced documents to. That means the user interface needs to know how to let the end user pick a target folder.</p> <p>The Set Web Flag action gives end-users the ability to set the active flag and the publish date with a single click of a menu item. So the user interface needs to know where to show that menu item and how to invoke the <code>set-web-flag</code> action in the repository.</p>"},{"location":"actions/tutorial/tutorial/#configuring-the-replaceable-aspect-in-share","title":"Configuring the Replaceable Aspect in Share","text":"<p>Alfresco's out-of-the-box content model already defines an association called <code>cm:replaces</code> as part of the <code>cm:replaceable</code> aspect. But neither the aspect nor the association are configured to be displayed in the Share user interface. That's easy to fix. All you have to do is edit share-config-custom.xml and then localize the labels.</p>"},{"location":"actions/tutorial/tutorial/#step-1-edit-share-config-customxml","title":"Step 1: Edit share-config-custom.xml","text":"<p>Recall from the content types tutorial that the Share user interface configuration resides in a file called \u201cshare-config-custom.xml\u201d. The actions-tutorial-share project will have its own share-config-custom.xml that contains Share configuration specific to the custom actions. The file resides under:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/META-INF\n</code></pre> <p>You can replace the demo config elements the SDK populated in share-config-custom.xml as instructed in this section.</p> <p>The <code>cm:replaceable</code> aspect can be added to the list of aspects a user can see by adding some document library configuation to share-config-custom.xml, like this:</p> <pre><code>&lt;alfresco-config&gt;\n    &lt;!-- Document Library config section --&gt;\n    &lt;config evaluator=\"string-compare\" condition=\"DocumentLibrary\"&gt;\n        &lt;aspects&gt;\n            &lt;!-- Aspects that a user can see --&gt;\n            &lt;visible&gt;\n                &lt;aspect name=\"cm:replaceable\" /&gt;\n            &lt;/visible&gt;\n\n            &lt;!-- Aspects that a user can add. Same as \"visible\" if left empty --&gt;\n            &lt;addable&gt;\n            &lt;/addable&gt;\n\n            &lt;!-- Aspects that a user can remove. Same as \"visible\" if left empty --&gt;\n            &lt;removeable&gt;\n            &lt;/removeable&gt;\n        &lt;/aspects&gt;\n    &lt;/config&gt;\n&lt;/alfresco-config&gt;\n</code></pre> <p>Next, the <code>cm:replaces</code> association needs to show up when editing properties. In this example, SomeCo will use instances of <code>cm:content</code> for policies, but this would work the same way if a specific content type, like <code>sc:hrPolicy</code>, were used instead. So I've copied the form configuration for <code>cm:content</code> from the out-of-the-box form configuration into share-config-custom.xml.</p> <p>Just like in the content types tutorial, the association is configured by adding children to the <code>field-visibility</code> and <code>appearance</code> elements, like this:</p> <pre><code>   &lt;show id=\"surf:mid\"/&gt;\n   &lt;show id=\"surf:label\"/&gt;\n\n   &lt;!-- cm:replaceable --&gt;\n   &lt;show id=\"cm:replaces\" /&gt;\n\n&lt;/field-visibility&gt;\n</code></pre> <p>and this:</p> <pre><code>   &lt;field id=\"cm:sentdate\" read-only=\"true\" /&gt;\n   &lt;field id=\"cm:subjectline\" read-only=\"true\" /&gt;\n   &lt;field id=\"cm:replaces\" label-id=\"assoc.cm_replaces\"/&gt;\n&lt;/appearance&gt;\n</code></pre>"},{"location":"actions/tutorial/tutorial/#step-2-localize-the-labels","title":"Step 2: Localize the labels","text":"<p>The last step in exposing the <code>cm:replaceable</code> aspect and <code>cm:replaces</code> association is localizing the labels. As you saw in the content types tutorial, custom labels go in:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/alfresco/web-extension/messages\n</code></pre> <p>The SDK probably created a demo properties file in that directory. Delete it.</p> <p>I'll create a new file for this module called scActions.properties. In it goes the following:</p> <pre><code>#cm:replaceable\naspect.cm_replaceable=Replaceable\nassoc.cm_replaces=Replaces\n</code></pre> <p>The custom properties file needs to be configured using Spring. So, again, just like the custom content types tutorial, I'll edit a context file called \"actions-tutorial-slingshot-application-context.xml\" in:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/alfresco/web-extension\n</code></pre> <p>Replace the demo bean that the SDK created for you with this:</p> <pre><code>&lt;!-- Add Someco messages --&gt;\n&lt;bean id=\"${project.artifactId}_resources\" class=\"org.springframework.extensions.surf.util.ResourceBundleBootstrapComponent\"&gt;\n    &lt;property name=\"resourceBundles\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco.web-extension.messages.scActions&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Now the replaceable aspect can be added to and removed from documents using Alfresco Share. The next step is to configure the Move Replaced Rule Action in Share.</p>"},{"location":"actions/tutorial/tutorial/#configuring-the-move-replaced-rule-action-in-share","title":"Configuring the Move Replaced Rule Action in Share","text":"<p>Share is pretty smart. If you deploy the Move Replaced action as-is it will automatically get added to the list of actions users can select when configuring a rule. So for simple actions, you won't have to do anything further. But in this example, the action takes an argument. By default, Share will try to render a plain text field for the argument, like this:</p> <p></p> <p>A plain text field for the parameter might work in some cases, but this action takes a node reference as an argument and making an end-user provide a node reference for the target folder would be a very bad thing. Instead, Share needs to render a folder picker dialog for the target folder argument. Luckily, Alfresco has already developed such a dialog\u2014Share just has to be told to use it.</p> <p>Unfortunately, at the moment, getting a folder picker to show up for this action takes a bit more work than it ought to. Here is what is involved:</p> <ol> <li>Override the rule config action web script to point to a custom     client-side component and to set the order the action appears in the     action list.</li> <li>Override the rule details and rule edit web script to include a     \u201cscript\u201d reference in the \u201chead\u201d section of the page that points to     the client-side JavaScript where the custom client-side component     lives.</li> <li>Write the custom client-side component.</li> </ol> <p>It looks like a pain, but once you figure it out it isn't too bad. And it is a lot easier than it used to be if that makes you feel any better. Let's go through the steps.</p>"},{"location":"actions/tutorial/tutorial/#step-1-specify-the-custom-client-side-component-and-set-the-action-order","title":"Step 1: Specify the custom client-side component and set the action order","text":"<p>Rule config lives in the rule config web script. It is easy to override one or more files that make up a web script. In this case, copy the rule-config-action.get.config.xml file from:</p> <pre><code>$TOMCAT_HOME/webapps/share/WEB-INF/classes/alfresco/site-webscripts/org/alfresco/components/rules/config\n</code></pre> <p>into your own project. For example, in the code that accompanies this tutorial, I copied the file into:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/components/rules/config\n</code></pre> <p>The first change is to specify a custom client-side JavaScript component:</p> <pre><code>&lt;rule-config type=\"action\"&gt;\n   &lt;component&gt;SomeCo.RuleConfigActionCustom&lt;/component&gt;\n   &lt;config-definitions webscript=\"/api/actiondefinitions\"&gt;\n</code></pre> <p>This will be a new client-side JavaScript component that will get created shortly.</p> <p>Next, the action gets arranged in the list of actions. In this case, it makes sense to see it in the list right after \u201cMove\u201d so a new <code>action</code> element gets added accordingly:</p> <pre><code>&lt;menu&gt;\n    &lt;group&gt;\n        &lt;item id=\"select\"/&gt;\n    &lt;/group&gt;\n    &lt;group&gt;\n        &lt;action name=\"script\"/&gt;\n    &lt;/group&gt;\n    &lt;group&gt;\n        &lt;action name=\"copy\"/&gt;\n        &lt;action name=\"move\"/&gt;\n        &lt;action name=\"move-replaced\"/&gt;\n    &lt;/group&gt;\n</code></pre> <p>Finally, the <code>move-replaced</code> action gets bound with a client-side JavaScript function called <code>MoveReplaced</code>:</p> <pre><code>&lt;action name=\"copy\"&gt;Copy&lt;/action&gt;\n&lt;action name=\"move\"&gt;Move&lt;/action&gt;\n&lt;action name=\"move-replaced\"&gt;MoveReplaced&lt;/action&gt;      \n&lt;action name=\"simple-workflow\"&gt;SimpleWorkflow&lt;/action&gt;\n</code></pre> <p>With this configuration in place, the custom Move Replaced action will show up in the list of actions that can be performed as part of a rule.</p>"},{"location":"actions/tutorial/tutorial/#step-2-add-a-reference-to-the-custom-client-side-javascript-file-to-the-head","title":"Step 2: Add a reference to the custom client-side JavaScript file to the head","text":"<p>The <code>move-replaced</code> action is going to be invoking some client-side JavaScript. So a reference to the file that contains the JavaScript needs to be added to the page so it can be loaded by the browser. The preferred way to point to a client-side resource is by adding it to the Freemarker view as a dependency. To do that, the rule-details.get.html.ftl and rule-edit.get.html.ftl files are copied from:</p> <pre><code>$TOMCAT_HOME/webapps/share/WEB-INF/classes/alfresco/site-webscripts/org/alfresco/components/rules\n</code></pre> <p>Into the tutorial project under:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/components/rules\n</code></pre> <p>In both files, the new <code>script</code> element is added to the end of the JavaScript dependencies, like this:</p> <pre><code>&lt;@markup id=\"js\"&gt;\n    &lt;#-- JavaScript Dependencies --&gt;\n    ...SNIP...\n    &lt;!--Custom javascript file include for detail mode --&gt;\n    &lt;@script type=\"text/javascript\" src=\"${url.context}/res/components/someco/rules/config/rule-config-action-custom.js\" group=\"rules_custom\"&gt;&lt;/@script&gt;\n&lt;/@&gt;\n</code></pre> <p>Okay, at this point, the rule form will be looking for a custom client-side JavaScript component called SomeCo.RuleConfigActionCustom, the action will show up in the right place, and the page's <code>head</code> element will include a reference to the custom client-side JavaScript file where the component will reside. It's time to implement the client-side JavaScript.</p>"},{"location":"actions/tutorial/tutorial/#step-3-implement-the-custom-client-side-javascript-component","title":"Step 3: Implement the custom client-side JavaScript component","text":"<p>The FreeMarker files have been modified to include a reference to a file called rule-config-action-custom.js. This file will contain client-side JavaScript. It goes in:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/META-INF/resources/components/someco/rules/config\n</code></pre> <p>Alfresco has their rule-related client-side JavaScript under \u201ccomponents/rules/config\u201d so I used the same folder structure, using \"someco\" to keep my stuff separate from Alfresco's.</p> <p>The first thing the rule-config-action-custom.js file does is declare a SomeCo namespace. It is important that you namespace everything in Alfresco to avoid collisions with Alfresco's code or other add-ons you might install.</p> <pre><code>if (typeof SomeCo == \"undefined\" || !SomeCo)\n{\n   var SomeCo = {};\n}\n</code></pre> <p>Next, comes the constructor for the component (I've left out some boring stuff, check the source for the full listing):</p> <pre><code>SomeCo.RuleConfigActionCustom = function(htmlId)\n{\n   SomeCo.RuleConfigActionCustom.superclass.constructor.call(this, htmlId);\n\n   // Re-register with our own name\n   this.name = \"SomeCo.RuleConfigActionCustom\";\n   Alfresco.util.ComponentManager.reregister(this);\n\n   // Instance variables\n   this.customisations = YAHOO.lang.merge(this.customisations, SomeCo.RuleConfigActionCustom.superclass.customisations);\n   this.renderers = YAHOO.lang.merge(this.renderers, SomeCo.RuleConfigActionCustom.superclass.renderers);\n\n   return this;\n};\n</code></pre> <p>What's going on here is that the constructor is calling its superclass constructor, then it is registering itself with the Alfresco component manager. The YUI merge calls provide a way to avoid re-typing a bunch of code that exists in the parent class.</p> <p>The final bit is where the extend actually happens, and the <code>MoveReplaced</code> handler is defined:</p> <pre><code>YAHOO.extend(SomeCo.RuleConfigActionCustom, Alfresco.RuleConfigAction,\n{\n\n   /**\n    * CUSTOMISATIONS\n    */\n\n   customisations:\n   {         \n      MoveReplaced:\n      {\n         text: function(configDef, ruleConfig, configEl)\n         {\n              // Display as path\n              this._getParamDef(configDef, \"destination-folder\")._type = \"path\";\n              return configDef;\n         },\n         edit: function(configDef, ruleConfig, configEl)\n         {\n             // Hide all parameters since we are using a cusotm ui but set default values\n             this._hideParameters(configDef.parameterDefinitions);\n\n             // Make parameter renderer create a \"Destination\" button that displays an destination folder browser\n             configDef.parameterDefinitions.splice(0,0,{\n                type: \"arca:destination-dialog-button\",\n                displayLabel: this.msg(\"label.to\"),\n                _buttonLabel: this.msg(\"button.select-folder\"),\n                _destinationParam: \"destination-folder\"\n             });\n             return configDef;\n         }\n      },\n   },\n\n});\n</code></pre> <p>This part is a copy of the out-of-the-box handler for <code>Move</code> with the object renamed to <code>MoveReplaced</code>. The <code>MoveReplaced</code> object has two methods: <code>text</code> and <code>edit</code>. The <code>text</code> method returns what is displayed for the component in read mode. Edit is for edit mode. The <code>edit</code> method is what is responsible for generating the button that invokes the folder picker. In this case, <code>edit</code> leverages an existing renderer called <code>arca:destination-dialog-button</code> that is defined in the superclass. If you needed to produce markup for a parameter for which Alfresco doesn't already have a renderer, you would add the appropriate code to the renderers object.</p> <p>With this final step in place, end-users can configure a rule that invokes the Move Replaced action. The rule editor will use the custom handler for the action so that a folder picker dialog is used to select the target folder.</p> <p>You can see this happening in the screenshot below. You can see the dialog that gets launched when the Select button is clicked as well as the little folder icon and folder path that are rendered once a selection is made.</p> <p></p>"},{"location":"actions/tutorial/tutorial/#testing-your-share-configuration","title":"Testing Your Share Configuration","text":"<p>You can use the Alfresco Maven SDK to run the actions-tutorial project using Docker and Docker Compose. The Alfresco and Share WARs installed in the Tomcat servers in the Docker containers will have the content-tutorial AMPs installed because we added them to the Docker modules' pom.xml and, of course, will also have the actions-tutorial AMPs installed.</p> <p>To start it up, open a terminal window, switch to the actions-tutorial project root directory, and run <code>./run.sh build_start</code> (if you are on Windows, use <code>run.bat</code> instead).</p> <p>That starts Alfresco in a container that is listening on port 8080 and Share in a container that is listening on port 8180.</p>"},{"location":"actions/tutorial/tutorial/#configuring-the-set-web-flag-ui-action-in-share","title":"Configuring the Set Web Flag UI Action in Share","text":"<p>Now it is time to shift focus from rule actions to UI actions. SomeCo wants end-users to be able to click an item in the menu that either enables or disables the web flag. Alfresco has a framework that allows you to easily add new UI actions to the menu. You can configure:</p> <ul> <li>UI actions that call a web page (external or within Share),</li> <li>UI actions that invoke rule actions on the repository tier that take     no parameters,</li> <li>UI actions that invoke rule actions on the repository tier that     launch a dialog to gather parameters before passing those parameters     to an action on the repository tier,</li> <li>UI actions that call arbitrary client-side JavaScript action     handlers.</li> </ul> <p>Recall that the Set Web Flag action you wrote in Part 1 takes one parameter\u2014the value of the <code>active</code> flag. I could use the action framework out-of-the-box to invoke a dialog that lets the user set the action flag to <code>true</code> or <code>false</code> and then call the set web flag action. But that doesn't meet the single-click requirement, and a form is overkill to grab one boolean value.</p> <p>If you look in the list above, you'll see there isn't an option to hardcode arbitrary parameters in the action config when the action is called. So we're forced to either call a custom client-side JavaScript action handler or add new actions to the repository tier that don't take parameters. There's no \u201cright\u201d answer here\u2014it's just a matter of where you want to write the code. At some point, Alfresco will probably enhance the framework to meet this use case. Until then, for this example, I'm going to go the \u201cno parameter\u201d route, which means I'll have to add two new actions on the repository tier that don't require parameters to be passed in.</p> <p>So, the steps to follow for this example are:</p> <ol> <li>Create two new repository tier actions that take no parameters</li> <li>Update share-config-custom.xml with the action configuration</li> <li>Create icons and localize the strings</li> </ol>"},{"location":"actions/tutorial/tutorial/#step-1-create-two-new-repository-tier-actions","title":"Step 1: Create two new repository tier actions","text":"<p>You created action executer classes in Part 1 of this tutorial so this is nothing new. We're creating two new ones that don't take any parameters because we want to easily take advantage of the logic Alfresco Share already has for invoking actions that don't take parameters. There needs to be one action for enabling the active flag and one for disabling it and neither should take a parameter. By sub-classing the existing <code>SetWebFlag</code> action, code can be kept to a minimum. Here's the <code>EnableWebFlag</code> action executer in its entirety:</p> <pre><code>public class EnableWebFlag extends SetWebFlag {\n    @Override\n    protected void executeImpl(Action action, NodeRef actionedUponNodeRef) {\n        action.setParameterValue(SetWebFlag.PARAM_ACTIVE, true);\n        super.executeImpl(action, actionedUponNodeRef);\n    }\n}\n</code></pre> <p>The <code>DisableWebFlag</code> action looks just like this but sets the <code>active</code> flag to <code>false</code>. I won't repeat it here.</p> <p>The Spring configuration for the action is similarly short. It goes in service-context.xml:</p> <pre><code>&lt;bean id=\"enable-web-flag\" class=\"com.someco.action.executer.EnableWebFlag\" parent=\"set-web-flag\"&gt;\n    &lt;property name=\"publicAction\"&gt;\n        &lt;value&gt;false&lt;/value&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Again, I'm leaving out the <code>disable-web-flag</code> bean but it looks just like this one with a different class. Setting the <code>publicAction</code> property to false hides these actions from the action dropdowns. There's no real reason to do that, in this case\u2014it's just an example.</p>"},{"location":"actions/tutorial/tutorial/#step-2-update-share-config-customxml-with-the-action-configuration","title":"Step 2: Update share-config-custom.xml with the action configuration","text":"<p>The next step is to configure the Share user interface to show the UI actions in the document library and document details menus. While we're at it, I'm going to also drop in a UI action that calls a web page just for kicks.</p> <p>The action config is in share-config-custom.xml. Action configuration consists of two parts. The <code>actions</code> element contains a list of action definitions. The <code>actionGroups</code> element contains a list of action groups. Action groups are things like the list of actions shown in the document library document list or the document details page.</p> <p>Actions and action groups live in the <code>DocLibActions</code> config within share-config-custom.xml. Here are the action definitions for the web site action and web enable:</p> <pre><code>&lt;!-- Actions --&gt;\n&lt;config evaluator=\"string-compare\" condition=\"DocLibActions\"&gt;\n    &lt;actions&gt;\n        &lt;action id=\"someco-web-site\" type=\"link\" label=\"actions.someco.web-site\" icon=\"someco-website\"&gt;\n            &lt;param name=\"href\"&gt;https://ecmarchitect.com&lt;/param&gt;\n            &lt;param name=\"target\"&gt;_blank&lt;/param&gt;\n        &lt;/action&gt;\n        &lt;action id=\"someco-web-enable\" type=\"javascript\" label=\"actions.someco.web-enable\" icon=\"someco-create-website\"&gt;\n            &lt;param name=\"function\"&gt;onActionSimpleRepoAction&lt;/param&gt;\n            &lt;permissions&gt;\n                &lt;permission allow=\"true\"&gt;Write&lt;/permission&gt;\n            &lt;/permissions&gt;\n            &lt;param name=\"action\"&gt;enable-web-flag&lt;/param&gt;\n            &lt;param name=\"successMessage\"&gt;message.web-flag.enabled&lt;/param&gt;\n            &lt;param name=\"failureMessage\"&gt;message.web-flag.failure&lt;/param&gt;\n        &lt;/action&gt;\n</code></pre> <p>The <code>someco-web-site</code> action is really simple. It is a <code>link</code> type of an action, which means it is invoking a URL that is provided in a parameter. The labels and icons will get set up in the next step.</p> <p>The <code>someco-web-enable</code> action is a little more involved. It is a \u201cjavascript\u201d action, which means it is calling a client-side JavaScript handler. What's cool is that Alfresco has already provided a client-side handler called \u201conSimpleRepoAction\u201d. It just needs to know the name of the repository tier action to invoke (the ones created in Step 1) and messages to display on success and failure.</p> <p>I've left out <code>someco-web-disable</code> because it is so similar.</p> <p>This action uses the built-in <code>onActionSimpleRepoAction</code>, but what if you needed to gather parameters from the end-user before calling the action? For that you can use <code>onActionFormDialog</code>. The <code>itemId</code> specifies a form ID corresponding to a form defined in share-config-custom.xml. Take a look at the out-of-the-box <code>document-transform</code> action as an example.</p> <p>The last part of the config is the action definitions. This slots the actions into the appropriate groups:</p> <pre><code>    &lt;actionGroups&gt;\n        &lt;actionGroup id=\"document-browse\"&gt;\n            &lt;action index=\"500\" id=\"someco-web-site\" /&gt;\n            &lt;action index=\"510\" id=\"someco-web-enable\" /&gt;\n            &lt;action index=\"520\" id=\"someco-web-disable\" /&gt;                \n        &lt;/actionGroup&gt;\n        &lt;actionGroup id=\"document-details\"&gt;\n            &lt;action index=\"500\" id=\"someco-web-site\" /&gt;\n            &lt;action index=\"510\" id=\"someco-web-enable\" /&gt;\n            &lt;action index=\"520\" id=\"someco-web-disable\" /&gt;                \n        &lt;/actionGroup&gt;\n    &lt;/actionGroups&gt;\n&lt;/config&gt;\n</code></pre> <p>There are a couple of things to note about the action configuration. First, you don't have to copy in the out-of-the-box actions and action groups. They will get merged in. Second, the order of the action items in the list can be controlled by setting the index attribute. The higher the index, the lower in the list the menu items appear.</p>"},{"location":"actions/tutorial/tutorial/#step-3-create-icons-and-localize-the-strings","title":"Step 3: Create icons and localize the strings","text":"<p>The last step is to provide some icons for the actions and localize the action labels. In step 2 the action element had an \u201cicon\u201d attribute. Alfresco will look in a path for an icon that starts with that name and ends with \u201c-16.png\u201d. Entirely lacking in graphics skills, I grabbed a couple of out-of-the-box icons that looked somewhat applicable and copied them in to my project under:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/META-INF/resources/components/documentlibrary/actions\n</code></pre> <p>Because this is Alfresco's folder structure, I made sure to name the icons starting with \u201csomeco\u201d so they would not be confused with others.</p> <p>The localized strings can go in the existing scActions.properties file. Here they are:</p> <pre><code>#actions\nactions.someco.web-site=SomeCo\nactions.someco.web-enable=SC Enable Web\nactions.someco.web-disable=SC Disable Web\nmessage.web-flag.enabled=Successfully enabled the SomeCo active flag\nmessage.web-flag.disabled=Successfully disabled the SomeCo active flag\nmessage.web-flag.failure=Error setting the SomeCo active flag\n</code></pre> <p>With icons and localized strings in place, you can deploy and run and everything should work. If your server is still running from earlier, do a <code>./run.sh stop</code> to stop it, then launch it again by running <code>./run.sh build_start</code> (or <code>run.bat</code> for Windows).</p> <p>If you don't know whether or not your containers are still running, do a <code>docker ps</code> to list the running containers.</p> <p>Once you are able to log in to Share you'll notice that both the Enable and Disable UI actions show up at the same time, which is lame. Check it out:</p> <p></p> <p>The enable should only show up when the active flag is not set to <code>true</code>. The disable should only show up when the active flag is set to <code>true</code>. That's easy to fix with an evaluator and that's covered in the next section.</p>"},{"location":"actions/tutorial/tutorial/#finishing-touches-evaluators-indicators","title":"Finishing Touches: Evaluators &amp; Indicators","text":"<p>If you are writing a UI action that should show up all of the time, you don't need to do anything else. But hiding a UI action based on certain conditions is a pretty common requirement. In this example, the UI action needs to hide based on a metadata value. Alfresco has several \u201cevaluators\u201d that can be leveraged out-of-the-box to do this. You can hide UI actions based on things like:</p> <ul> <li>The presence of an aspect</li> <li>The type of a node</li> <li>Mimetype</li> <li>The type of site the document library is sitting in</li> <li>The name of the site</li> </ul> <p>Evaluators can also be chained together if multiple conditions need to apply. The out-of-the-box evaluators live in slingshot-documentlibrary-context.xml so refer to that file for the full list of evaluators and an example of how chaining works. You can also write completely new evaluators using Java deployed to the Share tier.</p> <p>For this example, the out-of-the-box \u201cvalue\u201d evaluator will do quite nicely. The steps, then, will be as follows:</p> <ol> <li>Declare a new evaluator in Spring config that extends the \u201cvalue\u201d     evaluator</li> <li>Update the action config in share-config-custom.xml to point to the     evaluator</li> </ol> <p>Alfresco has also made it easy to configure \u201cindicators\u201d, which are little icons in the document library column. This isn't entirely relevant to the subject at hand, but because they work just like evaluators and because it makes it easy to see from the document library which content has the active flag set, I'm going to add a third step:</p> <ol> <li>Update the share-config-custom.xml file to show a document library     indicator</li> </ol> <p>After these steps are complete, the UI actions will show or hide themselves appropriately and end-users will be able to see documents with the <code>sc:isActive</code> flag set to <code>true</code> from the document list.</p>"},{"location":"actions/tutorial/tutorial/#step-1-declare-a-new-evaluator-in-spring-config","title":"Step 1: Declare a new evaluator in Spring config","text":"<p>Only one evaluator is needed for this example. The evaluator just needs to know the value of the <code>sc:isActive</code> flag\u2014the UI actions can show or hide themselves based on that. Evaluators live in Spring config. This project already has \u201cactions-tutorial-share-slingshot-application-context.xml\u201d so I added the evaluator to that file:</p> <pre><code>&lt;bean id=\"someco.evaluator.doclib.action.isActive\" parent=\"evaluator.doclib.action.value\"&gt;\n    &lt;property name=\"accessor\" value=\"node.properties.sc:isActive\" /&gt;\n    &lt;property name=\"comparator\"&gt;\n        &lt;bean class=\"org.alfresco.web.evaluator.StringEqualsComparator\"&gt;\n            &lt;property name=\"value\" value=\"true\" /&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>This bean extends the out-of-the-box \u201cvalue\u201d evaluator and provides properties specific to our needs. In this case, the <code>accessor</code> is the name of the property the evaluator needs to inspect. The comparator does a string comparison against the value of \u201ctrue\u201d. Note the use of \u201csomeco\u201d in the bean ID. This is another place where you want to make sure you are using your own namespace.</p> <p>All evaluators work similarly. If you wanted to check for a specific aspect, for example, you would extend the aspect evaluator and then specify the aspect you are looking for in one of the properties.</p>"},{"location":"actions/tutorial/tutorial/#step-2-update-the-action-config-in-share-config-customxml","title":"Step 2: Update the action config in share-config-custom.xml","text":"<p>With an evaluator declared the next step is to tell the action configuration which evaluator to use to decide whether or not to show the UI action. So, back over in share-config-custom.xml, I've added two new <code>evaluator</code> elements to the existing <code>action</code> elements. The <code>evaluator</code> elements point to the <code>someco.evaluator.doclib.action.isActive</code> evaluator configured in the previous step:</p> <pre><code>&lt;action id=\"someco-web-enable\" type=\"javascript\" label=\"actions.someco.web-enable\" icon=\"someco-create-website\"&gt;\n    &lt;param name=\"function\"&gt;onActionSimpleRepoAction&lt;/param&gt;\n    &lt;permissions&gt;\n        &lt;permission allow=\"true\"&gt;Write&lt;/permission&gt;\n    &lt;/permissions&gt;\n    &lt;param name=\"action\"&gt;enable-web-flag&lt;/param&gt;\n    &lt;param name=\"successMessage\"&gt;message.web-flag.enabled&lt;/param&gt;\n    &lt;param name=\"failureMessage\"&gt;message.web-flag.failure&lt;/param&gt;\n    &lt;evaluator negate=\"true\"&gt;someco.evaluator.doclib.action.isActive&lt;/evaluator&gt;\n&lt;/action&gt;\n&lt;action id=\"someco-web-disable\" type=\"javascript\" label=\"actions.someco.web-disable\" icon=\"someco-delete-website\"&gt;\n    &lt;param name=\"function\"&gt;onActionSimpleRepoAction&lt;/param&gt;\n    &lt;permissions&gt;\n        &lt;permission allow=\"true\"&gt;Write&lt;/permission&gt;\n    &lt;/permissions&gt;\n    &lt;param name=\"action\"&gt;disable-web-flag&lt;/param&gt;\n    &lt;param name=\"successMessage\"&gt;message.web-flag.disabled&lt;/param&gt;\n    &lt;param name=\"failureMessage\"&gt;message.web-flag.failure&lt;/param&gt;\n    &lt;evaluator&gt;someco.evaluator.doclib.action.isActive&lt;/evaluator&gt;\n&lt;/action&gt;\n</code></pre> <p>Both actions use the same evaluator. For the <code>someco-web-enable</code> action, the evaluator is negated. So if the evaluator returns true (i.e., the <code>sc:isActive</code> property is set to <code>true</code>) the web enable action will be hidden. If the evaluator returns <code>false</code>, the action will show itself.</p>"},{"location":"actions/tutorial/tutorial/#step-3-update-the-share-config-customxml-file-to-show-a-document-library-indicator","title":"Step 3: Update the share-config-custom.xml file to show a document library indicator","text":"<p>The last step is really not needed at all if all you are doing is adding an action to the menu. But because it is easy to do and leverages the same evaluator written in the previous step, I didn't think you'd mind.</p> <p>The goal here is to show a little icon in the document library only if the <code>sc:isActive</code> property is set to <code>true</code>. If you are already thinking, \u201cHey, that sounds like an evaluator!\u201d you've got it.</p> <p>Indicators are part of the \u201cDocumentLibrary\u201d config in share-config-custom.xml. All it needs is a pointer to an evaluator. In this case, the one created earlier can be reused:</p> <pre><code>    &lt;/types&gt;\n\n    &lt;!-- Custom Indicators --&gt;\n    &lt;indicators&gt;\n        &lt;indicator id=\"someco-website\" index=\"10\"&gt;\n            &lt;evaluator&gt;someco.evaluator.doclib.action.isActive&lt;/evaluator&gt;\n        &lt;/indicator&gt;\n    &lt;/indicators&gt;\n&lt;/config&gt;\n</code></pre> <p>Alfresco will use the indicator's id attribute appended with \u201c-16.png\u201d for the icon. I copied the same icon used for the \u201cenable\u201d action into:</p> <pre><code>$TUTORIAL_HOME/actions-tutorial-share/src/main/resources/META-INF/resources/components/documentlibrary/indicators\n</code></pre> <p>for this purpose.</p> <p>Now you have seen that evaluators can be used to show UI actions and indicators. If the evaluator returns <code>true</code> the UI action or indicator is shown. If it returns <code>false</code> the UI action or indicator is hidden. In the UI actions, you saw that the <code>negate</code> attribute can be used to invert what the evaluator returns. That was used to hide the <code>someco-web-enable</code> UI action when the <code>isActive</code> flag was already <code>true</code>.</p> <p>That's it. You can now either do a <code>./run.sh stop</code> followed by a <code>./run.sh build_start</code> to stop and start all of the containers or you can do a <code>mvn install -DskipTests</code> to build the AMPs then do a <code>./run.sh reload_share</code> to just restart the Share container. You may find the second option to be a lot faster.</p>"},{"location":"actions/tutorial/tutorial/#deploying-to-a-real-server","title":"Deploying to a Real Server","text":"<p>So far, you've been running everything using SDK-generated Docker containers and that works really well while you are developing.</p> <p>If you want to deploy to a standalone Alfresco server, you can either manually copy the AMP files to the \"amps\" and \"amps_share\" directories, then run the MMT (Module Management Tool) to install the AMPs into your WAR files or you can use the ACS Community Packaging project to create your own Docker images, then start those images up using Docker Compose, or Kubernetes, depending on how your servers are deployed.</p> <p>Regardless of the method you choose, you'll need to deploy a total of four AMPs (two repository tier AMPs and two Share tier AMPs) for this to work because the action tutorial AMPs depend on the content tutorial AMPs.</p> <p>If everything is working correctly, you should see the SomeCo web site link and either the SC Web Enable or the SC Web Disable menu items from both the browse menu and the details page as shown below.</p> <p></p> <p></p> <p></p> <p>Clicking the \u201cSomeCo\u201d menu item will open a browser window to the URL specified in the configuration. Clicking the \u201cSC Disable Web\u201d should invoke the action on the repository tier and then refresh the metadata and the action list.</p>"},{"location":"actions/tutorial/tutorial/#topics-to-explore-on-your-own","title":"Topics to Explore On Your Own","text":"<p>This tutorial has shown how actions can be used to implement reusable operations that can be run against content in the repository. Those actions can be called from code using the Action Service and they can be invoked from the user interface by configuring rules or by setting up UI actions and placing those alongside other menu items in places like the document list and the details page. Hopefully it has sparked some ideas about how you could use custom actions in your next Alfresco implementation.</p> <p>There are a few topics I did not have room to address here that you may want to dig into on your own:</p> <ul> <li>Actions can be scheduled. For example, you might have an action that sends an email summary of all the documents that have changed in a given folder in a day.</li> <li>Rule actions can be configured to run a specific server-side JavaScript file if they are running in the background and error out. This might be useful if your action fails and leaves your content in a partial state.</li> <li>In the rule configuration part, I am using an older style of extending the out-of-the-box rule configuration component. The alternative is to use an Alfresco Share Module to override the rule configuration web script instead of overriding it directly.</li> <li>You can use your own forms to gather data needed to pass along to an action.</li> <li>There are many out-of-the-box evaluators you can use to show or hide UI actions. You can also develop your own with Java.</li> </ul>"},{"location":"actions/tutorial/tutorial/#where-to-find-more-information","title":"Where to Find More Information","text":"<ul> <li>The complete source code for these examples is available on GitHub.</li> <li>Official documentation for both Enterprise Edition and Community Edition is available at docs.alfresco.com.</li> <li>Check the Alfresco Community site for blog posts from Mike Hatfield and David Draper, two Alfresco engineers that write about customizing Share.</li> <li>If you are ready to cover new ground, try another ecmarchitect.com tutorial in the Alfresco Developer Series. The most logical next step is the Implementing Custom Behaviors tutorial.</li> </ul>"},{"location":"behaviors/behavior-tutorial/behavior-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"behaviors/behavior-tutorial/behavior-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"behaviors/behavior-tutorial/behavior-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."},{"location":"behaviors/tutorial/tutorial/","title":"Implementing Custom Behaviors in Alfresco","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"behaviors/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"behaviors/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>This tutorial discusses how to write your own custom behavior code in Java or JavaScript and then bind that code to node events or \u201cpolicies\u201d.</p> <p>In previous tutorials I've discussed how to create custom content models and how to write custom actions. In both cases, you've seen how to write code that works with custom content types, properties, aspects, and associations, but the code wasn't tightly coupled to the objects on which it operated. For example, with an action, the business logic is triggered by something\u2014a rule, a clicked link in the user interface, a schedule, or a workflow\u2014rather than being bound to the content type or aspect.</p> <p>Actions are very useful when the business logic the action carries out is generic enough to be applied to many types of objects. The out-of-the-box \"copy\", \"move\", or \"add aspect\" actions are obvious examples.</p> <p>There are times, though, when you want code to be tightly-coupled to a content type because you need to be sure it gets executed every time something happens to that object rather than leaving it up to a rule on a folder or some other trigger. Fortunately, Alfresco provides just such a mechanism\u2014it's called behavior.</p> <p>Behaviors are used throughout Alfresco. Auditing and versioning are examples where behaviors are involved. Here are a couple of other real world examples where behaviors might be useful:</p> <ul> <li>You might need to default some metadata values using logic that can't be expressed using Alfresco content model XML. An example might be that you want to generate a unique identifier for an object when it is added to the repository. You can write a custom behavior that will set the property with the value of the identifier regardless of how the object is created.</li> <li>Suppose you have some metadata stored on a folder and you want some of that metadata to be copied to items that get placed in those folders. You could write a custom behavior to handle this kind of synchronization.</li> </ul> <p>In this tutorial you'll see a simple example also based on a real-world implementation: Using a custom behavior to compute the average user rating (based on a five star scale) for a piece of content.</p> <p>As a side-note, Alfresco has rating functionality built-in. Out-of-the-box it uses a simple \"like\" model but the underlying model supports other schemes. This tutorial completely ignores what's available out-of-the-box.</p> <p>You should already be familiar with general Alfresco concepts. If you want to follow along, you should also know how to write basic Java code. You may want to work through the custom content models tutorial if you aren't already familiar with how to extend Alfresco's content model.</p> <p>All of the source code that accompanies this tutorial is available on GitHub.</p>"},{"location":"behaviors/tutorial/tutorial/#introducing-the-user-ratings-example","title":"Introducing the user ratings example","text":"<p>Recall that the custom content types tutorial created a custom type called \"whitepaper\" for a fictitious company called SomeCo. The custom model also included an aspect called \u201cwebable\u201d that gets attached to content objects SomeCo wants to show on the web. So, for example, SomeCo might use Alfresco to manage all of its whitepapers, but show only a subset on the web. Whitepapers that need to be shown on the web get the webable aspect attached and the <code>sc:isActive</code> flag set to <code>true</code>. The front-end can then query for whitepapers based on that flag.</p> <p>Now let's extend that example further. Suppose that the Marketing folks at SomeCo have decided to add user ratings to their web site. They would like users to be able to assign a rating to a whitepaper and to display the average of all ratings received for a specific whitepaper.</p> <p>Assuming SomeCo wants to store the ratings in Alfresco instead of some other repository, like a relational or NoSQL database, one way to do this is to create a custom \u201crating\u201d type that is related to a whitepaper through a child association. A custom \u201crateable\u201d aspect can be used to define the association as well as a property to store the average rating for that whitepaper. Any object in the repository will get all of the metadata it needs to become \"rateable\" simply by adding the aspect to the object.</p> <p>The image below shows the original custom content model with these enhancements.</p> <p></p> <p>That takes care of the data model, but what about the code that computes the average? There are a few options to consider:</p> <ol> <li>Rule Action. One way to handle it would be to write an action that gets called by a rule. Any time a rating is added to a folder, the rule would trigger the action to update the average. But this isn't the best option because every time SomeCo wants to use user ratings functionality, they'd have to make sure to set up a rule on the folder.</li> <li>Scheduled Action. A scheduled action might not be bad\u2014it could be written to find all objects with the rateable aspect and then compute the average. But if SomeCo wants the average rating computed in real-time (and let's assume they do) a scheduled action isn't a great option.</li> <li>Behavior. The third (and best) option is to use a behavior. The behavior will contain the logic needed to compute the average. It will be bound to the appropriate policies on the rating content type so that any time a rating gets created (or deleted), the behavior will find the rating's parent (the whitepaper) and recalculate the average rating.</li> </ol>"},{"location":"behaviors/tutorial/tutorial/#what-can-trigger-a-behavior","title":"What can trigger a behavior?","text":"<p>So the rating content type will contain business logic that knows how to compute the overall average rating for a whitepaper. But what will trigger that logic? The answer is that there are a bunch of policies to which your behavior can be bound. To find out what's available, you need only look as far as the source code (or the Javadocs). If you search for classes that end in \"*Policies\" you'll find several interfaces, including:</p> <ul> <li>CheckOutCheckInServicePolicies</li> <li>ContentServicePolicies</li> <li>CopyServicePolicies</li> <li>LockServicePolicies</li> <li>NodeServicePolicies</li> <li>TransferServicePolicies</li> <li>VersionServicePolicies</li> </ul> <p>Each of those interfaces contains inner interfaces that represent the policies you can hook into. Check the Javadocs or source code for specifics\u2014I'm listing the methods in the table below so you can see an example of what's available.</p> <p>Note: To make it easier to read, I'm omitting the inner interface which follows the pattern of <code>&lt;method-name&gt;Policy</code>. For example, the <code>onContentUpdate</code> method is a method of the inner interface <code>OnContentUpdatePolicy</code>.</p> Interface Method org.alfresco.repo.content.ContentServicePolicies onContentPropertyUpdate \\ onContentRead \\ onContentUpdate org.alfresco.repo.copy.CopyServicePolicies beforeCopy \\ onCopyComplete \\ onCopyNode org.alfresco.repo.node.NodeServicePolicies beforeAddAspect \\ beforeArchiveNode \\ beforeCreateNode \\ beforeCreateStore \\ beforeDeleteAssociation \\ beforeDeleteChildAssociation \\ beforeDeleteNode \\ beforeMoveNode \\ beforeRemoveAspect \\ beforeSetNodeType \\ beforeUpdateNode \\ onAddAspect \\ onCreateAssociation \\ onCreateChildAssociation \\ onCreateNode \\ onCreateStore \\ onDeleteAssociation \\ onDeleteChildAssociation \\ onDeleteNode \\ onMoveNode \\ onRemoveAspect \\ onSetNodeType \\ onUpdateNode \\ onUpdateProperties org.alfresco.repo.version.VersionServicePolicies beforeCreateVersion \\ afterCreateVersion \\ onCreateVersion \\ calculateVersionLabel <p>Table: Policies available for behavior binding</p> <p>The rating behavior needs to recalculate a whitepaper's rating either when a new rating is created or when a rating is deleted. One possibility would be to bind the behavior to the <code>NodeService</code> policy's <code>onCreateChildAssociation</code> and <code>onDeleteChildAssociation</code> policy for the whitepaper node. But that would mean constantly inspecting the association type to see if the rating needed to be recalculated because there could be other child associations added to the node besides ratings. Instead, the rating behavior will bind to the rating node's <code>onCreateNode</code> and <code>onDeleteNode</code> policies.</p>"},{"location":"behaviors/tutorial/tutorial/#java-or-javascript","title":"Java or JavaScript?","text":"<p>There are two options for writing the code for the behavior: Java or JavaScript. Which one to use depends on the standards you've settled on for the solution you are building. This tutorial will implement the ratings example using Java first and then again in JavaScript so you can see how it is done.</p>"},{"location":"behaviors/tutorial/tutorial/#setup","title":"Setup","text":"<p>Before getting too far down the road, let me tell you about the tools you'll need and then give you a description of the project organization.</p>"},{"location":"behaviors/tutorial/tutorial/#tools","title":"Tools","text":"<p>Here is what I am using on my machine:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 11.0.2</li> <li>Apache Maven 3.8.1</li> <li>Alfresco Maven SDK 4.2 (No download necessary)</li> <li>Docker 20.10.6</li> <li>Docker Compose 1.29.1</li> </ul> <p>By default, when you create an Alfresco project using the Alfresco Maven SDK the project will be configured to depend on the latest stable Alfresco Community Edition build.</p> <p>An IDE is optional. Most people working with Alfresco use IntelliJ, Eclipse, or something similar.</p>"},{"location":"behaviors/tutorial/tutorial/#project-organization","title":"Project Organization","text":"<p>I am going to use the Alfresco Maven SDK to create a project using the \"all-in-one\" archetype. The project will package up my customizations in two AMPs (Alfresco Module Packages): One AMP for the \"repo\" tier and one AMP for the \"share\" tier.</p> <p>I am not going to spend much time talking about how the Alfresco Maven SDK works. If you aren't already familiar with it, you may want to read the Getting Started with the Alfresco Maven SDK tutorial on ecmarchitect.com first and then come back to this one.</p> <p>If you are planning on following along, go ahead and use the Alfresco Maven SDK to create a new project. Use a <code>groupId</code> of \"com.someco\" and an <code>artifactId</code> of \"behavior-tutorial\".</p> <p>I'm going to make a couple of quick changes to the generated project.</p> <p>First, we always want to generate AMP files for our projects. Starting with SDK 3.0.0, the default is to generate JAR files. That's easily fixed by uncommenting the \"maven-assembly-plugin\" in the list of plugins in the pom.xml file.</p> <p>Next, the Java code we are about to write has a compile-time dependency on the content tutorial repo tier project. To satisfy that, edit the \"pom.xml\" file in the behavior-tutorial-platform folder to add the following dependency:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.someco&lt;/groupId&gt;\n    &lt;artifactId&gt;content-tutorial-platform&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Now we're ready to begin.</p>"},{"location":"behaviors/tutorial/tutorial/#implementing-and-deploying-the-custom-behavior-in-java","title":"Implementing and deploying the custom behavior in Java","text":"<p>Let's do the Java example first. Here are the steps:</p> <ol> <li>Create a new custom model specifically for ratings. The model will define     the new rateable aspect and rating type.</li> <li>Write the custom behavior class and bind it to the appropriate     policies. Configure a Spring bean to initialize the behavior class and pass     in any dependencies.</li> <li>Write and execute an integration test for the behavior.</li> </ol> <p>Let's get started.</p>"},{"location":"behaviors/tutorial/tutorial/#step-1-create-a-ratings-model","title":"Step 1: Create a ratings model","text":"<p>In this step you will implement a content model used to persist ratings, optionally configure the user interface so you can see the average rating and rating count in Alfresco Share, define a Java class to hold constants for the model, and write an integration test to test the new aspect.</p>"},{"location":"behaviors/tutorial/tutorial/#implement-the-rating-type-and-rateable-aspect","title":"Implement the rating type and rateable aspect","text":"<p>As you learned in the content types tutorial, models are defined using XML and the XML file resides in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/main/resources/alfresco/module/behavior-tutorial-platform/model\n</code></pre> <p>The Alfresco Maven SDK should have created a model directory for you and it may have populated it with sample content model files. Delete those files as they are not needed.</p> <p>Now, create a new model XML file called \"scRatingsModel.xml\" with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Definition of new Model --&gt;\n&lt;model name=\"scr:somecoratingsmodel\" xmlns=\"http://www.alfresco.org/model/dictionary/1.0\"&gt;\n\n    &lt;!-- Optional meta-data about the model --&gt;\n    &lt;description&gt;Someco Ratings Model&lt;/description&gt;\n    &lt;author&gt;Jeff Potts&lt;/author&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n\n    &lt;!-- Imports are required to allow references to definitions in other models --&gt;\n    &lt;imports&gt;\n        &lt;!-- Import Alfresco Dictionary Definitions --&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/dictionary/1.0\" prefix=\"d\" /&gt;\n        &lt;!-- Import Alfresco Content Domain Model Definitions --&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/content/1.0\" prefix=\"cm\" /&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/system/1.0\" prefix=\"sys\" /&gt;\n      &lt;/imports&gt;\n\n    &lt;!-- Introduction of new namespaces defined by this model --&gt;\n    &lt;namespaces&gt;\n        &lt;namespace uri=\"http://www.someco.com/model/ratings/1.0\" prefix=\"scr\" /&gt;\n    &lt;/namespaces&gt;\n&lt;/model&gt;\n</code></pre> <p>The model needs a type and an aspect. The chunk of XML below adds the type. Insert it after the closing <code>namespaces</code> element:</p> <pre><code>&lt;types&gt;\n    &lt;type name=\"scr:rating\"&gt;\n        &lt;title&gt;Someco Rating&lt;/title&gt;\n        &lt;parent&gt;sys:base&lt;/parent&gt;\n        &lt;properties&gt;\n            &lt;property name=\"scr:rating\"&gt;\n                &lt;type&gt;d:int&lt;/type&gt;\n                &lt;mandatory&gt;true&lt;/mandatory&gt;\n            &lt;/property&gt;\n            &lt;property name=\"scr:rater\"&gt;\n                &lt;type&gt;d:text&lt;/type&gt;\n                &lt;mandatory&gt;true&lt;/mandatory&gt;\n            &lt;/property&gt;\n        &lt;/properties&gt;\n    &lt;/type&gt;\n&lt;/types&gt;\n</code></pre> <p>Note that <code>scr:rating</code> inherits from <code>sys:base</code>. That's because rating objects aren't going to store any content, they will only store properties.</p> <p>Now add the <code>scr:rateable</code> aspect. The <code>aspects</code> element goes after the closing <code>types</code> element:</p> <pre><code>&lt;aspects&gt;\n    &lt;aspect name=\"scr:rateable\"&gt;\n        &lt;title&gt;Someco Rateable&lt;/title&gt;\n        &lt;properties&gt;\n            &lt;property name=\"scr:averageRating\"&gt;\n                &lt;type&gt;d:double&lt;/type&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n            &lt;/property&gt;\n            &lt;property name=\"scr:totalRating\"&gt;\n                &lt;type&gt;d:int&lt;/type&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n            &lt;/property&gt;\n            &lt;property name=\"scr:ratingCount\"&gt;\n                &lt;type&gt;d:int&lt;/type&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n            &lt;/property&gt;             \n        &lt;/properties&gt;\n        &lt;associations&gt;\n            &lt;child-association name=\"scr:ratings\"&gt;\n                &lt;title&gt;Rating&lt;/title&gt;\n                &lt;source&gt;\n                    &lt;mandatory&gt;false&lt;/mandatory&gt;\n                    &lt;many&gt;true&lt;/many&gt;\n                &lt;/source&gt;\n                &lt;target&gt;\n                    &lt;class&gt;scr:rating&lt;/class&gt;\n                    &lt;mandatory&gt;false&lt;/mandatory&gt;\n                    &lt;many&gt;true&lt;/many&gt;\n                &lt;/target&gt;\n            &lt;/child-association&gt;\n        &lt;/associations&gt;\n    &lt;/aspect&gt;\n&lt;/aspects&gt;\n</code></pre> <p>The <code>scr:rateable</code> aspect has three properties used to store the average rating, total rating, and rating count. It also defines the child association between a piece of content and its ratings.</p> <p>Using an aspect means any piece of content in the repository can become \"rateable\" simply by adding the aspect to the object. SomeCo may start out using ratings only for whitepapers and then decide later to use them for other types of content. If so, it won't require any code changes. That's the beauty of aspects.</p> <p>Alfresco needs to know about the new model. Models are registered through Spring. There are multiple Spring context files. It doesn't really matter which one you use to wire in your models. Newer versions of the SDK use the bootstrap-context.xml file, so let's use that. is called service-context.xml and it lives in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module/behavior-tutorial-platform/context\n</code></pre> <p>The context file may already exist and probably contains sample Spring beans used to wire in sample models and labels. Replace whatever is there with the bean below. It refers to the model XML file created earlier as well as a properties file that doesn't exist yet:</p> <pre><code>&lt;bean id=\"${project.artifactId}_dictionaryBootstrap\" parent=\"dictionaryModelBootstrap\" depends-on=\"dictionaryBootstrap\"&gt;\n    &lt;property name=\"models\"&gt;\n        &lt;list&gt;                \n            &lt;value&gt;alfresco/module/${project.artifactId}/model/scRatingsModel.xml&lt;/value&gt;                \n        &lt;/list&gt;\n    &lt;/property&gt;\n    &lt;property name=\"labels\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco/module/${project.artifactId}/messages/scRatingsModel&lt;/value&gt;\n        &lt;/list&gt;        \n    &lt;/property&gt;        \n&lt;/bean&gt;\n</code></pre> <p>With that, the model is set up and ready to go.</p>"},{"location":"behaviors/tutorial/tutorial/#optionally-configure-the-user-interface","title":"Optionally configure the user interface","text":"<p>Behaviors operate behind the scenes. So, really, there is no reason to configure the user interface at all. But I like to do it because it makes it easier to debug. And, SomeCo might want to use Alfresco Share to see the average rating and rating count for a piece of content that has the rateable aspect.</p> <p>In the previous step you added a Spring bean that referred to a properties bundle used for the labels associated with the model. The labels go in a file called scRatingsModel.properties. That file lives in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module/behavior-tutorial-platform/messages\n</code></pre> <p>The content of that file looks like this:</p> <pre><code>#scr:rating\nscr_somecoratingsmodel.type.scr_rating.title=Rating\nscr_somecoratingsmodel.property.scr_rating.title=Rating\nscr_somecoratingsmodel.property.scr_rater.title=Rater\n\n#scr:rateable\nscr_somecoratingsmodel.aspect.scr_rateable.title=SomeCo Rateable\nscr_somecoratingsmodel.property.scr_averageRating=Average Rating\nscr_somecoratingsmodel.association.scr_ratings.title=Ratings\n</code></pre> <p>You can delete the example properties file that may already be in the messages directory.</p> <p>That's all that's needed in the behavior-tutorial-platform project. The rest of the user interface configuration takes place in the behavior-tutorial-share project.</p> <p>Because these steps have already been covered in the custom content types tutorial, I'll just list the files here and you can either copy them into your project or do without them:</p> <ul> <li>$TUTORIAL_HOME/behavior-tutorial-share/src/main/resources/META-INF/share-config-custom.xml. The configuration in this file adds the rateable aspect to the list of aspects users can manage. It also defines which properties should be displayed when showing the property list for a piece of content with the rateable aspect applied.</li> <li>$TUTORIAL_HOME/behavior-tutorial-share/src/main/resources/alfresco/web-extension/behavior-tutorial-share-context.xml. This is the Spring context file that tells Alfresco Share where to find the properties bundle.</li> <li>$TUTORIAL_HOME/behavior-tutorial-share/src/main/resources/alfresco/web-extension/messages/scRatingsModel.properties. This is the properties bundle for the module that Alfresco Share will use to localize the labels.</li> </ul> <p>Now the Alfresco Share user interface will know how to show values for the average rating and rating count when a piece of content with the rateable aspect is displayed.</p>"},{"location":"behaviors/tutorial/tutorial/#define-a-java-class-to-hold-constants","title":"Define a Java class to hold constants","text":"<p>It is often convenient to put model-related constants in a class. In this case, that class is called SomeCoRatingsModel and it looks like this:</p> <pre><code>public interface SomeCoRatingsModel {\n\n    // Namespaces\n    public static final String NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL  = \"http://www.someco.com/model/ratings/1.0\";\n\n    // Types\n    public static final String TYPE_SCR_RATING = \"rating\";\n\n    // Aspects\n    public static final String ASPECT_SCR_RATEABLE = \"rateable\";\n\n    // Properties\n    public static final String PROP_RATING = \"rating\";\n    public static final String PROP_RATER = \"rater\";\n    public static final String PROP_AVERAGE_RATING= \"averageRating\";\n    public static final String PROP_TOTAL_RATING= \"totalRating\";\n    public static final String PROP_RATING_COUNT= \"ratingCount\";\n\n    // Associations\n    public static final String ASSN_SCR_RATINGS = \"ratings\";\n}\n</code></pre> <p>These are just constants that will be used by the behavior class and other classes in other tutorials when they need to refer to the rating type, rateable aspect, or any of the properties by name.</p>"},{"location":"behaviors/tutorial/tutorial/#write-integration-tests","title":"Write integration tests","text":"<p>The old 3.0.1 version of the Alfresco Maven SDK will automatically run integration tests when <code>mvn install</code> runs. In SDK 4.0 and higher you must first start up the Docker containers, then run <code>./run.sh test</code>.</p> <p>If you're a TDD (Test-Driven Development) kind of person you could add a test for the to-be-developed behavior. For now, I'll just create a test to make sure I can successfully add the <code>scr:rateable</code> aspect to a piece of content. The rating type will get tested shortly.</p> <p>The test class goes in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-integration-tests/src/test/java/com/someco/test\n</code></pre> <p>Here is the SomecoRatingModelIT test class:</p> <pre><code>@RunWith(value = AlfrescoTestRunner.class)\npublic class SomecoRatingModelIT extends BaseIT {\n\n    @Test\n    public void testRateableAspect() {\n        final double AVG_RATING = 1.0;\n        final int RATING_COUNT = 1;\n        final int TOTAL = 1;\n\n        NodeService nodeService = getServiceRegistry().getNodeService();\n\n        Map&lt;QName, Serializable&gt; nodeProperties = new HashMap&lt;&gt;();\n        this.nodeRef = createNode(getFilename(), ContentModel.TYPE_CONTENT, nodeProperties);\n\n        QName aspectQName = createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.ASPECT_SCR_RATEABLE);\n\n        // set up some aspect-based properties\n        Map&lt;QName, Serializable&gt; aspectProps = new HashMap&lt;QName, Serializable&gt;();\n\n        aspectProps.put(PROP_AVG_RATING_QNAME, AVG_RATING);\n        aspectProps.put(PROP_TOTAL_QNAME, TOTAL);\n        aspectProps.put(PROP_COUNT_QNAME, RATING_COUNT);\n\n        nodeService.addAspect(nodeRef, aspectQName, aspectProps);\n\n        assertEquals(AVG_RATING, nodeService.getProperty(this.nodeRef, PROP_AVG_RATING_QNAME));\n        assertEquals(TOTAL, nodeService.getProperty(this.nodeRef, PROP_TOTAL_QNAME));\n        assertEquals(RATING_COUNT, nodeService.getProperty(this.nodeRef, PROP_COUNT_QNAME));\n\n        assertTrue(\"Missing aspect\",\n                getServiceRegistry().getNodeService().hasAspect(nodeRef, aspectQName));\n    }\n}\n</code></pre> <p>The test creates a new content node in Company Home and then adds the <code>scr:rateable</code> aspect to it, simultaneously setting the aspect-based properties to test values. It then makes sure it can get those same test values back.</p> <p>To run the test, first start the Docker containers by running <code>./run.sh build_start_it_supported</code>. Once everything comes up, run <code>./run.sh test</code>.</p> <p>Assuming everything went okay, you now have your model in place and tested and you are ready to write the behavior.</p>"},{"location":"behaviors/tutorial/tutorial/#step-2-implement-the-custom-behavior","title":"Step 2: Implement the custom behavior","text":"<p>Implementing the behavior involves writing some Java, configuring a Spring Bean, and adding an integration test for the behavior.</p>"},{"location":"behaviors/tutorial/tutorial/#write-the-behavior-class","title":"Write the behavior class","text":"<p>The custom behavior is implemented as a Java class called Rating. The class implements the interfaces that correspond to the policies the behavior needs to bind to. In this example, the two policy interfaces are: <code>NodeServicePolicies.OnDeleteNodePolicy</code> and <code>NodeServicePolicies.OnCreateNodePolicy</code> so the class declaration is:</p> <pre><code>public class Rating\nimplements NodeServicePolicies.OnDeleteNodePolicy,\nNodeServicePolicies.OnCreateNodePolicy {\n  // SNIP\n}\n</code></pre> <p>The class has two dependencies that Spring will handle for us. One is the <code>NodeService</code> which will be used in the average calculation logic and the other is the <code>PolicyComponent</code> which is used to bind the behavior to the policies.</p> <pre><code>// Dependencies\nprivate NodeService nodeService;\nprivate PolicyComponent policyComponent;\n\n// Behaviours\nprivate Behaviour onCreateNode;\nprivate Behaviour onDeleteNode;\n</code></pre> <p>At some point Alfresco has to know that the behavior needs to be bound to a policy. A method called <code>init()</code> will handle the binding. It will get called when Spring loads the bean.</p> <pre><code>public void init() {\n\n    // Create behaviours\n    this.onCreateNode = new JavaBehaviour(this, \"onCreateNode\", NotificationFrequency.EVERY_EVENT);\n\n    this.onDeleteNode = new JavaBehaviour(this, \"onDeleteNode\", NotificationFrequency.EVERY_EVENT);\n\n    // Bind behaviours to node policies\n    this.policyComponent.bindClassBehaviour(\n        Qname.createQName(NamespaceService.ALFRESCO_URI, \"onCreateNode\"),\n        Qname.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.TYPE_SC_RATING),\n        this.onCreateNode\n    );\n\n    this.policyComponent.bindClassBehaviour(\n        QName.createQName(NamespaceService.ALFRESCO_URI, \"onDeleteNode\"),\n        Qname.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.TYPE_SC_RATING),\n        this.onDeleteNode\n    );\n\n}\n</code></pre> <p>The first thing to notice here is that you can decide when the behavior should be invoked by specifying the appropriate <code>NotificationFrequency</code>. Besides <code>EVERY_EVENT</code>, other choices include <code>FIRST_EVENT</code> and <code>TRANSACTION_COMMIT</code>. I chose <code>EVERY_EVENT</code> here because there are times when I might want the behavior to trigger before the transaction is actually committed. It doesn't matter to me that the average will be re-computed potentially multiple times because I don't anticipate there to be a lot of ratings. You'll need to think about your case and choose what works for your requirements.</p> <p>Also note that there are a few different overloaded methods for <code>bindClassBehaviour</code>. In this case the code binds the Qname of a behavior to the Qname of our type (\u201cRating\u201d) and tells Alfresco to call the <code>onCreateNode</code> and <code>onDeleteNode</code> behaviors that will be defined in this class.</p> <p>There are also additional bind methods for associations (<code>bindAssociationBehaviour</code>) and properties (<code>bindPropertyBehaviour</code>) that you should use depending on the type of policy you are binding to.</p> <p>Next are the methods required by the two policy interfaces. Regardless of whether a ratings node is created or deleted, the average needs to be recalculated. So the <code>onCreateNode</code> and <code>onDeleteNode</code> methods call <code>computeAverage</code> and pass in the rating node reference.</p> <pre><code>public void onCreateNode(ChildAssociationRef childAssocRef) {\n\n    computeAverage(childAssocRef);\n\n}\n\npublic void onDeleteNode(ChildAssociationRef childAssocRef, boolean isNodeArchived) {\n\n    computeAverage(childAssocRef);\n\n}\n</code></pre> <p>The <code>computeAverage</code> method asks the child (the rating object) for its parent node reference (the rateable object) and asks the parent for a list of its children. It iterates over the children, computes an average, and sets the average property on the content.</p> <pre><code>public void computeAverage(ChildAssociationRef childAssocRef) {\n\n    // get the parent node\n    NodeRef parentRef = childAssocRef.getParentRef();\n\n    // check the parent to make sure it has the right aspect\n    if (nodeService.exists(parentRef) &amp;&amp; nodeService.hasAspect(parentRef, Qname.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.ASPECT_SC_RATEABLE))) {\n\n        // continue, this is what we want\n\n    } else {\n\n        return;\n\n    }\n\n    // get the parent node's children\n    List&lt;ChildAssociationRef&gt; children = nodeService.getChildAssocs(parentRef);\n\n    // iterate through the children to compute the total\n    Double average = 0d;\n    int total = 0;\n    for (ChildAssociationRef child : children) {\n        int rating = (Integer)nodeService.getProperty(\n        child.getChildRef(),\n        Qname.createQName(SomeCoModel.NAMESPACE_SOMECO_CONTENT_MODEL, SomeCoModel.PROP_RATING));\n        total += rating;\n    }\n\n    // compute the average\n    average = total / (children.size() / 1.0d);\n\n    // store the average, total, count on the parent node\n    nodeService.setProperty(\n        parentRef,\n        QName.createQName(\n            SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL,\n            SomeCoRatingsModel.PROP_AVERAGE_RATING),\n        average);\n\n    nodeService.setProperty(\n        parentRef,\n        QName.createQName(\n            SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL,\n            SomeCoRatingsModel.PROP_TOTAL_RATING),\n        total);\n\n    nodeService.setProperty(\n        parentRef,\n        QName.createQName(\n            SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL,\n            SomeCoRatingsModel.PROP_RATING_COUNT),\n        count);     \n\n    return;\n\n}\n</code></pre> <p>The class stores the total rating and rating count, so it could actually compute the average without iterating over the rating objects. All it really needs to know is the value of the new rating. For this example we'll only have a handful of associations anyway but in the real world, you need to think carefully about such performance considerations when you write your behaviors.</p>"},{"location":"behaviors/tutorial/tutorial/#configure-a-spring-bean","title":"Configure a Spring bean","text":"<p>The last step before testing is to configure the behavior class as a Spring bean. The bean config goes in service-context.xml, which, as a reminder, lives in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module/behavior-tutorial-platform/context\n</code></pre> <p>You can delete any demo or sample beans that may already be in this file.</p> <p>Add the following before the closing <code>beans</code> element:</p> <pre><code>&lt;bean id=\"ratingBehavior\" class=\"com.someco.behavior.Rating\"\ninit-method=\"init\"&gt;\n    &lt;property name=\"nodeService\"&gt;\n        &lt;ref bean=\"NodeService\" /&gt;\n    &lt;/property&gt;\n    &lt;property name=\"policyComponent\"&gt;\n        &lt;ref bean=\"policyComponent\" /&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>This bean declares the <code>init</code> method and injects the dependencies the behavior needs.</p>"},{"location":"behaviors/tutorial/tutorial/#step-3-create-an-integration-test-for-the-behavior","title":"Step 3: Create an integration test for the behavior","text":"<p>The behavior should be able to calculate the average rating when rating objects are created or deleted from any piece of content that has the <code>scr:rateable</code> aspect. It's easy to test that with an integration test.</p> <p>I'll add a class called RatingBehaviorIT to the same test package that <code>SomecoRatingModelIT</code> is in. The test will:</p> <ol> <li>Create a piece of content and add the <code>scr:rateable</code> aspect to it.</li> <li>Add three test ratings, checking the values for the average rating, total rating and rating count.</li> <li>Delete one of the test ratings, checking the values again to make sure the delete was handled appropriately.</li> </ol> <p>Here's the code:</p> <pre><code>@RunWith(value = AlfrescoTestRunner.class)\npublic class RatingBehaviorIT extends BaseIT {\n\n    static Logger log = Logger.getLogger(RatingBehaviorIT.class);\n\n    @Test\n    public void ratingTypeTest() {\n        final String RATER = \"jpotts\";\n\n        NodeService nodeService = getServiceRegistry().getNodeService();\n\n        Map&lt;QName, Serializable&gt; nodeProperties = new HashMap&lt;&gt;();\n        this.nodeRef = createNode(getFilename(), ContentModel.TYPE_CONTENT, nodeProperties);\n\n        QName aspectQName = createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.ASPECT_SCR_RATEABLE);\n        nodeService.addAspect(nodeRef, aspectQName, null);\n\n        createRating(this.nodeRef, 1, RATER);\n\n        assertEquals(1.0, nodeService.getProperty(this.nodeRef, PROP_AVG_RATING_QNAME));\n        assertEquals(1, nodeService.getProperty(this.nodeRef, PROP_TOTAL_QNAME));\n        assertEquals(1, nodeService.getProperty(this.nodeRef, PROP_COUNT_QNAME));\n\n        NodeRef rating2 = createRating(this.nodeRef, 2, RATER);\n\n        assertEquals(1.5, nodeService.getProperty(this.nodeRef, PROP_AVG_RATING_QNAME));\n        assertEquals(3, nodeService.getProperty(this.nodeRef, PROP_TOTAL_QNAME));\n        assertEquals(2, nodeService.getProperty(this.nodeRef, PROP_COUNT_QNAME));\n\n        createRating(this.nodeRef, 3, RATER);\n\n        assertEquals(2.0, nodeService.getProperty(this.nodeRef, PROP_AVG_RATING_QNAME));\n        assertEquals(6, nodeService.getProperty(this.nodeRef, PROP_TOTAL_QNAME));\n        assertEquals(3, nodeService.getProperty(this.nodeRef, PROP_COUNT_QNAME));\n\n        nodeService.deleteNode(rating2);\n\n        assertEquals(nodeService.getProperty(this.nodeRef, PROP_AVG_RATING_QNAME), 2.0);\n        assertEquals(nodeService.getProperty(this.nodeRef, PROP_TOTAL_QNAME), 4);\n        assertEquals(nodeService.getProperty(this.nodeRef, PROP_COUNT_QNAME), 2);\n    }\n\n    public NodeRef createRating(NodeRef nodeRef, int rating, String rater) {\n        NodeService nodeService = getServiceRegistry().getNodeService();\n\n        // assign name\n        String name = \"Rating (\" + System.currentTimeMillis() + \")\";\n        Map&lt;QName, Serializable&gt; contentProps = new HashMap&lt;QName, Serializable&gt;();\n        contentProps.put(ContentModel.PROP_NAME, name);\n        contentProps.put(PROP_RATING_QNAME, rating);\n        contentProps.put(PROP_RATER_QNAME, rater);\n\n        // create rating as a child of the content node using the scr:ratings child association\n        ChildAssociationRef association = nodeService.createNode(\n                        nodeRef,\n                        QName.createQName(\n                                SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL,\n                                SomeCoRatingsModel.ASSN_SCR_RATINGS),\n                        QName.createQName(NamespaceService.CONTENT_MODEL_PREFIX, name),\n                        QName.createQName(\n                                SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL,\n                                SomeCoRatingsModel.TYPE_SCR_RATING),\n                        contentProps\n                        );\n\n        return association.getChildRef();\n    }\n}\n</code></pre> <p>To run the test, first, check to see if your containers are running by doing a <code>docker ps</code>. If any are running, do <code>./run.sh stop</code>. Next, run <code>mvn install -DskipTests</code> to re-build everything. Now start fresh containers by doing <code>./run.sh build_start_it_supported</code>.</p> <p>Once everything is up-and-running, run <code>./run.sh test</code>. If you see something like this:</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 4.554 s\n[INFO] Finished at: 2019-02-11T16:19:16-06:00\n[INFO] Final Memory: 32M/489M\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>...it means your behavior is working.</p> <p>If something is broken, try changing log4j.properties in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module\n</code></pre> <p>To:</p> <pre><code>log4j.logger.com.someco=DEBUG\n</code></pre> <p>And then re-build the AMPs by running <code>mvn install -DskipTests</code>. Once the build is complete, stop and start the Alfresco container by doing <code>./run.sh reload_acs</code>. You can then look for the debug messages in the log.</p>"},{"location":"behaviors/tutorial/tutorial/#re-implementing-the-behavior-in-javascript","title":"Re-implementing the behavior in JavaScript","text":"<p>You've seen how to implement the average rating calculation behavior in Java, but what if you wanted to implement the behavior using JavaScript instead? Behaviors can be implemented in server-side JavaScript and bound to policies through Spring. Let's re-implement the Rating bean using JavaScript.</p> <p>The high-level steps are:</p> <ol> <li>Write the custom behavior as one or more server-side JavaScript files.</li> <li>Configure a Spring bean to bind the JavaScript to the appropriate policies.</li> <li>Test the behavior.</li> </ol>"},{"location":"behaviors/tutorial/tutorial/#step-1-write-the-custom-behavior-as-server-side-javascript","title":"Step 1: Write the custom behavior as server-side JavaScript","text":"<p>For this example I'm going to shamelessly steal a JavaScript file that is part of the Alfresco source and then tweak it. The original script is used by Alfresco to test <code>Policy</code> functionality. (As a side note, the test code that is buried in the Alfresco source tree is a great resource for example code).</p> <p>I am going to write three scripts for this:</p> <ol> <li>onCreateRating.js will be bound to the <code>onCreateNode</code> policy.</li> <li>onDeleteRating.js will be bound to the <code>onDeleteNode</code> policy.</li> <li>rating.js will contain the average rating calculation logic and will be imported by the other two scripts using the <code>import</code> tag.</li> </ol> <p>In this example, the scripts are going to reside as part of the web application rather than being uploaded to the repository. I'll place them in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module/behavior-tutorial-platform/scripts\n</code></pre> <p>If you are following along, you'll need to create the scripts directory.</p> <p>The onCreateRating.js and onDeleteRating.js files are virtually identical. They just need to do some basic error checking and then call the <code>computeAverage()</code> function. Here is what onCreateRating.js looks like:</p> <pre><code>&lt;import resource=\"classpath:alfresco/module/behavior-tutorial-platform/scripts/rating.js\"&gt;\n\n// Check behaviour is set and the name of the behaviour\nif (!behaviour || (behaviour.name == null || behaviour.name != \"onCreateNode\")) {\n    logger.log(\"The behaviour behaviour object or name has not been set correctly.\");\n} else {\n    logger.log(\"Behaviour name: \" + behaviour.name);\n\n    // Check the arguments\n    if (behaviour.args == null) {\n        logger.log(\"The args have not been set.\");\n    } else {\n        if (behaviour.args.length == 1) {\n            var childAssoc = behaviour.args[0];\n            logger.log(\"Calling compute average\");\n            computeAverage(childAssoc);\n        } else {\n            logger.log(\"The number of arguments is incorrect.\");\n        }\n    }\n}\n</code></pre> <p>The code for onDeleteRating.js is identical with the exception of the behavior name and the number of arguments expected (2 instead of 1) so I won't duplicate the listing here.</p> <p>The <code>computeAverage()</code> function lives in rating.js. It does pretty much the same thing as the <code>computeAverage()</code> method in the Java example, but obviously in JavaScript:</p> <pre><code>//calculate rating\nfunction computeAverage(childAssocRef) {\n\n    var parentRef = childAssocRef.parent;\n\n    // check the parent to make sure it has the right aspect\n    if (!parentRef.hasAspect(\"{http://www.someco.com/model/ratings/1.0}rateable\")) {\n        logger.log(\"Rating's parent ref did not have rateable aspect.\");\n        return;\n    }\n\n    // get the parent node's children\n    var children = parentRef.children;\n\n    // iterate through the children to compute the total\n    var average = 0.0;\n    var total = 0;\n\n    if (children != null &amp;&amp; children.length &gt; 0) {\n        for (i in children) {\n            var child = children[i];\n            var rating = child.properties[\"{http://www.someco.com/model/content/1.0}rating\"];\n            total += rating;\n        }\n\n        // compute the average\n        average = total / children.length;\n    }\n\n    logger.log(\"Computed average:\" + average);\n\n    // store the average, total, count on the parent node\n    parentRef.properties[\"{http://www.someco.com/model/ratings/1.0}averageRating\"] = average;\n    parentRef.properties[\"{http://www.someco.com/model/ratings/1.0}totalRating\"] = total;\n    parentRef.properties[\"{http://www.someco.com/model/ratings/1.0}ratingCount\"] = children.length;\n    parentRef.save();\n\n    logger.log(\"Property set\");\n}\n</code></pre> <p>As you can see, this is the same logic used in the Java example modified to follow the Alfresco JavaScript API syntax.</p>"},{"location":"behaviors/tutorial/tutorial/#step-2-configure-a-spring-bean-to-bind-the-script-to-the-appropriate-policies","title":"Step 2: Configure a Spring bean to bind the script to the appropriate policies","text":"<p>The Java example used an <code>init()</code> method on the <code>Rating</code> bean to make calls to the <code>bindClassBehaviour()</code> method of <code>PolicyComponent</code>. The JavaScript example doesn't do that. Instead, it uses Spring to associate the JavaScript files with the <code>onCreateNode</code> and <code>onDeleteNode</code> policies.</p> <p>As you've seen, the Spring context, service-context.xml file resides in:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/module/behavior-tutorial-platform/context\n</code></pre> <p>Edit the file. Comment out the <code>ratingBehavior</code> bean element used for the Java example and add two new bean configs below it for the JavaScript behavior code\u2014one for the create and one for the delete:</p> <pre><code>&lt;bean id=\"onCreateRatingNode\"\nclass=\"org.alfresco.repo.policy.registration.ClassPolicyRegistration\"\nparent=\"policyRegistration\"&gt;\n    &lt;property name=\"policyName\"&gt;\n        &lt;value&gt;{http://www.alfresco.org}onCreateNode&lt;/value&gt;\n    &lt;/property&gt;\n    &lt;property name=\"className\"&gt;\n        &lt;value&gt;{http://www.someco.com/model/ratings/1.0}rating&lt;/value&gt;\n    &lt;/property&gt;\n    &lt;property name=\"behaviour\"&gt;\n        &lt;bean class=\"org.alfresco.repo.jscript.ScriptBehaviour\" parent=\"scriptBehaviour\"&gt;\n            &lt;property name=\"location\"&gt;\n                &lt;bean class=\"org.alfresco.repo.jscript.ClasspathScriptLocation\"&gt;\n                    &lt;constructor-arg&gt;\n                        &lt;value&gt;alfresco/module/${project.artifactId}/scripts/onCreateRating.js&lt;/value&gt;\n                    &lt;/constructor-arg&gt;\n                &lt;/bean&gt;\n            &lt;/property&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n&lt;bean id=\"onDeleteRatingNode\"\nclass=\"org.alfresco.repo.policy.registration.ClassPolicyRegistration\"\nparent=\"policyRegistration\"&gt;\n    &lt;property name=\"policyName\"&gt;\n        &lt;value&gt;{http://www.alfresco.org}onDeleteNode&lt;/value&gt;\n    &lt;/property&gt;\n    &lt;property name=\"className\"&gt;\n        &lt;value&gt;{http://www.someco.com/model/ratings/1.0}rating&lt;/value&gt;\n    &lt;/property&gt;\n    &lt;property name=\"behaviour\"&gt;\n        &lt;bean class=\"org.alfresco.repo.jscript.ScriptBehaviour\" parent=\"scriptBehaviour\"&gt;\n            &lt;property name=\"location\"&gt;\n                &lt;bean class=\"org.alfresco.repo.jscript.ClasspathScriptLocation\"&gt;\n                    &lt;constructor-arg&gt;\n                        &lt;value&gt;alfresco/module/${project.artifactId}/scripts/onDeleteRating.js&lt;/value&gt;\n                    &lt;/constructor-arg&gt;\n                &lt;/bean&gt;\n            &lt;/property&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Now Alfresco will use the two server-side JavaScript files as the behavior implementation instead of the Java-based behavior created earlier.</p>"},{"location":"behaviors/tutorial/tutorial/#step-3-test-the-javascript-based-behavior","title":"Step 3: Test the JavaScript-based behavior","text":"<p>If you are following along and you already did the Java-based behavior, this step is easy. The integration test doesn't have to change at all because all that is different is that the underlying behavior logic is written in JavaScript instead of Java.</p> <p>So, switch to the $TUTORIAL_HOME directory and run <code>mvn install -DskipTests</code> to rebuild the AMPs, then <code>./run.sh reload_acs</code> to re-build and re-start the Alfresco image. Once it is back up, run <code>./run.sh test</code>. Just like the Java example, you should see something like this:</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3.887 s\n[INFO] Finished at: 2019-02-11T17:26:19-06:00\n[INFO] Final Memory: 32M/488M\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Successful tests are certainly comforting, but they are not very satisfying. Wouldn't you like to actually see this behavior working in the user interface? In the web scripts tutorial I'll show you how to create a little web page that lets you click on stars and post ratings for whitepapers. For now, if you'd like to run a simple web script that creates test rating objects on specified content, follow these steps:</p> <ol> <li> <p>If you are using the source code checked out from GitHub instead of creating your own project you can move on to step 2. Otherwise, if you are following along in your own project directories, copy the following directory and its descendants from the source code that accompanies this tutorial into your behavior-tutorial-platform module. Copy:</p> <pre><code>$TUTORIAL_SOURCE/behavior-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts\n</code></pre> <p>to:</p> <pre><code>$TUTORIAL_HOME/behavior-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts\n</code></pre> <p>The directory contains the files that make up a quick-and-dirty web script that will create random ratings on a specified piece of content.</p> </li> <li> <p>Switch to $TUTORIAL_HOME and run <code>mvn install -DskipTests</code> to re-build the AMPs.</p> </li> <li> <p>Run <code>./run.sh reload_acs</code> to stop and start the Alfresco container.</p> </li> <li> <p>Once the server comes up, log in to http://localhost:8180/share as admin, password admin.</p> </li> <li> <p>Create a piece of test content somewhere in the repository. It doesn't matter what it is or what it is named.</p> </li> <li> <p>Grab the test content's nodeRef. The easiest way to do this is to copy it from the URL that is displayed when you view the content's details page. For example, when you look at the details for your test content, the URL should look something like this:</p> <pre><code>http://localhost:8080/share/page/document-details?nodeRef=workspace://SpacesStore/00408a65-1e9e-42ad-b02c-aa3546624d07\n</code></pre> <p>Copy everything after \"nodeRef=\".</p> </li> <li> <p>Now invoke the test web script, passing in the nodeRef you just copied, like this:</p> <pre><code>http://localhost:8080/alfresco/s/someco/rating-test?nodeRef=workspace://SpacesStore/00408a65-1e9e-42ad-b02c-aa3546624d07\n</code></pre> <p>Every time you invoke the web script, the script generates a random rating value and creates a new rating object for your piece of test content.</p> </li> <li> <p>Go back into Share and look at the test document's details. You should see its average rating and the total number of ratings displayed in the property list, like this:</p> </li> </ol> <p></p> <p>This shouldn't be too surprising--you are using a web script to exercise the same behavior as the integration test, but at least this way you can log in to Share and see for yourself that the behavior works.</p>"},{"location":"behaviors/tutorial/tutorial/#deploying-the-amps-to-your-alfresco-server","title":"Deploying the AMPs to your Alfresco server","text":"<p>When you are ready, you can deploy these AMPs to any Alfresco server. Both the platform module and the share module directories should have a directory called target. Maven puts the AMP there when you run <code>mvn install</code>. You can install those AMPs as you normally would. For example, if you installed Alfresco in your own manually set up Tomcat server, you would:</p> <ol> <li>Copy the repo tier AMP to $ALFRESCO_HOME/amps</li> <li>Copy the share tier AMP to $ALFRESCO_HOME/amps_share</li> <li>Install the AMPs by running $ALFRESCO_HOME/bin/apply_amps.sh</li> </ol> <p>If you deployed Alfresco using Docker Compose or Kubernetes you'll need to build new images that copy the AMPs to the containers and then invoke the Alfresco MMT to install them into the Alfresco and Share WARs.</p>"},{"location":"behaviors/tutorial/tutorial/#conclusion","title":"Conclusion","text":"<p>This tutorial has shown how to bind custom behavior to Alfresco policies. Specifically, the tutorial showed how to implement a custom \"rateable\" aspect and a custom \"rating\" type that can be used to persist user ratings of content stored in the repository. The custom behavior is responsible for calculating the average rating for a piece of content any time a rating is created or deleted. The tutorial showed how to implement the average rating calculation behavior in Java as well as JavaScript.</p>"},{"location":"behaviors/tutorial/tutorial/#where-to-find-more-information","title":"Where to Find More Information","text":"<ul> <li>The complete source code for these examples is available on GitHub.</li> <li>Official documentation for both Enterprise Edition and Community Edition is available at docs.alfresco.com.</li> <li>Get help from the community.</li> <li>If you are ready to cover new ground, try another ecmarchitect.com tutorial in the Alfresco Developer Series. The most logical next step is the Intro to the Web Script Framework tutorial.</li> </ul>"},{"location":"content/content-tutorial/content-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"content/content-tutorial/content-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"content/content-tutorial/content-tutorial-share/readme/","title":"Alfresco Custom Content Types Tutorial","text":""},{"location":"content/content-tutorial/content-tutorial-share/readme/#alfresco-share-configuration","title":"Alfresco Share Configuration","text":"<p>These sample Alfresco Share extension config files accompany a tutorial called [Working with Custom Content Types in Alfresco] (http://ecmarchitect.com/alfresco-developer-series-tutorials/content/tutorial/tutorial.html).</p>"},{"location":"content/content-tutorial/content-tutorial-share/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK or any of its dependencies.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"content/content-tutorial/content-tutorial-share/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps_share</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war</code></p> <p>Which will start Alfresco Share on an embedded Tomcat server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p> <p>It is likely that you'll want Alfresco Share to connect to your test Alfresco repository running the custom content types you defined. If you run them both simultaneously Share will find the repository as long as it is running on localhost and port 8080.</p>"},{"location":"content/content-tutorial/content-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."},{"location":"content/tutorial/tutorial/","title":"Working With Custom Content Types in Alfresco","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"content/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"content/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>Alfresco is a flexible platform for developing content management applications. The first step in the process of designing a custom content management application is creating the content model.</p> <p>The content model Alfresco provides out-of-the-box is fairly comprehensive. In fact, for basic document management needs, you could probably get by with the out-of-the-box model. Of course, you'd be missing out on a lot of the power and functionality that having a model customized for your business needs provides.</p> <p>Part 1 of this document discusses how to create your own custom content model, but you won\u2019t want to stop there. What good would a custom content model be if you did nothing exciting with the content? After an example content model is in place, Part 2 shows how to configure Alfresco Share to expose the custom model in the user interface, then Part 3 shows how to use OpenCMIS, a standard Java API, to create, search for, and delete content. You can safely swap the order of Parts 2 and 3 according to your interest.</p> <p>You should already be familiar with general document management and Alfresco functionality from an end-user perspective. If you want to follow along with Part 3, you should also know how to write basic Java code. See \u201cWhere to find more information\u201d at the end of this document for a link to the code samples that accompany this article.</p>"},{"location":"content/tutorial/tutorial/#part-1-implementing-a-custom-content-model","title":"Part 1: Implementing a Custom Content Model","text":"<p>Out-of-the-box, Alfresco gives you folders and content and a few other content types. But you\u2019ll probably want to create your own business-specific types. This section discusses how that works.</p>"},{"location":"content/tutorial/tutorial/#modeling-basics","title":"Modeling Basics","text":"<p>A content model describes the data being stored in the repository. The content model is critical--without it, Alfresco would be little more than a file system. Here is a list of key information the content model provides Alfresco:</p> <ul> <li> <p>Fundamental data types and how those data types should be persisted to the database. For example, without a content model, Alfresco wouldn't know the difference between a <code>String</code> and a <code>Date</code>.</p> </li> <li> <p>Higher order data types like \u201ccontent\u201d and \u201cfolder\u201d as well as custom content types like \u201cStandard Operating Procedure\u201d or \u201cContract\u201d.</p> </li> <li> <p>Out-of-the-box aspects like \u201cauditable\u201d and \u201cclassifiable\u201d as well as custom aspects like \u201crateable\u201d or \u201ccommentable\u201d.</p> </li> <li> <p>Properties (or metadata) specific to each content type.</p> </li> <li> <p>Constraints placed on properties (such as property values that must match a certain pattern or property values that must come from a specific list of possible values).</p> </li> <li> <p>How to index content for searching.</p> </li> <li> <p>Relationships between content types.</p> </li> </ul> <p>Alfresco content models are built using a small set of building blocks: Types, Properties, Property types, Constraints, Associations, and Aspects.</p>"},{"location":"content/tutorial/tutorial/#types","title":"Types","text":"<p>Types are like types or classes in the object-oriented world. They can be used to model business objects, they have properties, and they can inherit from a parent type. \u201cContent\u201d, \u201cPerson\u201d, and \u201cFolder\u201d are three important types defined out-of-the-box. Custom types are limited only by your imagination and business requirements. Examples include things like \u201cExpense Report\u201d, \u201cMedical Record\u201d, \u201cMovie\u201d, \u201cSong\u201d, and \u201cComment\u201d.</p> <p>Note that types, properties, constraints, associations, and aspects have names. Names are made unique across the repository by using a namespace specific to the model. The namespace has an abbreviation. Rather than use \u201cExample\u201d or \u201cFoo\u201d, this tutorial assumes Alfresco is being implemented for a fictitious company called SomeCo. So, for example, SomeCo might define a custom model which declares a namespace with the URI of \u201chttp://www.someco.com/model/content/1.0\u201d and a prefix of \u201csc\u201d. Any type defined as part of that model would have a name prefixed with \u201csc:\u201d. You'll see how models are actually defined using XML shortly, but I wanted to introduce the concept of namespaces and prefixes so you would know what they are when you see them. Using namespaces in this way helps prevent name collisions when content models are shared across repositories. In your project it is definitely important that you use your own namespace.</p>"},{"location":"content/tutorial/tutorial/#properties","title":"Properties","text":"<p>Properties are pieces of metadata associated with a particular type. For example, the properties of an Expense Report might include things like \u201cEmployee Name\u201d, \u201cDate submitted\u201d, \u201cProject\u201d, \u201cClient\u201d, \u201cExpense Report Number\u201d, \u201cTotal amount\u201d, and \u201cCurrency\u201d. The Expense Report might also include a \u201ccontent\u201d property to hold the actual expense report file (maybe it is a PDF or an Excel spreadsheet, for example).</p>"},{"location":"content/tutorial/tutorial/#property-types","title":"Property Types","text":"<p>Property types (or data types) describe the fundamental types of data the repository will use to store properties. Examples include things like strings, dates, floats, and booleans. Because these data types literally are fundamental, they are pretty much the same for everyone so they are defined for us out-of-the-box. (If you wanted to change the fact that the Alfresco data-type \u201ctext\u201d maps to your own custom class rather than <code>java.lang.String</code>, you could, but let's not get ahead of ourselves).</p>"},{"location":"content/tutorial/tutorial/#constraints","title":"Constraints","text":"<p>Constraints can optionally be used to restrict the value that Alfresco will store in a property. There are four types of constraints available: <code>REGEX</code>, <code>LIST</code>, <code>MINMAX</code>, and <code>LENGTH</code>. <code>REGEX</code> is used to make sure that a property value matches a regular expression pattern. <code>LIST</code> is used to define a list of possible values for a property. <code>MINMAX</code> provides a numeric range for a property value. <code>LENGTH</code> sets a restriction on the length of a string.</p> <p>Constraints can be defined once and reused across a model. For example, out-of-the-box, Alfresco makes available a constraint named <code>cm:filename</code> that defines a regular expression constraint for file names. If a property in a custom type needs to restrict values to those matching the filename pattern, the custom model doesn't have to define the constraint again, it simply refers to the <code>cm:filename</code> constraint.</p>"},{"location":"content/tutorial/tutorial/#associations","title":"Associations","text":"<p>Associations define relationships between types. Without associations, models would be full of types with properties that store \u201cpointers\u201d to other pieces of content. Going back to the expense report example, each expense report might be stored as an individual object. In addition to an Expense Report type there could also be an Expense type. Associations tell Alfresco about the relationship between an Expense Report and one or more Expenses.</p> <p>Associations come in two flavors: Peer Associations and Child Associations. (Note that Alfresco refers to Peer Associations simply as \u201cAssociations\u201d but I think that's confusing so I'll refer to them with the \u201cPeer\u201d distinction). Peer Associations are just that\u2014-they define a relationship between two objects but neither is subordinate to the other. Child Associations, on the other hand, are used when the target of the association (or child) should not exist when the source (or parent) goes away. This works like a cascaded delete in a relational database: Delete the parent and the child goes away.</p> <p>An out-of-the-box association that's easy to relate to is <code>cm:contains</code>. The <code>cm:contains</code> association defines a Child Association between folders (<code>cm:folder</code>) and all other objects (instances of <code>sys:base</code> or its child types). So, for example, a folder named \u201cHuman Resources\u201d (an instance of <code>cm:folder</code>) would have a <code>cm:contains</code> association between itself and all of its immediate children. The children could be instances of custom types like Resume, Policy, or Performance Review.</p> <p>Another example might be a \u201cWhitepaper\u201d and its \u201cRelated Documents\u201d. Suppose that a company publishes whitepapers on their web site. The whitepaper might be related to other documents such as product marketing materials or other research. If the relationship between the whitepaper and its related documents is formalized it can be shown in the user interface. To implement this, as part of the Whitepaper content type, you'd define a Peer Association. You could use <code>sys:base</code> as the target type to allow any piece of content in the repository to be associated with a Whitepaper or you could restrict the association to a specific type like <code>cm:content</code> or <code>sc:whitepaper</code>.</p>"},{"location":"content/tutorial/tutorial/#aspects","title":"Aspects","text":"<p>Before discussing Aspects, let's first consider how inheritance works and the implications on the content model. Suppose Alfresco will be used to manage content to be displayed in a portal (quite a common requirement, by the way). Suppose further that only a subset of the content in the repository is content that should be shown in the portal. And, when content is to be displayed in the portal, there are some additional pieces of metadata that need to be captured. A simple example might be a requirement to show the date and time a piece of content was approved.</p> <p>Using the content modeling concepts discussed so far, there are only two options. The first option is to define a root content type with the \u201cpublish date\u201d property. All subsequent content types would inherit from this root type thus making the publish date available everywhere. The second option is to individually define the publish date property only in the content types that are going to be published to the portal.</p> <p>Neither of these are great options. In the first option, there would be a property in each-and-every piece of content in the repository that may or may not ultimately be used which can lead to performance and maintenance problems. The second option isn't much better for a few reasons. First, it assumes the content types to be published in the portal are known ahead of time. Second, it opens up the possibility that the same type of metadata might get defined differently across content types. Last, it doesn't provide an easy way to encapsulate behavior or business logic that might be tied to the publish date.</p> <p>As you have probably figured out by now, there is a third option that addresses these issues: Aspects. Aspects \u201ccross-cut\u201d the content model with properties and associations by attaching them to content types (or even specific instances of content) when and where they are needed.</p> <p>Going back to the portal example, a \u201cPortal Displayable\u201d aspect could be defined with a publish date property. The aspect would then be added to any piece of content, regardless of type, that needed to be displayed in the portal.</p>"},{"location":"content/tutorial/tutorial/#custom-behavior","title":"Custom Behavior","text":"<p>You may find that your custom aspect or custom type needs to have behavior or business logic associated with it. For example, every time an Expense Report is checked in you want to recalculate the total by iterating through the associated Expenses. One option would be to incorporate this logic into rules or actions in the Alfresco web client or your custom web application. But some behavior is so fundamental to the aspect or type that it should really be \u201cbound\u201d to the aspect or type and invoked any time Alfresco works with those objects. If you are curious how this works, read the Custom Behaviors tutorial on ecmarchitect.com. For now, just know that associating business logic with your custom aspects and types (or overriding out-of-the-box behavior) is possible.</p>"},{"location":"content/tutorial/tutorial/#content-modeling-best-practices","title":"Content Modeling Best Practices","text":"<p>Now that you know the building blocks of a content model, it makes sense to consider some best practices. Here are the top ten:</p> <ol> <li> <p>Don't change Alfresco's out-of-the-box content model. If you can possibly avoid it, do not change Alfresco's out-of-the-box content model. Instead, extend it with your own custom content model. If requirements call for several different types of content to be stored in the repository, create a content type for each one that extends from <code>cm:content</code> or from an enterprise-wide root content type.</p> </li> <li> <p>Consider implementing an enterprise-wide root type. Although the need for a common ancestor type is lessened through the use of aspects, it still might be a good idea to define an enterprise-wide root content type from which all other content types in the repository inherit if for no other reason than it gives content managers a \u201ccatch-all\u201d type to use when no other type will do.</p> </li> <li> <p>Be conservative early on by adding only what you know you need. A corollary to that is prepare yourself to blow away the repository multiple times until the content model stabilizes. Once you get content in the repository that implements the types in your model, making model additions is easy, but subtractions aren't. Alfresco will complain about \u201cintegrity errors\u201d and may make content inaccessible when the content's type or properties don't match the content model definition. When this happens to you (and it will happen) your options are to either (1) leave the old model in place, (2) attempt to export the content, modify the ACP XML file, and re-import, or (3) drop the Alfresco tables, clear the data directory, and start fresh. As long as everyone on the team is aware of this, option three is not a big deal in development, but make sure expectations are set appropriately and have a plan for handling model changes once you get to production. This might be an area where Alfresco will improve in future releases, but for now it is something you have to watch out for.</p> </li> <li> <p>Avoid unnecessary content model depth. I am not aware of any Alfresco Content Modeling Commandments that say, \u201cThou shall not exceed X levels of depth in thine content model lest thou suffer the wrath of poor performance\u201d but it seems logical that degradation would occur at some point. If your model has several levels of depth beyond <code>cm:content</code>, you should at least do a proof-of-concept with a realistic amount of data, software, and hardware to make sure you aren't creating a problem for yourself that might be very difficult to reverse down the road.</p> </li> <li> <p>Take advantage of aspects. In addition to the potential performance and overhead savings through the use of aspects, aspects promote reuse across the model, the business logic, and the presentation layer. When working on your model you find that two or more content types have properties in common, ask yourself if those properties are being used to describe some higher-level characteristic common across the types that might better be modeled as an aspect.</p> </li> <li> <p>It may make sense to define types that have no properties or associations. You may find yourself defining a type that gets everything it needs through either inheritance from a parent type or from an aspect (or both). In those cases you might ask yourself if the \u201cempty\u201d type is really necessary. In my opinion, it should at least be considered. It might be worth it just to distinguish the content from other types of content for search purposes, for example. Or, while you might not have any specialized properties or associations for the content type you could have specialized behavior that's only applicable to instances of the content type.</p> </li> <li> <p>Remember that folders are types too. Like everything else in the model, folders are types which means they can be extended. Content that \u201ccontains\u201d other content is common. In the earlier expense report example, one way to keep track of the expenses associated with an expense report would be to model the expense report as a sub-type of <code>cm:folder</code>.</p> </li> <li> <p>Don't be afraid to have more than one content model XML file. You\u2019ll see how content models are defined shortly, but when it is time to implement your model, keep this in mind: It might make sense to segment your models into multiple namespaces and multiple XML files. Names should be descriptive. Don't deploy a model file called \u201ccustomModel.xml\u201d or \u201cmyModel.xml\u201d.</p> </li> <li> <p>Implement a Java class that corresponds to each custom content model you define. Within each content model Java class, define constants that correspond to model namespaces, type names, property names, aspect names, etc. You'll find yourself referring to the \u201cQname\u201d of types, properties, and aspects quite often so it helps to have constants defined in an intuitive way.</p> </li> <li> <p>Use the source! The out-of-the-box content model is a great example of what's possible. The forumModel and recordsModel have some particularly useful examples. In the next section I'll tell you where the model files live and what's in each so you'll know where to look later when you say to yourself, \u201cSurely, the folks at Alfresco have done this before\u201d.</p> </li> </ol>"},{"location":"content/tutorial/tutorial/#out-of-the-box-models","title":"Out-of-the-Box Models","text":"<p>The Alfresco source code is an indispensable reference tool which you should always have at the ready, along with the documentation, wiki, forums, and Jira. With that said, if you are following along with this article but have not yet downloaded the source, you are in luck. The out-of-the-box content model files are written in XML and get deployed with the web client. They can be found in the alfresco.war inside various JAR files stored in /WEB-INF/lib. The table below describes several of the out-of-the-box model files.</p> <p>|  JAR | File | Namespaces | Prefix | Imports | Description | | -----|--------------- | ------------ | --------------- | ------------------------ | | alfresco-data-model-[version].jar | dictionaryModel.xml | model/dictionary/1.0 | d | None | Fundamental data types used in all other models. | | alfresco-repository-[version].jar | systemModel.xml | model/system/1.0 | sys | d | System-level objects like base, store root, and reference. | | |                 | system/registry/1.0 | reg |  |  | | |                 | system/modules/1.0 | module |  |  | | alfresco-repository-[version].jar | contentModel.xml | model/content/1.0 | cm | d, sys | Types and aspects extended most often by your models like Content, Folder, Versionable, and Auditable. | |  |               | model/rendition/1.0 | rn | | | |  |               | model/exif/1.0 | exif | | | |  |               | model/audio/1.0 | audio | | | |  |               | model/webdav/1.0 | webdav | | | | alfresco-repository-[version].jar | bpmModel.xml | model/bpm/1.0 | bpm | d, sys, cm, usr | Advanced workflow types. Extend these when writing your own custom advanced workflows.| | alfresco-repository-[version].jar | forumModel.xml | model/forum/1.0 | fm | d, cm | Types and aspects related to adding discussion threads to objects. |</p> <p>Table: Some Out-of-the-Box Content Models</p> <p>In the interest of brevity, I've left off about 25 other model files. Depending on what you are trying to do with your model, or just to see further examples, you might want to take a look at those at some point.</p> <p>In addition to the model files the modelSchema.xsd file can be a good reference. As the name suggests, it defines the XML vocabulary Alfresco content model XML files must adhere to.</p>"},{"location":"content/tutorial/tutorial/#creating-a-custom-content-model","title":"Creating a Custom Content Model","text":"<p>Time for a detailed example. As mentioned earlier, suppose Alfresco is being implemented for a fictional company called \u201cSomeCo\u201d. Pretend that SomeCo is a commercial open source company behind the ever-popular open source project, \u201cSomeSoftware\u201d. SomeCo has decided to re-vamp its web presence by adding new types of content and social functionality to their web site. For this example, let\u2019s focus on the white papers SomeCo wants to make available.</p> <p>SomeCo has selected Alfresco as their Enterprise Content Management solution. In addition to managing the content on the new site, SomeCo wants to use Alfresco to manage all of its rich content. So everything will live in the Alfresco repository and some subset of the company\u2019s content will be served up to the external portal.</p> <p>The first step is to consider the types and properties needed. There are some pieces of metadata SomeCo wants to track about all content, regardless of whether or not it will be shown on the web site. All documents will have an audience property that identifies who will be most interested in the content. Documents related to SomeCo's software will have properties identifying the Software Product and Software Version.</p> <p>Content that needs to be shown on the web site needs to have a flag that indicates the content is \u201cactive\u201d and a date when the content was set to active.</p> <p>Now let's think about associations. For some documents, SomeCo would like to explicitly define one or more \u201crelated documents\u201d. On the web site, SomeCo might choose to show a list of related documents at the bottom of a white paper, for example.</p> <p>Taking these requirements into consideration, the team comes up with the content model depicted below:</p> <p></p> <p>As the drawing shows, there is a common root type called <code>sc:doc</code> with one child, <code>sc:whitepaper</code>. Neither type currently has any properties of their own.</p> <p>It's not shown on the model diagram, but there is a Peer Association defined as part of <code>sc:doc</code> to keep track of related documents. The target class of the association will be <code>sc:doc</code> because the requirement is to be able to associate any instance of <code>sc:doc</code> or its children with one or more instances of <code>sc:doc</code> or its children.</p> <p>In addition, there are two aspects. One, the <code>sc:webable</code> aspect, is used for content that is to be shown on the web site. It contains the <code>sc:isActive</code> flag and <code>sc:published</code> date. The <code>sc:productRelated</code> aspect is used only for content that relates to a SomeCo product. It captures the specific product name the content is related to as well as the product version.</p> <p>It should be easy to see how the model might be extended over time. The requirements mentioned social features being needed at some point. A rateable aspect could be added along with a rating type. Comments could work the same way. Or you could choose to use the rating and commenting features available out-of-the-box.</p> <p>As new content types are identified they will be added under <code>sc:doc</code>.</p> <p>Using the aspect to determine whether or not to show the content on the portal is handy, particularly in light of the SomeCo decision to use Alfresco for all of its content management needs. The repository will contain content that may or may not be on the portal. Portal content will be easily-distinguishable from non-portal content by the presence of the <code>sc:webable</code> aspect.</p>"},{"location":"content/tutorial/tutorial/#setting-up","title":"Setting Up","text":"<p>Before starting, let's get a local development environment set up. First I'll give you a list of the tools you'll need, then I'll explain the project organization.</p>"},{"location":"content/tutorial/tutorial/#tools","title":"Tools","text":"<p>Here is what I am using on my machine:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 11.0.2</li> <li>Apache Maven 3.8.1</li> <li>Alfresco Maven SDK 4.2 (No download necessary)</li> <li>Docker 20.10.6</li> <li>Docker Compose 1.29.1</li> </ul> <p>By default, when you create an Alfresco project using the Alfresco Maven SDK the project will be configured to depend on the latest stable Alfresco Community Edition build.</p> <p>Note that version 3.0.x of the Alfresco Maven SDK works with Alfresco 4.2.7 through and including Alfresco 5.2.x. Version 4.0 of the SDK works with Alfresco 6.0 and higher. Version 4.2 of the SDK works with Alfresco 7.0. This tutorial assumes you are using SDK 4.2.0.</p> <p>Projects created using the Alfresco Maven SDK are runnable. Version 3.0.x of the SDK uses an embedded Tomcat server and an H2 in-memory database while version 4.0.x of the SDK (and newer) uses Docker and Docker Compose. This makes downloading and installing Alfresco optional. But if you want to run a full Alfresco server locally, you are welcome to do that.</p> <p>An IDE is also optional. Most people working with Alfresco use IntelliJ, Eclipse, or something similar.</p>"},{"location":"content/tutorial/tutorial/#project-organization","title":"Project Organization","text":"<p>The Alfresco Maven SDK is used to bootstrap the project. It will be configured to package customizations into two AMPs (Alfresco Module Packages): One AMP is for the Alfresco web application (the \"repo\" tier) and the other is for the Alfresco Share web application (the \"Share\" tier).</p> <p>This tutorial will use two projects:</p> <ul> <li>content-tutorial: This is the parent project that includes a repository tier module, a Share tier module, and an integration-tests module. The repository tier module contains the custom content model declaration that you'll create in Part 1 of this tutorial. The share tier module contains the Alfresco Share user interface configuration that you'll create in Part 2 of this tutorial.</li> <li>content-tutorial-cmis: This project contains runnable Java classes that show how to use the CMIS API to perform CRUD functions against content that leverages your custom content model. You'll create this project in Part 3 of this tutorial.</li> </ul> <p>From an Apache Maven perspective, each of these two projects as well as each of the content-tutorial project's modules will have their own pom.xml.</p> <p>Speaking of Apache Maven, I am not going to spend much time talking about how the Alfresco Maven SDK works. If you aren't already familiar with it, you may want to read the Getting Started with the Alfresco Maven SDK tutorial on ecmarchitect.com first and then come back to this one.</p>"},{"location":"content/tutorial/tutorial/#implementing-and-deploying-the-model","title":"Implementing and Deploying the Model","text":"<p>Here are the steps to follow when configuring a custom content model:</p> <ol> <li>Create a new project using the Alfresco Maven SDK</li> <li>Create a custom content model XML file</li> <li>Register the new model XML file using a Spring bean</li> <li>Test your changes</li> </ol> <p>Let's go through each of these.</p>"},{"location":"content/tutorial/tutorial/#step-1-create-a-new-amp-project","title":"Step 1: Create a new AMP Project","text":"<p>The first step is to create a new project using the Alfresco Maven SDK. Follow these steps:</p> <ol> <li>If you have not already done so, create an empty directory that can hold the new projects associated with this tutorial. I'll refer to that as $TUTORIAL_HOME.</li> <li> <p>Now use the Alfresco Maven SDK to create a project for the repo tier AMP. Using the command line, change directories to $TUTORIAL_HOME, then run:</p> <pre><code>mvn archetype:generate -Dfilter=org.alfresco:\n</code></pre> </li> <li> <p>Choose the \"alfresco-allinone-archetype\" archetype.</p> </li> <li>Choose version 4.2.0 of the archetype if prompted.</li> <li>Specify \"com.someco\" for the <code>groupId</code>.</li> <li>Specify \"content-tutorial\" for the <code>artifactId</code>.</li> <li>If your IDE isn't running, start it up and import the content-tutorial project you just created.</li> </ol> <p>If you have problems after the import, go ahead and resolve those. Consult the Alfresco Maven SDK tutorial if you need help with that.</p> <p>Starting with SDK 3.0, the default is to create JAR files. We want to create AMP files instead, so edit the pom.xml and uncomment the maven-assembly-plugin.</p> <p>Now you are ready to create your custom content model XML.</p>"},{"location":"content/tutorial/tutorial/#step-2-create-a-custom-content-model-xml-file","title":"Step 2: Create a custom content model XML file","text":"<p>Now that you have a project that is ready to package your customizations you can create your content model XML file. To do that, follow these steps:</p> <ol> <li> <p>Models belong in a directory called \u201cmodel\u201d in your project's module directory, which is:</p> <pre><code>$TUTORIAL_HOME/content-tutorial-platform/src/main/resources/alfresco/module/content-tutorial-platform\n</code></pre> <p>If the \"model\" directory does not exist when the project is initially created by the Alfresco Maven SDK, go ahead and create it now. If it does exist and there are files in it, delete them now. 2. Custom models live in the model directory as XML. Create a new XML file in the model directory called \"scModel.xml\". The name of the file isn't important but you should choose a name that will help you and your team distinguish it from other model files you might add to this directory over time. 3. Copy the following XML into the scModel.xml file and save.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Definition of new Model --&gt;\n&lt;model name=\"sc:somecomodel\" xmlns=\"http://www.alfresco.org/model/dictionary/1.0\"&gt;\n    &lt;!-- Optional meta-data about the model --&gt;\n    &lt;description&gt;Someco Model&lt;/description&gt;\n    &lt;author&gt;Jeff Potts&lt;/author&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n\n    &lt;!-- Imports are required to allow references to definitions in other models --&gt;\n    &lt;imports&gt;\n        &lt;!-- Import Alfresco Dictionary Definitions --&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/dictionary/1.0\" prefix=\"d\" /&gt;\n        &lt;!-- Import Alfresco Content Domain Model Definitions --&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/content/1.0\" prefix=\"cm\" /&gt;\n    &lt;/imports&gt;\n\n    &lt;!-- Introduction of new namespaces defined by this model --&gt;\n    &lt;namespaces&gt;\n        &lt;namespace uri=\"http://www.someco.com/model/content/1.0\" prefix=\"sc\" /&gt;\n    &lt;/namespaces&gt;\n    &lt;constraints&gt;\n        &lt;constraint name=\"sc:campaignList\" type=\"LIST\"&gt;\n            &lt;parameter name=\"allowedValues\"&gt;\n                &lt;list&gt;\n                    &lt;value&gt;Application Syndication&lt;/value&gt;\n                    &lt;value&gt;Private Event Retailing&lt;/value&gt;\n                    &lt;value&gt;Social Shopping&lt;/value&gt;\n                &lt;/list&gt;\n            &lt;/parameter&gt;\n        &lt;/constraint&gt;\n    &lt;/constraints&gt;\n\n    &lt;types&gt;\n        &lt;!-- Enterprise-wide generic document type --&gt;\n        &lt;type name=\"sc:doc\"&gt;\n            &lt;title&gt;Someco Document&lt;/title&gt;\n            &lt;parent&gt;cm:content&lt;/parent&gt;\n            &lt;associations&gt;\n                &lt;association name=\"sc:relatedDocuments\"&gt;\n                    &lt;title&gt;Related Documents&lt;/title&gt;\n                    &lt;source&gt;\n                        &lt;mandatory&gt;false&lt;/mandatory&gt;\n                        &lt;many&gt;true&lt;/many&gt;\n                    &lt;/source&gt;\n                    &lt;target&gt;\n                        &lt;class&gt;sc:doc&lt;/class&gt;\n                        &lt;mandatory&gt;false&lt;/mandatory&gt;\n                        &lt;many&gt;true&lt;/many&gt;\n                    &lt;/target&gt;\n                &lt;/association&gt;\n            &lt;/associations&gt;\n            &lt;mandatory-aspects&gt;\n                &lt;aspect&gt;cm:generalclassifiable&lt;/aspect&gt;\n            &lt;/mandatory-aspects&gt;\n        &lt;/type&gt;\n\n        &lt;type name=\"sc:whitepaper\"&gt;\n            &lt;title&gt;Someco Whitepaper&lt;/title&gt;\n            &lt;parent&gt;sc:doc&lt;/parent&gt;\n        &lt;/type&gt;\n\n        &lt;type name=\"sc:marketingDoc\"&gt;\n            &lt;title&gt;Someco Marketing Document&lt;/title&gt;\n            &lt;parent&gt;sc:doc&lt;/parent&gt;\n            &lt;properties&gt;\n                &lt;property name=\"sc:campaign\"&gt;\n                    &lt;type&gt;d:text&lt;/type&gt;\n                    &lt;multiple&gt;true&lt;/multiple&gt;\n                    &lt;constraints&gt;\n                        &lt;constraint ref=\"sc:campaignList\" /&gt;\n                    &lt;/constraints&gt;\n                &lt;/property&gt;\n            &lt;/properties&gt;\n        &lt;/type&gt;\n\n    &lt;/types&gt;\n\n    &lt;aspects&gt;\n        &lt;aspect name=\"sc:webable\"&gt;\n            &lt;title&gt;Someco Webable&lt;/title&gt;\n            &lt;properties&gt;\n                &lt;property name=\"sc:published\"&gt;\n                    &lt;type&gt;d:date&lt;/type&gt;\n                &lt;/property&gt;\n                &lt;property name=\"sc:isActive\"&gt;\n                    &lt;type&gt;d:boolean&lt;/type&gt;\n                    &lt;default&gt;false&lt;/default&gt;\n                &lt;/property&gt;\n            &lt;/properties&gt;\n        &lt;/aspect&gt;\n\n        &lt;aspect name=\"sc:productRelated\"&gt;\n            &lt;title&gt;Someco Product Metadata&lt;/title&gt;\n            &lt;properties&gt;\n                &lt;property name=\"sc:product\"&gt;\n                    &lt;type&gt;d:text&lt;/type&gt;\n                    &lt;mandatory&gt;true&lt;/mandatory&gt;\n                    &lt;multiple&gt;true&lt;/multiple&gt;\n                &lt;/property&gt;             \n                &lt;property name=\"sc:version\"&gt;\n                    &lt;type&gt;d:text&lt;/type&gt;\n                    &lt;mandatory&gt;true&lt;/mandatory&gt;\n                    &lt;multiple&gt;true&lt;/multiple&gt;\n                &lt;/property&gt;\n            &lt;/properties&gt;\n        &lt;/aspect&gt;\n    &lt;/aspects&gt;\n&lt;/model&gt;\n</code></pre> </li> </ol> <p>Referring back to the earlier drawing of SomeCo's initial content model, you'll see that it matches up with the XML above with a small exception. As shown in the diagram, there are two aspects, each with two properties, the enterprise-wide ancestor type called <code>sc:doc</code>, a type for whitepapers called <code>sc:whitepaper</code>, and a third type, <code>sc:marketingDoc</code>, which I added so you could see an example of how constraints work.</p> <p>When building your own custom content models, you may want to use the out-of-the-box contentModel.xml, discussed earlier, as a reference.</p> <p>Here's an important note about the content model schema that may save you some time: Order matters. For example, if you move the <code>associations</code> element after <code>mandatory-aspects</code> Alfresco won't be able to parse your model. Refer to the modelSchema.xsd referenced earlier to determine the expected order.</p>"},{"location":"content/tutorial/tutorial/#step-3-register-the-new-model-with-a-spring-bean","title":"Step 3: Register the new model with a Spring bean","text":"<p>The next step is to register the new model with a Spring bean in a Spring context file. You'll find that the Alfresco Maven SDK has already created a Spring context file for your module in:</p> <pre><code>$TUTORIAL_HOME/content-tutorial-platform/src/main/resources/alfresco/module/content-tutorial-platform/context\n</code></pre> <p>The file is named bootstrap-context.xml. If you open that file you'll see that two Spring beans are already there. They were created by the Alfresco Maven SDK and they are used to wire in an example content model, workflow model, and sample workflows.</p> <p>Delete the two sample Spring beans. You will replace these with your own definitions.</p> <p>To register the custom content model with Spring, all we have to do is add a new <code>bean</code> element to the list of <code>beans</code>. The new <code>bean</code> element looks like this:</p> <pre><code>&lt;!-- Registration of new models --&gt;\n&lt;bean id=\"${project.artifactId}_dictionaryBootstrap\" parent=\"dictionaryModelBootstrap\" depends-on=\"dictionaryBootstrap\"&gt;\n    &lt;property name=\"models\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco/module/${project.artifactId}/model/scModel.xml&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Notice the <code>${project.artifactId}</code> placeholder. That will be automatically replaced by the Alfresco Maven SDK using the <code>artifactId</code> specified in the pom.xml file when Maven generates the AMP.</p>"},{"location":"content/tutorial/tutorial/#step-4-test-your-changes","title":"Step 4: Test Your Changes","text":"<p>The last step is to test your changes. The Alfresco Maven SDK makes that easy. Do this:</p> <ol> <li>From the command line, change directories to $TUTORIAL_HOME/content-tutorial-platform.</li> <li> <p>Run:</p> <pre><code>mvn install -DskipTests\n</code></pre> </li> </ol> <p>The first time you do this it may take quite a while. Maven is downloading everything it needs to compile and package the project.</p> <p>If everything goes as expected you should see:</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1.465 s\n[INFO] Finished at: 2019-02-11T13:22:29-06:00\n[INFO] Final Memory: 25M/501M\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>If you get a build failure, it is time to debug. Make sure that:</p> <ul> <li>The bean in service-context.xml refers to the proper path and file name of your custom content model XML file.</li> <li>Your custom content model XML file is well-formed and valid.</li> </ul> <p>If you still have problems, post as much detail as you can in the Alfresco Forums.</p>"},{"location":"content/tutorial/tutorial/#success","title":"Success","text":"<p>You have now created an AMP that contains a custom content model. If you go look in:</p> <pre><code>$TUTORIAL_HOME/content-tutorial-platform/target\n</code></pre> <p>you'll see a file named content-tutorial-platform-1.0-SNAPSHOT.amp. That AMP can be installed in an Alfresco installation. For example, if you are running Alfresco using the binary installer, you can copy the AMP to <code>$ALFRESCO_HOME/amps</code> and then run <code>$ALFRESCO_HOME/bin/apply_amps.sh</code> to install the AMP into your Alfresco web application.</p> <p>For the purpose of this tutorial, though, let's keep moving. You've got your content model defined but the Alfresco Share user interface doesn't know anything about it yet. You'll learn how to do that next.</p>"},{"location":"content/tutorial/tutorial/#part-2-configuring-alfresco-share","title":"Part 2: Configuring Alfresco Share","text":"<p>Now that the model is defined, you could begin using it right away by writing code against one of Alfresco's API's that creates instances of your custom types, adds aspects, etc. In practice it is usually a good idea to do just that to make sure the model behaves like you expect. In fact, if you just can\u2019t wait to see some code to create, query, and update content, skip to Part 3. For everyone else, let's talk about how to configure Alfresco Share so that end-users can work with the custom content model you just created.</p>"},{"location":"content/tutorial/tutorial/#configuring-the-custom-model-in-alfresco-share","title":"Configuring the Custom Model in Alfresco Share","text":"<p>Let\u2019s continue by configuring Alfresco Share to work with our custom content model.</p> <p>First, think about the Alfresco Share client and all of the places the content model customizations need to show up:</p> <ul> <li> <p>\u201cIs sub-type\u201d criteria. When a user configures a rule on a space and uses content types as a criteria, the custom types should be a choice in the list of possible content types.</p> </li> <li> <p>\u201cHas aspect\u201d criteria. When a user configures a rule on a space and uses the presence of an aspect as a criteria, the custom aspects should be a choice in the list of possible aspects.</p> </li> <li> <p>Change type action. When a user runs the \u201cspecialize type\u201d action, either as part of a rule configuration or through the \u201cChange Type\u201d UI action, the custom types should be available.</p> </li> <li> <p>Add aspect. When a user runs the \u201cadd aspect\u201d action, either as part of a rule configuration or through the \u201cManage Aspects\u201d UI action, the custom aspects should be available.</p> </li> <li> <p>Document Details. When a user looks at the document details page for a piece of content stored as one of the custom types or with one of the custom aspects attached, the properties section should show the custom properties.</p> </li> <li> <p>Edit Properties. When a user edits the properties of a piece of content, either with the \u201cfull\u201d form or the abbreviated form, the appropriate properties should be shown.</p> </li> <li> <p>Advanced search. When a user runs an advanced search, they should be able to restrict search results to instances of our custom types and/or content with specific values for the properties of our custom types.</p> </li> </ul> <p>Let's configure Alfresco Share to make each of the areas mentioned above work with our custom content model. To do that, we're going to:</p> <ol> <li>Create a custom Share configuration file.</li> <li>Test our changes.</li> </ol> <p>Let's do it.</p>"},{"location":"content/tutorial/tutorial/#step-1-create-a-custom-share-configuration-file","title":"Step 1: Create a custom Share configuration file","text":"<p>A module called \"content-repo-share\" was added to our project when we created the content-tutorial project using the Alfresco SDK using the \"all-in-one\" archetype.</p> <p>Alfresco Share uses a configuration file called \"share-config-custom.xml\". The share-config-custom.xml file is a proprietary file composed of numerous \u201cconfig\u201d elements. Each config element has an \u201cevaluator\u201d and a \u201ccondition\u201d. Extending the out-of-the-box Share configuration is a matter of knowing which evaluator/condition to use.</p> <p>The location of the share-config-custom.xml file is a little counter-intuitive. Ultimately, we want that file to be placed under META-INF in a JAR file that will go into the Share web application's WEB-INF/lib. Putting the file in a JAR keeps it from overwriting other modules that may also be providing their own share-config-custom.xml.</p> <p>Create an empty XML file called \"share-config-custom.xml\" in:</p> <pre><code>$TUTORIAL_HOME/content-tutorial-share/src/main/resources/META-INF\n</code></pre> <p>We'll add to that file in the next sections.</p>"},{"location":"content/tutorial/tutorial/#add-custom-types-and-aspects-to-lists","title":"Add Custom Types and Aspects to Lists","text":"<p>The first four items in our configuration wish list have to do with telling the Share user interface about custom types and aspects. A single set of configuration will take care of all four items.</p> <ol> <li> <p>Edit the share-config-custom.xml file you just created and add the following:</p> <p><pre><code>&lt;alfresco-config&gt;\n    &lt;!-- Document Library config section --&gt;\n    &lt;config evaluator=\"string-compare\" condition=\"DocumentLibrary\"&gt;\n    &lt;/config&gt;\n&lt;/alfresco-config&gt;\n</code></pre> 2. Now add an <code>aspects</code> element as a child of the <code>config</code> element to identify the aspects that are visible, addable, and removeable:</p> <pre><code>&lt;aspects&gt;\n    &lt;!-- Aspects that a user can see --&gt;\n    &lt;visible&gt;\n        &lt;aspect name=\"sc:webable\" /&gt;\n        &lt;aspect name=\"sc:productRelated\" /&gt;            \n    &lt;/visible&gt;\n\n    &lt;!-- Aspects that a user can add. Same as \"visible\" if left empty --&gt;\n    &lt;addable&gt;\n    &lt;/addable&gt;\n\n    &lt;!-- Aspects that a user can remove. Same as \"visible\" if left empty --&gt;\n    &lt;removeable&gt;\n    &lt;/removeable&gt;\n&lt;/aspects&gt;\n</code></pre> <p>As the comments suggest, the <code>addable</code> and <code>removeable</code> elements can remain empty if the list is the same. 3. That takes care of aspects. Let\u2019s configure the types. Add a <code>types</code> element as a sibling to the <code>aspects</code> element you just added with the following content:</p> <pre><code>&lt;types&gt;\n    &lt;type name=\"cm:content\"&gt;\n        &lt;subtype name=\"sc:doc\" /&gt;\n        &lt;subtype name=\"sc:whitepaper\" /&gt;\n    &lt;/type&gt;\n    &lt;type name=\"sc:doc\"&gt;\n        &lt;subtype name=\"sc:whitepaper\" /&gt;\n    &lt;/type&gt;\n&lt;/types&gt;\n</code></pre> </li> </ol> <p>Notice how <code>sc:whitepaper</code> appears in the list twice\u2014once as a subtype of <code>cm:content</code> and once as a subtype of <code>sc:doc</code>. This allows a user to specialize directly to the <code>sc:whitepaper</code> type regardless of whether the original type is <code>cm:content</code> or <code>sc:doc</code>.</p>"},{"location":"content/tutorial/tutorial/#step-2-test-your-changes","title":"Step 2: Test Your Changes","text":"<p>You need two things to test this: An Alfresco repository that is running the repo tier AMP you created in Part 1 and an Alfresco Share web application running the Share tier AMP you just started working on. Because you created the project using the all-in-one archetype, you've got both in a single project. So, to test both the repository tier and the Share tier, all you have to do is launch the project using the embedded Tomcat server. Do this:</p> <ol> <li>Open a command line window.</li> <li>Switch to $TUTORIAL_HOME.</li> <li> <p>Run:</p> <pre><code>./run.sh build_start\n</code></pre> <p>If you get a permissions problem you may have to run <code>chmod u+x run.sh</code> first.</p> <p>This script will download images from Docker Hub (or quay.io if you are using Enterprise Edition), copy your AMPs to the containers, then use Docker Compose to start up several containers.</p> </li> </ol> <p>Now open your browser and point it to http://localhost:8180/share. Log in using admin/admin and let\u2019s see what\u2019s different.</p> <p>What\u2019s different is that the \u201cis sub-type\u201d dropdown in the rule configuration panel now has our custom types and the \u201chas aspect\u201d dropdown now has our custom aspects.</p> <p></p> <p></p> <p>The \u201cchange type\u201d dropdown, in both the rule configuration and UI action, lists our custom types:</p> <p></p> <p></p> <p>And the \u201cadd aspect\u201d list, in both the rule configuration and UI action, lists our custom aspects:</p> <p></p> <p></p> <p>You\u2019ll notice that in the rule configuration the types and aspects are shown with their localized names while in the dialogs the strings are shown as not yet localized (their ID is displayed instead of their localized string). That\u2019s because the strings for Share haven\u2019t yet been localized and some services, like the rule configuration, will pull those strings from the content model XML. If it is annoying you, jump to the localization section and come back.</p>"},{"location":"content/tutorial/tutorial/#configuring-forms-for-custom-properties","title":"Configuring Forms for Custom Properties","text":"<p>Try this: Create a piece of test content. Change its type to <code>sc:whitepaper</code> and add both of our custom aspects to it. Then, from the Document Library, click the \"Edit Properties\" link for that piece of test content. You'll see a form that looks something like this:</p> <p></p> <p>When you compare this to the pop-up that is displayed for an instance of <code>cm:content</code> you will see a big difference. The edit properties dialog for <code>sc:whitepaper</code> is a jumbled mess. The locale is showing up for some reason. The title field is halfway down the form, which has grown extremely long with all sorts of fields.</p> <p>What\u2019s going on here is that Share is looking for a form configuration for <code>sc:whitepaper</code>. Finding none, it is just listing all of the properties of the object.</p> <p>Content properties can be edited two ways:</p> <ol> <li>Using the edit metadata popup dialog, which is what you get when you click \u201cEdit Properties\u201d from the document library page</li> <li>Using the default form, which is what you get when you click \u201cEdit Properties\u201d from the document details page.</li> </ol> <p>Clearly something prettier is needed for both the default form and the edit metadata form, so let\u2019s fix that.</p>"},{"location":"content/tutorial/tutorial/#configuring-the-form-service-for-a-custom-type","title":"Configuring the form service for a custom type","text":"<p>Alfresco Share uses the Form Service to decide which properties to show for a given form, how to lay out forms, and the control to use for each property. Let\u2019s take a look at the out-of-the-box form configuration for <code>cm:content</code>. Because you've already launched Alfresco Share on your embedded Tomcat server, the exploded Share web application exists in your project's target directory. The out-of-the-box share-form-config.xml file resides in target/share-war/WEB-INF/classes/alfresco/share-form-config.xml.</p> <p>If you open that file and search for \u2018condition=\u201dcm:content\u201d\u2019 you\u2019ll find two config elements that contain a total of six form configurations. One config element, identified by the <code>node-type</code> evaluator, is for forms dealing with existing nodes. The config element with the <code>model-type</code> evaluator is for forms used to create new nodes.</p> <p>Let\u2019s focus on existing nodes for now. The three forms in that config element are:</p> <ul> <li>Default (<code>form</code> element with no <code>id</code> attribute). This is the form displayed when you open the document details.</li> <li>A form called <code>doclib-simple-metadata</code>. This is used when you edit properties from the document library.</li> <li>A form called <code>doclib-inline-edit</code>. This is used when you click the \u201cInline Edit\u201d UI action.</li> </ul> <p>Suppose whitepapers need to have the same metadata displayed as instances of <code>cm:content</code>. To do that:</p> <ol> <li>Copy the entire config element and all of its children into share-config-custom.xml as a sibling of the Document Library config element you added to that file earlier.</li> <li>Then, change the condition from <code>cm:content</code> to <code>sc:whitepaper</code>.</li> </ol> <p>To test this change:</p> <ol> <li>Go to the terminal window currently tailing the logs of the running containers.</li> <li>Click ctrl+c to interrupt the tail.</li> <li>Re-build the AMPs by running <code>mvn install -DskipTests</code></li> <li> <p>Re-build and re-run the Share container using:</p> <pre><code>./run.sh reload_share\n</code></pre> </li> </ol> <p>Now when you log in to Alfresco Share, you\u2019ll see that the property sets match for <code>sc:whitepaper</code> and <code>cm:content</code> across all forms, as shown below:</p> <p></p> <p>Let's build on the form definition for <code>sc:whitepaper</code> to include properties and associations from the custom content model.</p>"},{"location":"content/tutorial/tutorial/#configuring-the-form-service-for-custom-properties","title":"Configuring the form service for custom properties","text":"<p>The document details for a whitepaper looks better, but the form isn\u2019t showing the custom metadata. In this particular example, our model defines an association called <code>sc:relatedDocuments</code> which <code>sc:whitepaper</code> inherits from <code>sc:doc</code> and four properties across two custom aspects.</p> <p>For the properties defined in aspects, you have a choice. You can either add the properties to every form definition you want them to appear in. Or, you can add an aspect configuration so that they\u2019ll automatically be displayed for any object that includes that aspect. The advantage of the former is that you can have fine-grained control over where those fields appear whereas if you choose the latter route, the form service will decide where to include your fields.</p> <p>This example takes the latter route. Edit the share-config-custom.xml file and add the following aspect configuration for <code>sc:webable</code>:</p> <pre><code>&lt;config evaluator=\"aspect\" condition=\"sc:webable\"&gt;\n    &lt;forms&gt;\n        &lt;form&gt;\n            &lt;field-visibility&gt;\n                &lt;show id=\"sc:published\" /&gt;\n                &lt;show id=\"sc:isActive\" /&gt;\n            &lt;/field-visibility&gt;\n            &lt;appearance&gt;                    \n                &lt;field id=\"sc:published\" label-id=\"prop.sc_published\" /&gt;\n                &lt;field id=\"sc:isActive\" label-id=\"prop.sc_isActive\" /&gt;\n            &lt;/appearance&gt;\n        &lt;/form&gt;\n    &lt;/forms&gt;\n&lt;/config&gt;\n</code></pre> <p>You can add the aspect configuration for <code>sc:productRelated</code> following the same pattern.</p> <p>Notice that there are two elements you have to worry about\u2014the <code>field-visibility</code> element defines which properties are on the form while the <code>appearance</code> element defines how those properties are rendered. In this example I\u2019m showing only a <code>label-id</code>, but there are a lot of options here. For example, if you wanted to override the component used to display the property, this is where you\u2019d do it.</p> <p>Let\u2019s take care of the <code>sc:relatedDocuments</code> association. It\u2019s not defined in an aspect, so it is added directly to the form configuration for <code>sc:whitepaper</code>. It probably makes sense for the related documents property to be shown on both the default form and the edit metadata popup dialog. To do that, you\u2019re going to modify the default form configuration element for <code>sc:whitepaper</code> that you created earlier. First add a <code>show</code> element just before the closing <code>field-visibility</code> tag:</p> <pre><code>    &lt;!-- surf:widget aspect --&gt;\n    &lt;show id=\"surf:widgetType\"/&gt;\n    &lt;show id=\"surf:mid\"/&gt;\n    &lt;show id=\"surf:label\"/&gt;\n\n    &lt;!-- sc:doc --&gt;\n    &lt;show id=\"sc:relatedDocuments\" /&gt;\n&lt;/field-visibility&gt;\n</code></pre> <p>Then, add a new <code>field</code> element just before the closing <code>appearance</code> tag:</p> <pre><code>    &lt;field id=\"cm:addressees\" read-only=\"true\" /&gt;\n    &lt;field id=\"cm:sentdate\" read-only=\"true\" /&gt;\n    &lt;field id=\"cm:subjectline\" read-only=\"true\" /&gt;\n    &lt;field id=\"sc:relatedDocuments\" label-id=\"assoc.sc_relatedDocuments\" /&gt;\n&lt;/appearance&gt;\n</code></pre> <p>Now do the same thing for the <code>doclib-simple-metadata</code> form.</p> <p>To see your changes, re-build the AMPs using <code>mvn install -DskipTests</code> then re-build and re-run the Share container using <code>./run.sh reload_share</code>. You should see all four custom properties and the related documents association in the document details page, like this:</p> <p></p> <p>Similarly, when you click \"Edit Properties\" from the document details page you should see the association and the properties:</p> <p></p> <p>On the edit metadata pop-up dialog you should see the related documents association, like this:</p> <p></p> <p>Now let's turn our attention to search.</p>"},{"location":"content/tutorial/tutorial/#configuring-advanced-search-in-alfresco-share","title":"Configuring Advanced Search in Alfresco Share","text":"<p>The advanced search form in Alfresco Share allows end-users to first select what they are looking for and then specify both full-text and specific property values to search for depending on the content type selected. Out-of-the-box, the search form includes two types: <code>cm:content</code> and <code>cm:folder</code>.</p> <p>Users need to be able to search specifically for SomeCo Whitepapers, so the first step is to add the <code>sc:whitepaper</code> type to the list. Like the other Share form configuration covered thus far, the configuration goes in share-config-custom.xml. In this case, the condition is <code>AdvancedSearch</code>.</p> <pre><code>&lt;config replace=\"true\" evaluator=\"string-compare\" condition=\"AdvancedSearch\"&gt;\n    &lt;advanced-search&gt;\n        &lt;!-- Forms for the advanced search type list --&gt;\n        &lt;forms&gt;\n            &lt;form labelId=\"search.form.label.cm_content\" descriptionId=\"search.form.desc.cm_content\"&gt;cm:content&lt;/form&gt;\n            &lt;form labelId=\"search.form.label.cm_folder\" descriptionId=\"search.form.desc.cm_folder\"&gt;cm:folder&lt;/form&gt;            \n            &lt;form labelId=\"type.sc_whitepaper\" descriptionId=\"search.form.desc.sc_whitepaper\"&gt;sc:whitepaper&lt;/form&gt;\n        &lt;/forms&gt;\n    &lt;/advanced-search&gt;\n&lt;/config&gt;\n</code></pre> <p>Notice that the list of advanced search forms replaces the out-of-the-box list. If the list only had <code>sc:whitepaper</code> and left out <code>cm:content</code> and <code>cm:folder</code>, Share users would not be able to search for plain content or folders.</p> <p>The next step is to tell Share which form to use when a given type is selected. Recall earlier that there are two sets of form configuration\u2014one for existing nodes (evaluator of <code>node-type</code>) and one for new nodes (evaluator of <code>model-type</code>). Search forms go in the <code>model-type</code> evaluator.</p> <p>The search form for whitepapers should be the same as the one for plain content, but should include the four properties defined in the custom aspects. The easiest way to do this is to copy the <code>cm:content</code> search form from the out-of-the-box form configuration into share-config-custom.xml and then modify it to suit our needs. The code listing below shows this:</p> <pre><code>&lt;!-- sc:whitepaper type (new nodes) --&gt;\n&lt;config evaluator=\"model-type\" condition=\"sc:whitepaper\"&gt;\n    &lt;forms&gt;\n        &lt;!-- Search form --&gt;\n        &lt;form id=\"search\"&gt;\n            &lt;field-visibility&gt;\n                &lt;show id=\"cm:name\" /&gt;\n                &lt;show id=\"cm:title\" force=\"true\" /&gt;\n                &lt;show id=\"cm:description\" force=\"true\" /&gt;\n                &lt;show id=\"mimetype\" /&gt;\n                &lt;show id=\"cm:modified\" /&gt;\n                &lt;show id=\"cm:modifier\" /&gt;\n                &lt;!-- sc:productRelated --&gt;\n                &lt;show id=\"sc:product\" /&gt;\n                &lt;show id=\"sc:version\" /&gt;\n                &lt;!-- sc:webable --&gt;\n                &lt;show id=\"sc:isActive\" /&gt;\n                &lt;show id=\"sc:published\" /&gt;\n            &lt;/field-visibility&gt;\n            &lt;appearance&gt;\n                &lt;field id=\"mimetype\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/mimetype.ftl\" /&gt;\n                &lt;/field&gt;\n                &lt;field id=\"cm:modifier\"&gt;\n                    &lt;control&gt;\n                        &lt;control-param name=\"forceEditable\"&gt;true&lt;/control-param&gt;\n                    &lt;/control&gt;\n                &lt;/field&gt;\n                &lt;field id=\"cm:modified\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/daterange.ftl\" /&gt;\n                &lt;/field&gt;\n                &lt;!-- sc:productRelated --&gt;\n                &lt;field id=\"sc:product\" label-id=\"prop.sc_product\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/textfield.ftl\" /&gt;\n                &lt;/field&gt;\n                &lt;field id=\"sc:version\" label-id=\"prop.sc_version\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/textfield.ftl\" /&gt;\n                &lt;/field&gt;               \n                &lt;!-- sc:webable --&gt;\n                &lt;field id=\"sc:isActive\" label-id=\"prop.sc_isActive\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/checkbox.ftl\" /&gt;\n                &lt;/field&gt;\n                &lt;field id=\"sc:published\" label-id=\"prop.sc_published\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/daterange.ftl\" /&gt;\n                &lt;/field&gt;\n            &lt;/appearance&gt;\n        &lt;/form&gt;\n    &lt;/forms&gt;\n&lt;/config&gt;\n</code></pre> <p>It is important to note that the field elements in the appearance section require the form control to be specified. If it is not specified, the field will not show up on the search form.</p> <p>After re-building the AMP and reloading the Share container, the SomeCo Whitepaper type is included in the advanced search dropdown, and four fields for the aspect properties are shown in the search form.</p> <p></p> <p></p>"},{"location":"content/tutorial/tutorial/#localizing-strings-for-custom-content-models","title":"Localizing Strings for Custom Content Models","text":"<p>We\u2019ve put off localizing the form labels until now. To fix this, first create a messages bundle, then register it with a Spring bean. Here are the steps:</p> <ol> <li>Create a new folder called \"messages\" in $TUTORIAL_HOME/content-tutorial-share/src/main/resources/alfresco/web-extension. If the folder is already there, delete any files that may already be present.</li> <li> <p>In the messages folder, create a new file called \"scModel.properties\" with the following content:</p> <pre><code>#sc:doc\ntype.sc_doc=SomeCo Doc\nassoc.sc_relatedDocuments=Related Documents\n\n#sc:whitepaper\ntype.sc_whitepaper=SomeCo Whitepaper\nsearch.form.desc.sc_whitepaper=Search for SomeCo Whitepapers\n\n#sc:webable\naspect.sc_webable=SomeCo Webable\nprop.sc_published=Published\nprop.sc_isActive=Active?\n\n#sc:productRelated\naspect.sc_productRelated=SomeCo Product Related\nprop.sc_product=Product\nprop.sc_version=Version\n</code></pre> </li> <li> <p>We need to register this properties bundle with Spring. Share does not look in module directories for Spring context files. Instead, it uses the web-extension folder. That folder already exists in $TUTORIAL_HOME/content-tutorial-share/src/main/resources/alfresco.</p> </li> <li>In the web-extension folder, create a new file called \"content-tutorial-share-context.xml\". I am using the <code>artifactId</code> as part of the file name because this file will ultimately end up in a folder that may contain other Spring configuration files and I don't want this one to collide with any of those. If the SDK already placed a similar file in the folder, it is okay to use it instead, just clear out the contents of the file.</li> <li> <p>Add the following content to the file, then save:</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'&gt;\n\n&lt;beans&gt;\n    &lt;!-- Add Someco messages --&gt;\n    &lt;bean id=\"com.someco.content-tutorial-share.resources\" class=\"org.springframework.extensions.surf.util.ResourceBundleBootstrapComponent\"&gt;\n        &lt;property name=\"resourceBundles\"&gt;\n            &lt;list&gt;\n                &lt;value&gt;alfresco.web-extension.messages.scModel&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre> </li> </ol> <p>Now re-build the AMPs and reload the Share container and you should see that the types, aspects, and properties have the localized labels.</p>"},{"location":"content/tutorial/tutorial/#share-configuration-summary","title":"Share Configuration Summary","text":"<p>You\u2019ve seen that configuring Alfresco Share for your custom content model essentially involves adding XML to the share-config-custom.xml file and creating a properties file for your localized strings. All of this lives in a project created by the Alfresco Maven SDK and is packaged and deployed as an AMP.</p> <p>There are other things you might like to do to the Share user interface, but these are beyond the scope of this document:</p> <ul> <li>Add custom content types to the Create menu</li> <li>Add custom properties to the document library sort criteria</li> <li>Add custom properties to the document library data grid</li> </ul> <p>Now let\u2019s turn our attention from the front-end to the back-end to understand how to create, query, update, and delete content using code running remotely from the Alfresco server.</p>"},{"location":"content/tutorial/tutorial/#part-3-working-with-content-programmatically","title":"Part 3: Working with Content Programmatically","text":"<p>So far we've created a custom model and we've configured Alfresco Share to let end users work with the types, aspects, and properties defined in the custom model. For simple document management solutions, this may be enough. Often, code will also required. It could be code in a web application that needs to work with the repository, code that implements custom behavior for custom content types, or code that implements Alfresco web client customizations.</p> <p>There are several API's available depending on what you want to do. The table below outlines the choices:</p> Solution type Language Alfresco API Alfresco Share user interface customizations Freemarker Templating Language, Java/JSP, JavaScript Alfresco Freemarker API, Alfresco JavaScript API Custom applications with an embedded Alfresco repository (Repository runs in the same process as the application) Java Alfresco Foundation API Custom applications using a remote Alfresco repository Java, Python, PHP, .NET, or any language that can make calls via HTTP CMIS, Web Scripts, REST API <p>Table: Alfresco API Options</p> <p>The best way to make remote calls to the Alfresco repository is to leverage Alfresco\u2019s support for the Content Management Interoperability Services (CMIS) standard. So let\u2019s look at CMIS examples for creating, updating, querying, and deleting content. The client API\u2019s available from the Apache Chemistry project offer a variety of languages to choose from. This tutorial focuses on Java.</p> <p>If you need to learn how to make these other styles of customizations, consult ecmarchitect.com and the Alfresco Documentation.</p>"},{"location":"content/tutorial/tutorial/#setup","title":"Setup","text":"<p>Let's run through some examples that leverage OpenCMIS to work with instances of the custom types defined in the model. To facilitate this, I'm going to create a new Maven project as a sibling to the content-tutorial project. Because the new project doesn't produce AMPs it does not make sense to use the Alfresco Maven SDK to create it.</p> <p>To create the CMIS project, do this:</p> <ol> <li>Create a new project called \"content-tutorial-cmis\".</li> <li>Create a source directory called \"java\" in \"src/main\".</li> <li>If you are using Eclipse, convert the project to a Maven project using Configure, Convert to Maven Project. This will create a default pom.xml in the root of your project folder. I am using \"com.someco\" for the <code>groupId</code> and \"content-tutorial-cmis\" for the <code>artifactId</code>.</li> <li>Edit the pom.xml file that belongs to \"content-tutorial-cmis\".</li> <li> <p>This project uses the OpenCMIS library from Apache Chemistry and the content-tutorial project, so add those as dependencies:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.chemistry.opencmis&lt;/groupId&gt;\n    &lt;artifactId&gt;chemistry-opencmis-client-impl&lt;/artifactId&gt;\n    &lt;version&gt;1.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.someco&lt;/groupId&gt;\n    &lt;artifactId&gt;content-tutorial&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> </ol> <p>The content-tutorial-cmis project depends on some constants that are related to our custom content model, so those make sense to be defined in the content-tutorial project within the content-tutorial-platform module. For this tutorial, all we need is the com.someco.model.SomeCoModel.java class which contains constants that map to the custom content model. These constants are used for convenience by Java classes that need to know things like namespaces, names of content types, etc. If you are building your own project just copy it from the source.</p>"},{"location":"content/tutorial/tutorial/#cmis-10-and-the-alfresco-opencmis-extension-library","title":"CMIS 1.0 and the Alfresco OpenCMIS Extension Library","text":"<p>Alfresco offers support for both CMIS 1.0 and CMIS 1.1. Unless you have a good reason to stick with the old version, you should be hitting the CMIS 1.1 end points. If you are using CMIS 1.1, skip this section and go on to \"Start Your Repository\".</p> <p>If you are using CMIS 1.0, you may want to use an additional library called the Alfresco OpenCMIS Extension. It was created to make it easier to work with aspects before native support for aspects was added to CMIS 1.1. If you need to work with CMIS 1.0 for some reason, add the following to the CMIS project pom.xml:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.alfresco.cmis.client&lt;/groupId&gt;\n    &lt;artifactId&gt;alfresco-opencmis-extension&lt;/artifactId&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>As well as the repository where the OpenCMIS Extension Library resides:</p> <pre><code>&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;artifacts.alfresco.com&lt;/id&gt;\n        &lt;name&gt;Alfresco Maven Repository&lt;/name&gt;\n        &lt;url&gt;https://artifacts.alfresco.com/nexus/content/groups/public/&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>"},{"location":"content/tutorial/tutorial/#start-your-repository","title":"Start Your Repository","text":"<p>To run the examples in Part 3 you need to have an Alfresco repository running with the repo tier AMP you created in Part 1. Using the <code>/run.sh build_start</code> script to fire up your SDK-created Docker containers as shown in that part of the tutorial works fine. If it isn't running already, go ahead and start it up.</p> <p>Now you are ready to write some code.</p>"},{"location":"content/tutorial/tutorial/#creating-content-with-opencmis","title":"Creating Content with OpenCMIS","text":"<p>The goal here is to create a runnable class called <code>SomeCoCMISDataCreator</code> that accepts arguments for the username, password, folder in which to create the content, type of content we're creating, and a name for the new content. I've left out the main method as well as the code that establishes the session, but you can see the full class here.</p> <p>The first thing the code does is grab a session. The <code>getSession()</code> method is inherited from a class called CMISExampleBase which is used for all of the CMIS examples in this document. The important thing to know about that method is that it uses the value of <code>serviceUrl</code> to know how to connect to your Alfresco server. The URL currently specified is the one to use when connecting to a 5.x server running on localhost using the AtomPub binding. The URL is:</p> <pre><code>http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.1/atom\n</code></pre> <p>A common mistake is to use an old CMIS service URL, so make sure you are using the correct one according to the version of Alfresco you are using.</p> <p>Once the code has a session, it gets a reference to the folder where the content will be created. The timestamp is incorporated into the content name so that if the code is run multiple times, the object names will be unique.</p> <pre><code>Session session = getSession();\n\n// Grab a reference to the folder where we want to create content\nFolder folder = (Folder) session.getObjectByPath(\"/\" + getFolderName());\n\nString timeStamp = new Long(System.currentTimeMillis()).toString();\nString filename = getContentName() + \" (\" + timeStamp + \")\";\n</code></pre> <p>Next, the code sets up the properties that will be set on the new document. It creates a <code>Map</code> of <code>Strings</code> and <code>Objects</code> to hold the property names and values.</p> <pre><code>// Create a Map of objects with the props we want to set\nMap &lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;();\nproperties.put(PropertyIds.NAME, filename);\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \"D:sc:whitepaper\");\nproperties.put(PropertyIds.SECONDARY_OBJECT_TYPE_IDS,\n    Arrays.asList(\n        \"P:sc:webable\",\n        \"P:sc:productRelated\",\n        \"P:cm:generalclassifiable\"\n    )\n);\nproperties.put(\"sc:isActive\", true);\nGregorianCalendar publishDate = new GregorianCalendar(2007,4,1,5,0);\nproperties.put(\"sc:published\", publishDate);\n</code></pre> <p>Notice that the base type is being set with the OBJECT_TYPE_ID property. The aspects are being set with the SECONDARY_OBJECT_TYPE_IDS property, which accepts a list of aspect IDs.</p> <p>It is also important to point out that, in CMIS, document types begin with \u201cD:\u201d while policy types begin with \u201cP:\u201d. (The 'P' stands for \"Policy\". CMIS 1.0 didn\u2019t have a native concept of aspects, and as a workaround, aspects were referred to using a CMIS concept called a \u201cPolicy\u201d).</p> <p>The next step is to prepare the content that will be set on the new object. This is a matter of calling the <code>createContentStream()</code> method on the <code>ObjectFactory</code> with the file name, length, mimetype, and an <code>InputStream</code> based on the content.</p> <pre><code>String docText = \"This is a sample \" + getContentType() + \" document called \" +\n       getContentName();\nbyte[] content = docText.getBytes();\nInputStream stream = new ByteArrayInputStream(content);\nContentStream contentStream = session.getObjectFactory().\n    createContentStream(\n        filename, Long.valueOf(content.length), \"text/plain\", stream\n    );\n</code></pre> <p>Finally, the code tells the folder to create a new document and passes in the properties, content stream, and versioning state, then dumps the length of the content that was created.</p> <pre><code>Document doc = folder.createDocument(properties, contentStream,\n     VersioningState.MAJOR);\nSystem.out.println(\"Content Length: \" + doc.getContentStreamLength());\n</code></pre> <p>If you are in an IDE like Eclipse, you should be able to set the arguments and run this class easily. If you want to do it from the command line, you can run it via Maven so that it will set up the classpath for you. To do that you would run:</p> <pre><code>mvn exec:java \\\n-Dexec.mainClass=\"com.someco.cmis.examples.SomeCoCMISDataCreator\" \\\n-Dexec.args=\"admin admin SomeCo whitepaper test\"\n</code></pre> <p>Running <code>SomeCoCMISDataCreator.class</code> produces:</p> <pre><code>Created: dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nContent Length: 59\n</code></pre> <p>If you are following along, you might want to run it a few times to have some test content to play with.</p>"},{"location":"content/tutorial/tutorial/#creating-associations-with-opencmis","title":"Creating Associations with OpenCMIS","text":"<p>Now let's look at a class that creates a \u201crelated documents\u201d association between two documents.</p> <p>The SomeCoCMISDataRelater class accepts a source object ID and a target object ID as arguments. The code creates a map of properties containing the association type, source ID, and target ID. Note that the association type is preceded by \u201cR:\u201d, which stands for \"relationship\", when working with CMIS.</p> <pre><code>Session session = getSession();\n\n// Create a Map of objects with the props we want to set\nMap &lt;String, String&gt; properties = new HashMap&lt;String, String&gt;();\nproperties.put(PropertyIds.OBJECT_TYPE_ID, \"R:sc:relatedDocuments\");\nproperties.put(PropertyIds.SOURCE_ID, getSourceObjectId());\nproperties.put(PropertyIds.TARGET_ID, getTargetObjectId());\ntry {\n    session.createRelationship(properties);\n} catch (Exception e) {\n    System.out.println(\"Oops, something unexpected happened. Maybe the rel already exists?\");\n}\n</code></pre> <p>The last half of the method dumps the associations of the source object. The trick here is that when you make the <code>getObject()</code> call to instantiate the object, you will not get back the relationships by default. The <code>OperationContext</code> that is being instantiated makes sure that happens.</p> <pre><code>// Dump the object's associations\nOperationContext oc = new OperationContextImpl();\noc.setIncludeRelationships(IncludeRelationships.SOURCE);\nDocument sourceDoc = (Document) session.getObject(\n              session.createObjectId(getSourceObjectId()),\n              oc);\nList&lt;Relationship&gt; relList = sourceDoc.getRelationships();\nSystem.out.println(\"Associations of objectId:\" + getSourceObjectId());\nfor (Relationship rel : relList) {\n    System.out.println(\"    \" + rel.getTarget().getId());\n}\n</code></pre> <p>The last line calls a method that queries the associations for a given reference. This should dump the association that was just created plus any other associations that have been created for this object.</p> <p>If you want to run this on your own using Maven, it would look something like this, with your own values for the source and target object ID\u2019s:</p> <pre><code>mvn exec:java \\\n-Dexec.mainClass=\"com.someco.cmis.examples.SomeCoCMISDataRelater\" \\\n-Dexec.args=\"admin admin SomeCo whitepaper test dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0 bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\"\n</code></pre> <p>Running the Java snippet as above, assuming no other relationships exist on the source object produces:</p> <pre><code>Associations of objectId: dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\n    bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\n</code></pre> <p>Now you can use the Alfresco Share client to view the associations as shown below:</p> <p></p> <p>Remember the share-config-custom.xml file? It says that any time the default form or edit metadata form is used for <code>sc:whitepaper</code> objects, the <code>sc:relatedDocuments</code> associations should be shown. Alternatively, the Node Browser, available in the Alfresco Share Administration Console, is a handy way to view associations.</p>"},{"location":"content/tutorial/tutorial/#searching-for-content-with-opencmis","title":"Searching for Content with OpenCMIS","text":"<p>Now that there are some instances of SomeCo\u2019s custom types in the repository it is time to write code that will query for those.</p> <p>Content in the repository is automatically indexed by Alfresco, including properties in your custom content model. You can execute searches to find content based on full-text, property values, content types, and folder paths.</p> <p>There are a number of supported search dialects. If you are writing code against an Alfresco repository that is 3.4 or higher, you should use either Alfresco FTS or CMIS Query Language, if at all possible. This part of the tutorial is focused on CMIS, so let's write some CMIS Query Language queries.</p> <p>Just like the content creation code, the SomeCoCMISDataQueries class will be a runnable Java application that accepts the username, password, and folder name as arguments. It includes a generic method used to execute a query which is called repeatedly with multiple query examples.</p> <p>If you are following along, you should either run the content creation code a few times or create some content manually so you can test out the queries more thoroughly.</p> <p>Let's take a look at the generic query execution method first, then the method that calls it for each example query string.</p> <p>The <code>getQueryResults()</code> method is pretty straightforward. It returns a list of <code>CmisObject</code> objects. It instantiates those objects by iterating over the query results, grabbing the <code>objectId</code> from each result, and making a <code>getObject()</code> call on the <code>session</code>.</p> <pre><code>public List&lt;CmisObject&gt; getQueryResults(String queryString) {\n    List&lt;CmisObject&gt; objList = new ArrayList&lt;CmisObject&gt;();\n    Session session = getSession();\n\n    // execute query\n    ItemIterable&lt;QueryResult&gt; results = session.query(queryString, false);\n\n    for (QueryResult qResult : results) {\n        PropertyData&lt;?&gt; propData = qResult.getPropertyById(\"cmis:objectId\");\n        String objectId = (String) propData.getFirstValue();\n        CmisObject obj = session.getObject(session.createObjectId(objectId));\n        objList.add(obj);\n    }\n\n    return objList;\n};\n</code></pre> <p>The <code>doExamples()</code> method then executes a series of example queries and dumps the results. The first two queries are simple. One returns every instance of <code>sc:doc</code> including instances of types that inherit from <code>sc:doc</code>. The second one finds any objects residing in the folder passed in that contain the word \u201csample\u201d anywhere in the content. Notice the SQL-like syntax of CMIS Query Language. It basically treats content types as if they were tables.</p> <pre><code>System.out.println(RESULT_SEP);\nSystem.out.println(\"Finding content of type:\" +\n     SomeCoModel.TYPE_SC_DOC.toString());\nqueryString = \"select * from sc:doc\";\ndumpQueryResults(getQueryResults(queryString));\n\nSystem.out.println(RESULT_SEP);\nSystem.out.println(\"Find content in the root folder with text like 'sample'\");\nqueryString = \"select * from cmis:document where contains('sample') and\n     in_folder('\" + getFolderId() + \"')\";\ndumpQueryResults(getQueryResults(queryString));\n</code></pre> <p>You might have noticed the <code>getFolderId()</code> call. The <code>in_folder</code> predicate expects an object ID. So the <code>getFolderId()</code> method does a query to find the object ID of the folder that was passed in as an argument to the class. It would be nice if you could do this in a single query, but you can\u2019t.</p>"},{"location":"content/tutorial/tutorial/#queries-on-aspect-based-properties","title":"Queries on Aspect-based Properties","text":"<p>The next query looks for active content. This is when it starts to get interesting because the property that tracks whether or not a piece of content is active, <code>sc:isActive</code>, is defined on an aspect. The CMIS specification allows for joins in queries. But Alfresco does not support joins except in the special case of aspects. In Alfresco CMIS, joins are used to relate a base type to one of its aspects. That allows you to use an aspect-based property in a where clause.</p> <pre><code>System.out.println(RESULT_SEP);\nSystem.out.println(\"Find active content\");\nqueryString = \"select d.*, w.* from cmis:document as d join sc:webable as w on\n     d.cmis:objectId = w.cmis:objectId where w.sc:isActive = True\";\ndumpQueryResults(getQueryResults(queryString));\n</code></pre>"},{"location":"content/tutorial/tutorial/#queries-across-multiple-aspects","title":"Queries Across Multiple Aspects","text":"<p>The next query shows another special case. In this example the goal is to find the active content that has a product property set to a specific value. That\u2019s a challenge because the <code>sc:isActive</code> property is defined by the <code>sc:webable</code> aspect while the <code>sc:product</code> property is defined by a different aspect, <code>sc:productRelated</code>. Unfortunately, there is no good way to get these results in a single query. The solution used here is to write a method called <code>getSubQueryResults()</code> that accepts two queries as arguments. The method runs the first query and then builds an <code>IN</code> predicate using the object IDs that come back, which it appends to the second query before invoking it.</p> <pre><code>System.out.println(RESULT_SEP);\nSystem.out.println(\"Find active content with a product equal to 'SomePortal'\");\nString queryString1 = \"select d.cmis:objectId from cmis:document as d join\n    sc:productRelated as p on d.cmis:objectId = p.cmis:objectId \" +\n    \"where p.sc:product = 'SomePortal'\";\nString queryString2 = \"select d.cmis:objectId from cmis:document as d join\n    sc:webable as w on d.cmis:objectId = w.cmis:objectId \" +\n     \"where w.sc:isActive = True\";\ndumpQueryResults(getSubQueryResults(queryString1, queryString2));\n</code></pre>"},{"location":"content/tutorial/tutorial/#queries-using-dates","title":"Queries Using Dates","text":"<p>The last query uses the aspect join trick to do a date range search on instances of <code>sc:whitepaper</code> published between a specific range.</p> <pre><code>System.out.println(RESULT_SEP);\nSystem.out.println(\"Find content of type sc:whitepaper published between 1/1/2006\n    and 6/1/2007\");\nqueryString = \"select d.cmis:objectId, w.sc:published from sc:whitepaper as d join\n    sc:webable as w on d.cmis:objectId = w.cmis:objectId \" +  \n    \"where w.sc:published &gt; TIMESTAMP '2006-01-01T00:00:00.000-05:00' \" +\n    \"  and w.sc:published &lt; TIMESTAMP '2007-06-02T00:00:00.000-05:00'\";\ndumpQueryResults(getQueryResults(queryString));\n</code></pre>"},{"location":"content/tutorial/tutorial/#running-the-queries","title":"Running the Queries","text":"<p>If you want to compile and run this on your own machine, you can use one of the Ant tasks in the build.xml file included in the code that accompanies this article. Just type:</p> <pre><code>mvn exec:java \\\n-Dexec.mainClass=\"com.someco.cmis.examples.SomeCoCMISDataQueries\" \\\n-Dexec.args=\"admin admin SomeCo\"\n</code></pre> <p>Your results will vary based on how much content you've created and the values you've set in the content properties, but when I ran my test, the results were as shown below.</p> <pre><code>======================\nFinding content of type:doc\n----------------------\nResult 1:\nid:c7c1a94e-8d9c-4434-89b0-cbe14ef94455;1.0\nname:test1.txt\ncreated:Jan 22, 2014 2:22:00 PM\n----------------------\nResult 2:\nid:40ec2412-b1e6-4d86-af8b-4003adeeed46;1.0\nname:test (1390506931762)\ncreated:Jan 23, 2014 1:55:31 PM\n----------------------\nResult 3:\nid:c3e61b61-e5d4-4edf-a3e9-0eac61c693e8;1.0\nname:test (1390507967128)\ncreated:Jan 23, 2014 2:12:47 PM\n----------------------\nResult 4:\nid:bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\nname:test (1390508346539)\ncreated:Jan 23, 2014 2:19:06 PM\n----------------------\nResult 5:\nid:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nname:test (1390508353662)\ncreated:Jan 23, 2014 2:19:13 PM\n======================\nFind content in the root folder with text like 'sample'\n----------------------\nResult 1:\nid:40ec2412-b1e6-4d86-af8b-4003adeeed46;1.0\nname:test (1390506931762)\ncreated:Jan 23, 2014 1:55:31 PM\n----------------------\nResult 2:\nid:c3e61b61-e5d4-4edf-a3e9-0eac61c693e8;1.0\nname:test (1390507967128)\ncreated:Jan 23, 2014 2:12:47 PM\n----------------------\nResult 3:\nid:bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\nname:test (1390508346539)\ncreated:Jan 23, 2014 2:19:06 PM\n----------------------\nResult 4:\nid:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nname:test (1390508353662)\ncreated:Jan 23, 2014 2:19:13 PM\n----------------------\nResult 5:\nid:4c9b0bda-ca90-4ad8-bf01-28ca6f9072bc;1.0\nname:test (1390508793841)\ncreated:Jan 23, 2014 2:26:33 PM\n======================\nFind active content\n----------------------\nResult 1:\nid:40ec2412-b1e6-4d86-af8b-4003adeeed46;1.0\nname:test (1390506931762)\ncreated:Jan 23, 2014 1:55:31 PM\n----------------------\nResult 2:\nid:c3e61b61-e5d4-4edf-a3e9-0eac61c693e8;1.0\nname:test (1390507967128)\ncreated:Jan 23, 2014 2:12:47 PM\n----------------------\nResult 3:\nid:bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\nname:test (1390508346539)\ncreated:Jan 23, 2014 2:19:06 PM\n----------------------\nResult 4:\nid:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nname:test (1390508353662)\ncreated:Jan 23, 2014 2:19:13 PM\n----------------------\nResult 5:\nid:6d7de742-8604-4e50-8770-931ff81f9aa2;1.0\nname:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0 (1390508459588)\ncreated:Jan 23, 2014 2:20:59 PM\n======================\nFind active content with a product equal to 'SomePortal'\n----------------------\nResult 1:\nid:648660bb-2a0f-4ffc-9200-1aded09255c0;1.0\nname:test (1390508759315)\ncreated:Jan 23, 2014 2:25:59 PM\n======================\nFind content of type sc:whitepaper published between 1/1/2006 and 6/1/2007\n----------------------\nResult 1:\nid:40ec2412-b1e6-4d86-af8b-4003adeeed46;1.0\nname:test (1390506931762)\ncreated:Jan 23, 2014 1:55:31 PM\n----------------------\nResult 2:\nid:c3e61b61-e5d4-4edf-a3e9-0eac61c693e8;1.0\nname:test (1390507967128)\ncreated:Jan 23, 2014 2:12:47 PM\n----------------------\nResult 3:\nid:bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\nname:test (1390508346539)\ncreated:Jan 23, 2014 2:19:06 PM\n----------------------\nResult 4:\nid:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nname:test (1390508353662)\ncreated:Jan 23, 2014 2:19:13 PM\n----------------------\nResult 5:\nid:6d7de742-8604-4e50-8770-931ff81f9aa2;1.0\nname:dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0 (1390508459588)\ncreated:Jan 23, 2014 2:20:59 PM\n</code></pre>"},{"location":"content/tutorial/tutorial/#deleting-content-with-opencmis","title":"Deleting Content with OpenCMIS","text":"<p>Now it is time to clean up after ourselves by deleting content from the repository. The delete logic in the SomeCoCMISDataCleaner class is similar to the search logic except that instead of dumping the results, the CmisObject\u2019s <code>delete()</code> method gets called on every hit that is returned.</p> <pre><code>Session session = getSession();\n\n// execute query\nString queryString = \"select * from sc:doc\";\nItemIterable&lt;QueryResult&gt; results = session.query(queryString, false);\n\n// if we found some rows, create an array of DeleteCML objects      \nif (results.getTotalNumItems() &gt;= 0)\n    System.out.println(\"Found \" + results.getTotalNumItems() + \" objects to delete.\");\n\nfor (QueryResult qResult : results) {\n    PropertyData&lt;?&gt; propData = qResult.getPropertyById(\"cmis:objectId\");\n    String objectId = (String) propData.getFirstValue();\n    CmisObject obj = session.getObject(session.createObjectId(objectId));\n    obj.delete(true);\n    System.out.println(\"Deleted: \" + objectId);\n}\nSystem.out.println(\"Done!\");\n</code></pre> <p>Note that this code deletes every object in the repository of type <code>sc:doc</code> and instances of child types. You would definitely want to \u201cthink twice and cut once\u201d if you were running this code on a production repository, particularly if you were using a broad content type like <code>cm:content</code>.</p> <p>Similar to the other examples, you can compile and run this on the command line by executing the following:</p> <pre><code>mvn exec:java \\\n-Dexec.mainClass=\"com.someco.cmis.examples.SomeCoCMISDataCleaner\" \\\n-Dexec.args=\"admin admin SomeCo\"\n</code></pre> <p>Again, your results will vary based on the content you've created but in my repository, running the code results in the following:</p> <pre><code>Found 8 objects to delete.\nDeleted: 40ec2412-b1e6-4d86-af8b-4003adeeed46;1.0\nDeleted: c3e61b61-e5d4-4edf-a3e9-0eac61c693e8;1.0\nDeleted: bfd4b553-ff58-4d6e-a71b-00a470bd86c9;1.0\nDeleted: dbe2a709-5fd8-453e-9f9d-dff1e4c785d3;1.0\nDeleted: 6d7de742-8604-4e50-8770-931ff81f9aa2;1.0\nDeleted: 12e6f012-1831-4d2a-81f8-d130cd26e968;1.0\nDeleted: 4c9b0bda-ca90-4ad8-bf01-28ca6f9072bc;1.0\nDeleted: 648660bb-2a0f-4ffc-9200-1aded09255c0;1.0\nDone!\n</code></pre> <p>Now you know how to use CMIS, an industry-standard API, to create, relate, query, and delete objects in Alfresco. In fact, the code you've worked with here in Part 3 should work with any CMIS-compliant server (except for the aspect bits).</p> <p>The source code for this tutorial contains some additional CMIS examples that were not covered specifically, so you might want to take a look at those.</p>"},{"location":"content/tutorial/tutorial/#other-topics-to-explore-on-your-own","title":"Other Topics to Explore on Your Own","text":"<p>This tutorial has shown how to extend Alfresco's out-of-the-box content model with your own business-specific content types, how to expose those types, aspects, and properties in Alfresco Share, and how to work with content via OpenCMIS, the Java API for CMIS that is part of Apache Chemistry. I've thrown in a few recommendations that will hopefully save you some time or at least spark some discussion.</p> <p>There are many content model-related topics we didn't talk about that you can explore on your own, like:</p> <ul> <li>Controlling how your properties are indexed</li> <li>Using queries or services to populate constraints</li> <li>Creating custom form controls</li> <li>Hot-deploying content models</li> <li>Using a content modeling tool to create content models and forms through a user interface rather than XML</li> </ul>"},{"location":"content/tutorial/tutorial/#where-to-find-more-information","title":"Where to Find More Information","text":"<ul> <li>The complete source code for these examples is available on GitHub.</li> <li>Official documentation for both Enterprise Edition and Community Edition is available at docs.alfresco.com.</li> <li>The Apache Chemistry Home Page has examples and source code that works with CMIS.</li> <li>See \u201cGetting Started with CMIS\u201d on ecmarchitect.com for a brief introduction to CMIS. The Alfresco CMIS page is also a great resource. And there is now a CMIS book availaible.</li> <li>If you are ready to cover new ground, try another ecmarchitect.com tutorial in the Alfresco Developer Series. The most logical next step is the Developing Custom Actions tutorial.</li> </ul>"},{"location":"maven-sdk/maven-sdk-tutorial/","title":"Alfresco AIO Project - SDK 4.0","text":"<p>This is an All-In-One (AIO) project for Alfresco SDK 4.0.</p> <p>Run with <code>./run.sh build_start</code> or <code>./run.bat build_start</code> and verify that it</p> <ul> <li>Runs Alfresco Content Service (ACS)</li> <li>Runs Alfresco Share</li> <li>Runs Alfresco Search Service (ASS)</li> <li>Runs PostgreSQL database</li> <li>Deploys the JAR assembled modules</li> </ul> <p>All the services of the project are now run as docker containers. The run script offers the next tasks:</p> <ul> <li><code>build_start</code>. Build the whole project, recreate the ACS and Share docker images, start the dockerised environment composed by ACS, Share, ASS and   PostgreSQL and tail the logs of all the containers.</li> <li><code>build_start_it_supported</code>. Build the whole project including dependencies required for IT execution, recreate the ACS and Share docker images, start the   dockerised environment composed by ACS, Share, ASS and PostgreSQL and tail the logs of all the containers.</li> <li><code>start</code>. Start the dockerised environment without building the project and tail the logs of all the containers.</li> <li><code>stop</code>. Stop the dockerised environment.</li> <li><code>purge</code>. Stop the dockerised container and delete all the persistent data (docker volumes).</li> <li><code>tail</code>. Tail the logs of all the containers.</li> <li><code>reload_share</code>. Build the Share module, recreate the Share docker image and restart the Share container.</li> <li><code>reload_acs</code>. Build the ACS module, recreate the ACS docker image and restart the ACS container.</li> <li><code>build_test</code>. Build the whole project, recreate the ACS and Share docker images, start the dockerised environment, execute the integration tests from the  <code>integration-tests</code> module and stop the environment.</li> <li><code>test</code>. Execute the integration tests (the environment must be already started).</li> </ul>"},{"location":"maven-sdk/maven-sdk-tutorial/#few-things-to-notice","title":"Few things to notice","text":"<ul> <li>No parent pom</li> <li>No WAR projects, the jars are included in the custom docker images</li> <li>No runner project - the Alfresco environment is now managed through Docker</li> <li>Standard JAR packaging and layout</li> <li>Works seamlessly with Eclipse and IntelliJ IDEA</li> <li>JRebel for hot reloading, JRebel maven plugin for generating rebel.xml [JRebel integration documentation]</li> <li>AMP as an assembly</li> <li>Persistent test data through restart thanks to the use of Docker volumes for ACS, ASS and database data</li> <li>Integration tests module to execute tests against the final environment (dockerised)</li> <li>Resources loaded from META-INF</li> <li>Web Fragment (this includes a sample servlet configured via web fragment)</li> </ul>"},{"location":"maven-sdk/maven-sdk-tutorial/#todo","title":"TODO","text":"<ul> <li>Abstract assembly into a dependency so we don't have to ship the assembly in the archetype</li> <li>Functional/remote unit tests</li> </ul>"},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/","title":"Index","text":""},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#if-you-are-overriding-out-of-the-box-alfresco-web-scripts-put-these-files-here","title":"If you are overriding out-of-the-box Alfresco web scripts, put these files here","text":""},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#in-the-correct-orgalfresco-package","title":"in the correct org.alfresco... package.","text":""},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#if-you-are-defining-a-new-custom-web-script-add-it-under","title":"If you are defining a new custom web script, add it under","text":""},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#resourcesalfrescoweb-extensionsite-webscriptsyour-domain-path","title":"resources/alfresco/web-extension/site-webscripts/{your domain path}.","text":""},{"location":"maven-sdk/maven-sdk-tutorial/maven-sdk-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#_1","title":"Index","text":""},{"location":"maven-sdk/tutorial/tutorial/","title":"Getting Started with the Alfresco Maven SDK","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"maven-sdk/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"maven-sdk/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>This tutorial is for people who have been handed a project that requires you to customize Alfresco in some way and you're thinking, \"Now what?\". By the end, you'll know:</p> <ul> <li>How to create a new Alfresco project using the Alfresco Maven SDK</li> <li>What goes where depending on the type of customization you are doing</li> <li>How to create and run tests</li> <li>How to produce an artifact suitable for deploying to your environment or sharing with the community.</li> </ul> <p>This tutorial should be considered a pre-requisite before moving on to more detailed tutorials on things like content modeling, custom actions, behaviors, advanced workflows, or web scripts.</p> <p>Before we jump in, a quick disclaimer: There are almost always multiple routes to a given solution. In this tutorial, I'm going to take you through the most direct, safest route that will get you up-and-going quickly. Later, if you decide you want to change things up or explore other paths, that's great.</p>"},{"location":"maven-sdk/tutorial/tutorial/#important-concepts","title":"Important Concepts","text":"<p>You don't need to know much about Maven, Alfresco, or why this SDK exists before jumping in but it kind of helps set the scene, so let me take you through those three concepts quickly.</p>"},{"location":"maven-sdk/tutorial/tutorial/#apache-maven","title":"Apache Maven","text":"<p>Apache Maven is essentially a build management tool. It has many features, but the primary time-saving feature is its ability to understand the dependencies your project relies on (and the dependencies of those dependencies and so on). Maven can then retrieve and cache those dependencies for you. If you've ever spent time chasing down JAR file after JAR file, the value of such a tool will be immediately obvious.</p>"},{"location":"maven-sdk/tutorial/tutorial/#alfresco-module-package-amp","title":"Alfresco Module Package (AMP)","text":"<p>An AMP is a ZIP file with a folder structure that follows a specific convention. AMP files are used to make it easy to share and deploy customizations to the Alfresco platform. If your project is about making customizations to the repository tier (the /alfresco web application) you will create a \"repo\" AMP. If your project is about making customizations to the Share tier (the /share web application) you will create a \"share\" AMP. It is quite common for a project to require changes in both tiers, so in that case you will create two AMPs.</p>"},{"location":"maven-sdk/tutorial/tutorial/#alfresco-maven-sdk","title":"Alfresco Maven SDK","text":"<p>The goal of the Maven-based SDK is to make it extremely easy for you to get started with Alfresco development. It consists of a project template (an   \"archetype\" in Maven parlance) and some built-in smarts that make Maven   understand how to create AMPs and deploy them to Alfresco.</p> <p>If you are writing your own custom application that is separate from the Alfresco and Share WARs you don't need the Alfresco Maven SDK. But if you intend to write code that runs within either of those web applications, the Alfresco Maven SDK is where you need to start.</p> <p>A quick word about versions. This tutorial assumes you are using Alfresco Maven SDK 4.12 which works with Alfresco 25.1. If you are using a version of Alfresco older than 7.0 but greater than or equal to 6.2, you can use version 4.1 of the SDK. If you are using a version of Alfresco older than 6.2 but greater than or equal to 6.0.1, you can use version 4.0 of the SDK. If you are using a version of Alfresco older than 6.0.1 but greater than or equal to 4.2.7, you can use version 3.0.1 of the SDK. The biggest difference between 4.0 and 3.0.1 is the use of Docker instead of an embedded Tomcat and in-memory database.</p> <p>If you are using a version of Alfresco newer than 4.0 but older than 4.2.7 you can use version 2.x of the SDK. You can use the 2.x version of the SDK with this and other tutorials if you must, but you'll almost surely be affected by some differences. If you are using a version of Alfresco older than 4.x you'll have to use the old Ant-based SDK. The rest of this document won't apply to you.</p> <p>Now you have a high-level understanding of Apache Maven, AMPs, and the Alfresco Maven SDK. It's time to see them in action.</p>"},{"location":"maven-sdk/tutorial/tutorial/#your-first-project","title":"Your First Project","text":"<p>Let me show you how easy it can be to get started with Alfresco development using the Alfresco Maven SDK. Before I start I'm going to assume you have the following installed:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 24.0.2</li> <li>Apache Maven 3.9.9</li> <li>Alfresco Maven SDK 4.12 (No download necessary)</li> <li>Docker 28.3.0</li> <li>Docker Compose 2.38.1</li> </ul> <p>You don't need to download anything else. Seriously. Not even Alfresco.</p> <p>Here are the steps:</p> <ol> <li> <p>Create an empty directory. It doesn't matter where it is or what you call it. I'll refer to it as $TUTORIAL_HOME. We're going to be creating some additional directories in here shortly.</p> </li> <li> <p>Now let's create a new project. For now, let's assume you want to create something that you will deploy to the Alfresco repository tier such as a custom content model, some custom rule actions, a new set of web scripts, or some Activiti business processes. It doesn't really matter. To create the new project, change directories to $TUTORIAL_HOME, then run this command:</p> <pre><code>mvn archetype:generate -Dfilter=org.alfresco:\n</code></pre> </li> <li> <p>Maven will do some work and eventually ask you to choose an \"archetype\". You're basically selecting from a library of template projects. There are several available:</p> <pre><code>1: remote -&gt; org.alfresco.maven.archetype:activiti-jar-archetype\n2: remote -&gt; org.alfresco.maven.archetype:alfresco-allinone-archetype\n3: remote -&gt; org.alfresco.maven.archetype:alfresco-amp-archetype\n4: remote -&gt; org.alfresco.maven.archetype:alfresco-platform-jar-archetype\n5: remote -&gt; org.alfresco.maven.archetype:alfresco-share-jar-archetype\n6: remote -&gt; org.alfresco.maven.archetype:share-amp-archetype\n</code></pre> <p>Even though our goal is to create an AMP that can be deployed to Alfresco, neither of the two options with \"amp\" in their names are what we want. Those are for old versions of the SDK. Instead, we want to choose \"alfresco-allinone-archetype\" so type the number that matches that archetype (2 in this example) and hit enter.</p> </li> <li> <p>If Maven asks you to specify the version of the archetype you want, choose 4.12.</p> </li> <li> <p>Maven now asks for a groupId. You should be thinking \"Java package\". My examples always assume I am working at a fictitious company called SomeCo, so I will specify \"com.someco\" here. Specify what makes sense in your case and hit enter.</p> </li> <li> <p>Next is the artifactId. You can think of this as what you want your project to be called. It will also be used as part of the ID for your AMPs so make it something unique. I'm going to specify \"maven-sdk-tutorial\" for mine followed by enter.</p> </li> <li> <p>Take the default package, which will match your groupId.</p> </li> <li> <p>At this point Maven will show you the values you entered plus some others that were defaulted and ask you to confirm your choices. If you want to change something you can specify \"N\" and then make changes or you can enter \"Y\" to continue. You can always change these values later if needed, so specify \"Y\" followed by enter.</p> </li> </ol> <p>Now Maven is going to do some work. When it is done you will have:</p> <ul> <li>A project structure organized exactly how it needs to be to support your Alfresco development</li> <li>Default configuration files</li> <li>Minimal Java code and accompanying unit and integration tests just to verify that everything works</li> <li>Configuration required to run a local instance of Alfresco suitable for testing</li> <li>A default POM (Project Object Model) XML file that tells Maven what your project depends on</li> </ul> <p>The SDK defaults to a fairly recent Alfresco version. If you need to run on a different version, you might want to edit maven-sdk-tutorial/pom.xml and change it before you proceed.</p>"},{"location":"maven-sdk/tutorial/tutorial/#lets-run-it","title":"Let's Run It","text":"<p>You haven't downloaded anything. You haven't edited anything. All you've done is tell Maven to create a project based on a template. But the cool thing is this: Your project is runnable right now.</p> <p>Try this:</p> <pre><code>cd maven-sdk-tutorial\n./run.sh build_start\n</code></pre> <p>If you get a permissions error, run <code>chmod u+x ./run.sh</code> and try again. If you are on Windows, use run.bat instead.</p> <p>If you watch the output, you'll see that Maven is downloading everything it needs to compile the project, creating an AMP, downloading Docker images from Docker Hub, deploying the AMP to the Alfresco WAR, defining an Alfresco Content Services Docker image, deploying the Share AMP to the Share WAR, defining an Alfresco Share Docker image, and using Docker Compose to start up Alfresco, Share, PostgreSQL, and Alfresco Search Services. Eventually you'll see:</p> <pre><code>2018-04-13 13:23:07,796  INFO  [repo.module.ModuleServiceImpl] [localhost-startStop-1] Found 3 module package(s).\n2018-04-13 13:23:07,807  INFO  [repo.module.ModuleServiceImpl] [localhost-startStop-1] Installing module 'maven-sdk-tutorial-platform' version 1.0-SNAPSHOT.\nDemoComponent has been executed\n</code></pre> <p>Which means that the module your project generated was recognized by the Alfresco server.</p> <p>Once you see:</p> <pre><code>INFO: Starting ProtocolHandler [\"http-bio-8080\"]\nINFO: Server startup in [XXXXX] milliseconds\n</code></pre> <p>You should be able to go to:</p> <pre><code>http://localhost:8080/alfresco\n</code></pre> <p>And you will see the \"Welcome to Alfresco' page. If you want to verify that you can log in, go to the Alfresco web script console, which is:</p> <pre><code>http://localhost:8080/alfresco/s/index\n</code></pre> <p>Log in using \"admin\" and \"admin\" to see the list of deployed web scripts.</p> <p>Because you chose to base your project off of the \"all-in-one\" archetype, not only did you get the Alfresco WAR with your sample AMP deployed, but also the Share WAR is up-and-running. That means you can go to:</p> <pre><code>http://localhost:8180/share\n</code></pre> <p>And log in to navigate the repository, leverage the admin console, and so on.</p> <p>When you are done poking around, go back to the window where you ran your Maven command and type ctrl-c to stop tailing the logs. Then, do <code>run.sh stop</code> to shutdown all of the Docker containers.</p>"},{"location":"maven-sdk/tutorial/tutorial/#what-just-happened","title":"What Just Happened?","text":"<p>If you look at the run script, you'll see that \"build_start\" cleans the project output, builds the Alfresco and Share extensions, sets up Docker named volumes, then tells Docker Compose to bring up the Docker containers.</p> <p>The Docker Compose file lives in the Docker directory in the root of the project.</p> <p>Once it started up, you were able to log in to both the repository tier admin console and web scripts console running in the Alfresco WAR as well as Share running in the Share WAR.</p> <p>If you go look in the target directory under \"maven-sdk-tutorial-platform\" you'll see a JAR file called \"maven-sdk-tutorial-platform-1.0-SNAPSHOT.jar\" that was produced by the build and subsequently deployed to the Alfresco WAR.</p> <p>Similarly, in the target directory under \"maven-sdk-tutorial-share\" you'll see that the build also created a \"Share tier\" JAR called \"maven-sdk-tutorial-share-1.0-SNAPSHOT.jar\".</p> <p>If you do a <code>docker ps -a|grep maven</code> you'll see the list of Docker containers that the SDK generated for you.</p>"},{"location":"maven-sdk/tutorial/tutorial/#jars-versus-amps","title":"JARs versus AMPs","text":"<p>You can deploy Alfresco projects as JAR files only in a limited number of very simple cases. More often, your changes will need to be packaged as an Alfresco Module Package (AMP) file. Because AMPs must still be used most of the time, it simplifies things to use AMPs all of the time and to never use JARs. So, it's a good idea to just get in the mindset that you've just built your last Alfresco modules as JAR files and from now on it will be all AMPs, all the time.</p> <p>To change your project to produce AMPs, edit the pom.xml. Search for the \"maven-assembly-plugin\" and uncomment it. Now when you run <code>mvn install -DskipTests</code> you'll see that an AMP gets produced in the platform and share target directories.</p> <p>These AMP files are what you would give to your IT team if you were ready to deploy your project to a real Alfresco server.</p>"},{"location":"maven-sdk/tutorial/tutorial/#other-commands-for-invoking-the-build","title":"Other Commands for Invoking the Build","text":"<p>You may not always need to start up the Alfresco server and leave it running. If you just want to build the project, run the unit tests, and package the AMP, you can run:</p> <pre><code>mvn package\n</code></pre> <p>If you want to install the AMP into your local Maven repository you can run:</p> <pre><code>mvn install -DskipTests\n</code></pre> <p>In 3.0.1 you may see some stack traces after running <code>mvn install</code>. If you scroll up a bit, you'll see that the tests ran successfully. The stack traces are a known issue related to Tomcat shutdown hooks and can safely be ignored.</p> <p>In SDK 4.x, the containers need to be running before executing the tests. We'll cover that in the next section.</p>"},{"location":"maven-sdk/tutorial/tutorial/#unit-integration-tests","title":"Unit &amp; Integration Tests","text":"<p>You may have noticed that the default project includes a simple unit test in the platform module and some integration tests in the integration-tests module. By default, Maven will automatically run the unit tests and integration tests in your project unless you include <code>-DskipTests</code>.</p> <p>It's a good practice to make sure that your project always includes unit tests and to run them every time you build. Many organizations run CI (Continuous Integration) tools that depend on this being the case. Running <code>mvn test</code> will compile and run the project's unit tests.</p> <p>To run integration tests using the SDK, first start up the server using <code>run.sh build_start</code>. Once it is running, do <code>run.sh test</code> to run the integration tests. You'll see something like:</p> <pre><code>-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.someco.platformsample.DemoComponentIT\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.443 sec - in com.someco.platformsample.DemoComponentIT\nRunning com.someco.platformsample.CustomContentModelIT\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.113 sec - in com.someco.platformsample.CustomContentModelIT\nRunning com.someco.platformsample.HelloWorldWebScriptIT\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.036 sec - in com.someco.platformsample.HelloWorldWebScriptIT\n\nResults :\n\nTests run: 5, Failures: 0, Errors: 0, Skipped: 0\n</code></pre> <p>When creating your own tests, remember that Unit Tests will not depend on any other services, including a running repository, whereas Integration Tests require the Docker containers to be running before they can be executed.</p> <p>You can greatly speed up your test-fix cycle by using something like JRebel. With JRebel, after you launch the Docker containers, you can make changes to your integration test classes, hot-deploy them to the running server, then re-run your tests, all without having to restart.</p>"},{"location":"maven-sdk/tutorial/tutorial/#logging","title":"Logging","text":"<p>In the log4j.properties file that exists in the module directory, the log4j.properties file includes</p> <pre><code>log4j.logger.org.alfresco.demoamp.DemoComponent=${module.log.level}\n</code></pre> <p>You'll probably want to replace that with settings that match your package structure.</p>"},{"location":"maven-sdk/tutorial/tutorial/#cleaning-up","title":"Cleaning Up","text":"<p>If you want to delete all of the compiled artifacts that Maven created and start fresh you can run:</p> <pre><code>mvn clean\n</code></pre> <p>If you also want to delete the Docker containers and volumes that were created by running the test Alfresco server, you can run <code>./run.sh purge</code>.</p> <p>Now you know how to create a new Alfresco project from an archetype and the fundamentals of running builds with and without tests. Next up, you'll learn about working with your new project in an IDE and you'll get a tour of the default project structure.</p>"},{"location":"maven-sdk/tutorial/tutorial/#working-with-your-project-in-an-ide","title":"Working With Your Project in an IDE","text":"<p>Although it isn't required, most people prefer to work in an IDE when developing Alfresco customizations. Any IDE will do, but my favorite is IntelliJ IDEA. Its Maven support seems to be more seamless than what is currently in Eclipse. IntelliJ users can just open or import the project and go.</p> <p>Another popular choice is Eclipse. It has Maven support, but it may be less obvious how to work with your Alfresco project, so let's see how that works.</p> <p>I'll be using the IntelliJ IDEA.</p> <p>To open the project we created earlier in IntelliJ, do this:</p> <ol> <li> <p>Select File, Open, and navigate to the folder $tutorial (maven-sdk-tutorial or project name). Click Next.</p> <p></p> </li> <li> <p>Specify the directory that contains the maven-sdk-tutorial folder. </p> </li> <li>It might ask you to trust the window depending on your setting.  </li> </ol> <p>After clicking Trust Window, the project is imported into your IntelliJ workspace.</p>"},{"location":"maven-sdk/tutorial/tutorial/#understanding-the-project-structure","title":"Understanding the Project Structure","text":"<p>The folder structure of your project is a bit more pleasant to explore in your IDE. Let's see what we've got.</p> <p>When you created the project from the all-in-one archetype, you ended up with a project called \"maven-sdk-tutorial\" that has five modules:</p> <ol> <li>maven-sdk-tutorial-platform: This is the module that holds your \"repository tier\" customizations and produces an AMP that gets installed into the Alfresco WAR.</li> <li>maven-sdk-tutorial-share: This is the module that holds your \"Share tier\" customizations and produces an AMP that gets installed in the Share WAR.</li> <li>maven-sdk-integration-tests: This module is for integration tests that run in the embedded Tomcat server.</li> <li>maven-sdk-tutorial-platform-docker: This is the module that defines an Alfresco Content Services Docker image specific to your project. It is based on the Alfresco packaged Docker image and adds your platform extension.</li> <li>maven-sdk-tutorial-share-docker: This is the module that defines an Alfresco Share Docker image specific to your project. It is based on the Alfresco packaged Docker image and adds your Share extension.</li> </ol> <p>Inside the project directory, you'll see:</p> <ul> <li>pom.xml In the root of the project directory you'll see pom.xml. This tells Maven everything it needs to know about your project. Remember those settings you specified when you created the project from the archetype? You can make changes to those settings here. For example, version 4.12 of the archetype assumes you are working with Alfresco Community Edition 25.1.0. If you wanted to work with a different version, you would simply change those properties and then tell Maven to update and it will take care of the rest. Check the Alfresco docs to make sure the version of Alfresco you are trying to use is compatible with the version of the SDK you are using.</li> </ul> <p>Now look at \"maven-sdk-tutorial-platform\". In it, you'll find:</p> <ul> <li> <p>src/main/java This is where you should create your own packages to organize your Java code. Things like custom action executer classes, custom behaviors, Java-based controllers for web scripts go here. If you don't know what those are, don't worry, there are tutorials available here. These files will ultimately be placed in a JAR. When the AMP is installed into the Alfresco WAR, the JAR will be placed under WEB-INF/lib.</p> </li> <li> <p>src/test Everything under src/test is about running unit tests. The unit tests themselves go in src/test/java. Any resources those classes need go in src/test/resources. In src/test/properties/local you'll see an alfresco-global.properties file. If you are already know something about Alfresco you know that this is used to configure Alfresco. In this case, it is only used when running the embedded Alfresco server for testing purposes.</p> </li> <li> <p>src/main/assembly Everything in this directory tells Maven how to construct an AMP file.</p> </li> <li> <p>src/main/resources Everything else goes somewhere in this part of the project. The structure of an AMP is well-documented so I don't want to duplicate that here. Let me just point out the highlights:</p> <ul> <li>The alfresco/module/maven-sdk-tutorial-platform directory is the heart of the AMP. This is where you place Spring config XML files, content model XML files, and user interface configuration. As you'll see in later tutorials, I prefer separate sub-directories for each of these things.</li> <li>If your module includes web scripts, those don't reside under the module directory. Instead, those go under alfresco/extension/templates/webscripts.</li> <li>Your module may include client-side resources that need to be deployed to the root of the web application. Those go in META-INF/resources in directories such as css, jsp, scripts, and images.</li> </ul> </li> </ul> <p>Going back up a level, take a look at \"maven-sdk-tutorial-share\". It has a similar structure as the platform module, but instead of an \"extension\" directory under \"src/main/resources/alfresco\", a Share project has a \"web-extension\" directory where you'll find Share-specific directories like \"site-data\" and \"site-webscripts\".</p> <p>If you are already familiar with Share customizations, you may be wondering where to find \"share-config-custom.xml\". It is in \"src/main/resources/META-INF\".</p> <p>You should check this entire project, starting with the \"maven-sdk-tutorial\" directory, into source code control. You will want to configure your source code control client to ignore the target directories. If you are running IntelliJ, check in the IML files but do not check in the .idea directory or its children.</p>"},{"location":"maven-sdk/tutorial/tutorial/#other-types-of-archetypes","title":"Other Types of Archetypes","text":"<p>In this and subsequent tutorials I am using the \"all-in-one\" archetype because most of these tutorials need to produce both a repository tier AMP and a Share tier AMP. It is often convenient to do that in a single project.</p> <p>If you know you are going to create only one or the other, you can specify a different archetype. When generating your project from an archetype, choose \"alfresco-platform-archetype\" to create a project that will produce only a repository tier AMP. Choose \"share-amp-archetype\" to create a project that will produce only a Share tier AMP.</p> <p>The nice thing about using one of these tier-specific archetypes is that it is a smaller, more simplified project structure. One downside is that these projects lack the \"integration-tests\" module. You can add it, but it won't be there initially.</p> <p>Even when developing both a repository tier AMP and a Share tier AMP, some developers like having two independent projects that can be versioned independently.</p>"},{"location":"maven-sdk/tutorial/tutorial/#other-topics-to-explore-on-your-own","title":"Other Topics to Explore on Your Own","text":"<p>You now know how to use the Alfresco Maven SDK to create projects for both your Alfresco repository customizations and your Alfresco Share customizations. If you are new to Alfresco development, I hope you agree it is really easy to bootstrap a project to get started.</p> <p>There are many topics that weren't covered in this tutorial. I'll leave you to explore those on your own. Here are a few:</p> <ul> <li>The Alfresco Maven SDK supports both Community Edition and Enterprise Edition. If you need help accessing the Enterprise Edition artifacts, contact Alfresco Support.</li> <li>The SDK can pull in other AMPs that your project might depend on so that when the embedded Tomcat server runs you'll have everything you need for integration testing. You'll see examples of this in later tutorials.</li> </ul>"},{"location":"maven-sdk/tutorial/tutorial/#where-to-find-more-information","title":"Where to Find More Information","text":"<ul> <li>The official documentation on the Alfresco Maven SDK is on  https://github.com/Alfresco/alfresco-sdk.</li> <li>The Alfresco Developer Series on ECM Architect has free tutorials on custom content models, actions, behaviors, workflows, and web scripts.</li> </ul>"},{"location":"tutorial-common/readme/","title":"About the tutorial-common folder","text":"<p>This folder contains resources that are used to convert the tutorial markdown into HTML. They don't have anything to do with learning about Alfresco development, so if that is your focus, ignore this directory completely.</p> <p>The latest versions of the tutorials already exist as html on ECM Architect.</p> <p>If you want to generate the HTML yourself keep reading.</p>"},{"location":"tutorial-common/readme/#pre-requisites","title":"Pre-requisites","text":"<p>You'll need to install Pandoc. Instructions are here.</p>"},{"location":"tutorial-common/readme/#steps","title":"Steps","text":"<p>Assuming you have checked out the entire alfresco-developer-series project from GitHub, you should just be able to cd to the directory containing the markdown you want to transform, and then run:</p> <pre><code>../../tutorial-common/gen.sh\n</code></pre> <p>That will create an HTML file in the current directory.</p> <p>If you want to alter the header, footer, CSS, or HTML page template, those all live in tutorial-common.</p>"},{"location":"webscripts/tutorial/tutorial/","title":"Introduction to the Web Script Framework","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"webscripts/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"webscripts/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>This tutorial is an introduction to the Alfresco Web Script Framework. It continues the \u201cSomeCo Whitepapers\u201d example started in previous tutorials. Here's what you have seen in the previous tutorials:</p> <ul> <li>The custom content types tutorial extended the out-of-the-box content model so that SomeCo could store custom metadata about one of their document types, whitepapers.</li> <li>The custom actions tutorial showed how to create rule actions and UI actions. The tutorial created a UI action called \"Set Web Flag\" that toggles a flag used to determine whether or not the whitepaper should be shown on the web site.</li> <li>The custom behavior tutorial showed how to create business logic associated with a type or aspect. In that tutorial, a custom content model defines a new \"rateable\" aspect and a custom behavior is bound to that aspect that knows how to calculate the average user rating for a given piece of content. The calculation gets triggered every time a rating is created or deleted. The tutorial used unit tests and a quick-and-dirty web script to create ratings.</li> </ul> <p>SomeCo is now ready to move to the next step: Exposing the rating functionality on the Alfresco back-end as an API to the front-end. In their infinite wisdom, the team at SomeCo realizes that Alfresco's web script framework provides a nice way to expose a lightweight, RESTful API for working with whitepapers and ratings. The API can be used by SomeCo's front-end web site developers to retrieve whitepapers and let end-users rate those whitepapers.</p> <p>In this tutorial, you'll learn how to roll your own REST API on top of Alfresco. The API will be used for:</p> <ul> <li>retrieving a list of whitepapers,</li> <li>retrieving the average rating for a given whitepaper,</li> <li>retrieving a specific rating,</li> <li>posting a new rating for a whitepaper, and</li> <li>deleting all ratings for a given whitepaper.</li> </ul> <p>As you'll learn shortly, web scripts can be written in either server-side JavaScript or Java. This tutorial will use JavaScript for most of the controller logic but you'll see how to use Java as well.</p> <p>The complete source code that accompanies this tutorial is available at GitHub.</p> <p>Sound decent? Okay, let's get started.</p>"},{"location":"webscripts/tutorial/tutorial/#what-is-the-web-script-framework","title":"What is the Web Script Framework?","text":"<p>In today's everything-as-a-service environment, the CMS is increasingly seen as a black-box component. Other systems, both producers and consumers of content, need to interact with the CMS and other components via REST.</p> <p>Alfresco provides an industry-standard, RESTful API for working with the repository called CMIS. Starting in release 5.2, they added a new proprietary RESTful API. But there are times when these APIs don't do everything you need to do. In that case, a great alternative is to create your own API using the web script framework.</p> <p>Think of a web script as a chunk of code that is mapped to a human-readable URL. So, for example, a URL that returns expense reports pending approval might look like:</p> <pre><code>/alfresco/service/expenses/pending\n</code></pre> <p>while a URL that returns expenses pending approval for a specific user might look like:</p> <pre><code>/alfresco/service/expenses/pending/jpotts\n</code></pre> <p>In the URL above, you could read the \u201cjpotts\u201d component of the URL as an implied argument. A more explicit way to provide an argument would be like:</p> <pre><code>/alfresco/service/expenses/pending?user=jpotts\n</code></pre> <p>Or maybe \u201cpending\u201d is an argument as well which tells the web script what status of expense reports to return. The point is that the structure of the URL and how (and if) your URL includes arguments is completely up to you.</p> <p>The response the URL returns is also up to you. Your response might return HTML, XML, JSON, or even a JSR-168 Portlet.</p> <p>The web script framework makes it easy to follow the Model-View-Controller (MVC) pattern, although it isn't required. The controller is server-side JavaScript, a Java class, or both. The controller handles the request, performs any business logic that is needed, populates the model with data, and then forwards the request to the view. The view is a FreeMarker template responsible for constructing a response in the appropriate format. The model is a data structure passed between the controller and the view.</p> <p>The mapping of URL to controller is done through an XML descriptor which is responsible for declaring the URL pattern, whether the script requires a transaction or not, and the authentication requirements for the script. The descriptor optionally describes arguments that can be passed to the script as well as the response formats that are available.</p> <p>The response formats are mapped to FreeMarker templates through naming convention. So, for example, the FreeMarker template that returns expenses as HTML would be named with an extension of \u201chtml\u201d while the one that returns XML would be named with an extension of \u201cxml\u201d.</p> <p>The descriptor, the server-side JavaScript controller, and the FreeMarker templates that collectively make up a web script can reside either in the Alfresco content repository or on the file system. If a web script controller is written in Java, the class must reside somewhere on the classpath.</p> <p>With these very basic building blocks you can build a lot of cool stuff. For example, you can use web scripts to expose the Alfresco content repository through a RESTful API to:</p> <ul> <li>Enable a front-end web application written in any language that can talk HTTP to retrieve repository data in XML, JSON, or any other format or to persist data to the repository;</li> <li>Populate JSR-168 portlets;</li> <li>Capture user-contributed content/data;</li> <li>Create ATOM or RSS feeds for repository content or business process data; and</li> <li>Respond to requests for data from the Alfresco Share front-end.</li> </ul> <p>The last thing to mention is that web scripts are executed in a \u201cweb script runtime\u201d. There are three runtimes available out-of-the-box:</p> <ol> <li>The servlet runtime executes all web scripts requested via HTTP/S.</li> <li>The JSF runtime allows JSF components to execute scripts.</li> <li>The JSR-168 runtime allows portlets to invoke web scripts directly.</li> </ol> <p>You can write your own runtime if these don't meet your needs. Alfresco may add more in the future. This tutorial focuses exclusively on the servlet runtime.</p>"},{"location":"webscripts/tutorial/tutorial/#your-first-web-script","title":"Your First Web Script","text":"<p>Let's walk through some examples. You're going to start with a very simple \"Hello World\" web script. After that, the examples will get progressively more complex until, at the end, you will have a REST-based interface for creating, reading, and deleting SomeCo whitepaper ratings.</p>"},{"location":"webscripts/tutorial/tutorial/#hello-world-example","title":"Hello World Example","text":"<p>Let's implement the most basic web script possible: A \"Hello World\" script that echoes back an argument. You'll need one descriptor and one FreeMarker template. Do the following:</p> <ol> <li>Log in to Alfresco Share as an administrator.</li> <li>In the Repository, navigate to /Company Home/Data Dictionary/Web Scripts.</li> <li> <p>Create a file called helloworld.get.desc.xml with the following     content:</p> <pre><code>&lt;webscript&gt;\n    &lt;shortname&gt;Hello World&lt;/shortname&gt;\n    &lt;description&gt;Hello world web script&lt;/description&gt;\n    &lt;url&gt;/someco/helloworld?name={nameArgument}&lt;/url&gt;\n&lt;/webscript&gt;\n</code></pre> </li> <li> <p>Create a file called helloworld.get.html.ftl with the following     content:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;Hello, ${args.name}!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Go to http://localhost:8080/alfresco/service/index and press the     \"Refresh Web Scripts\" button. If you then click the \u201cList Web Scripts\u201d link     you should be able to find the web script you just defined.</p> </li> <li> <p>Now go to http://localhost:8080/alfresco/service/someco/helloworld?name=Jeff. You     should see:</p> <pre><code>Hello, Jeff!\n</code></pre> <p>Notice that the URL starts with \"/alfresco/service\" but the descriptor you created in step 3 defines the URL to be \"/someco/helloworld\". When you are invoking web scripts running in Alfresco over HTTP/S, the URL will always start with \"/[alfresco web context]/service\". You may also see the \"service\" part shortened to \"s\".</p> </li> </ol> <p>A few things to note. First, notice the file names include \u201cget\u201d. That's the HTTP method used to call the URL. In later examples you'll see how to use POST and DELETE. By differentiating on the HTTP method, you can have multiple controllers for the same \u201cservice\u201d depending on which method is used to call the service.</p> <p>The second thing to notice is that there is only one argument being passed in. You can have as many as you want. Just remember that descriptors must be valid XML which means ampersands must be escaped. So the proper way to define a URL with multiple arguments is:</p> <pre><code>&lt;url&gt;/someco/helloworld?name={nameArgument}&amp;amp;secondArg={anotherArg}&lt;/url&gt;\n</code></pre> <p>You can also signify optional parameters by adding a question mark, like this:</p> <pre><code>&lt;url&gt;/someco/helloworld?name={nameArgument}&amp;amp;secondArg={anotherArg?}&lt;/url&gt;\n</code></pre> <p>Third, notice that this web script consists only of a descriptor and a FreeMarker template. It's got a view but not a controller. The web script still ran because controllers are optional.</p> <p>Most web scripts are going to use a controller, though, so go ahead and add one.</p> <ol> <li> <p>Create a file called helloworld.get.js with the following content:</p> <pre><code>model.foo = \"bar\";\n</code></pre> </li> <li> <p>Update your helloworld.get.html.ftl file with the following content:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;Hello, ${args.name}!&lt;/p&gt;\n&lt;p&gt;Foo: ${foo}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Web scripts with controllers that are being run out of the Data Dictionary     require a security context. If you were to try to run this web script now     you'd see an Error 500 to that effect. To fix this, modify your descriptor     to add an authentication element, like this:</p> <pre><code>&lt;webscript&gt;\n    &lt;shortname&gt;Hello World&lt;/shortname&gt;\n    &lt;description&gt;Hello world web script&lt;/description&gt;\n    &lt;url&gt;/someco/helloworld?name={nameArgument}&lt;/url&gt;\n    &lt;authentication&gt;guest&lt;/authentication&gt;\n&lt;/webscript&gt;\n</code></pre> </li> <li> <p>Go to http://localhost:8080/alfresco/service/index and press the     \"Refresh Web Scripts\" button. This is required because you added a     controller that the web script run-time didn't know about.</p> </li> <li> <p>Now go to your web browser and enter the same URL from the first example     which was http://localhost:8080/alfresco/service/someco/helloworld?name=Jeff. You     should see:</p> <pre><code>Hello, Jeff!\n\nFoo: bar\n</code></pre> <p>If you enter this URL in the same browser as you used to refresh the web scripts, it will run successfully because you already have a session established as an administrator. If you open a new browser window and enter the URL you will get challenged with an authentication dialog. Because you modified the descriptor to run as guest or higher, you can avoid the dialog by appending <code>&amp;guest=true</code> to the end of the web script URL.</p> </li> </ol> <p>The web script framework executed the controller. The controller populated the model with a variable called \"foo\". The web script framework then passed the model on to the view, implemented by the FreeMarker template. The view can access any variables that are placed in the model. In this case, it output the value of <code>foo</code>. It also has access to the arguments passed to the web script.</p> <p>The controller can do anything the Alfresco JavaScript API can do. In this case, the controller didn't leverage the JavaScript API at all\u2014it just put some data into the \u201cmodel\u201d object which was then read by the FreeMarker template. In subsequent examples the controller will have more work to do. Later, you'll see how to use Java instead of JavaScript for the controller.</p>"},{"location":"webscripts/tutorial/tutorial/#deploying-web-scripts-to-the-repository-versus-deploying-to-the-classpath","title":"Deploying web scripts to the repository versus deploying to the classpath","text":"<p>In this quick example you created the descriptor, controller, and view directly in the Alfresco repository through the Alfresco Share user interface. Most of the time, though, you'll be creating several web scripts that will be part of a larger project. Uploading all of those files to an Alfresco production environment leaves an opportunity for error. So, for the rest of the tutorial you'll be deploying your web scripts to the classpath on the file system.</p> <p>The advantage of using the file system is that the web scripts that make up your solution can be deployed alongside your other extensions without requiring anyone to manually upload them to the repository. The disadvantage is that some changes may require a server restart.</p> <p>If the same web scripts are defined in the repository as well as the classpath, the files in the repository take precedence over the files on the classpath. The Alfresco wiki documents the search order for web scripts (See \u201cWhere to find more information\u201d at the end of this tutorial for a list of references).</p>"},{"location":"webscripts/tutorial/tutorial/#using-the-web-scripts-console","title":"Using the web scripts console","text":"<p>As you just saw when you refreshed the list of web scripts, Alfresco comes with a tool for listing and reloading web script definitions. To get to the tool, go to http://localhost:8080/alfresco/service/index. You'll see links that let you browse the list of deployed web scripts. This is a handy debugging tool and it also helps you figure out what web scripts are available out-of-the-box.</p> <p>You have seen how to create a very simple web script using files created in a text editor or directly in the Alfresco Share user interface. Let's talk about the tools and the project organization next.</p>"},{"location":"webscripts/tutorial/tutorial/#setup","title":"Setup","text":"<p>Before getting too far down the road, let me tell you about the tools you'll need and then give you a description of the project organization.</p>"},{"location":"webscripts/tutorial/tutorial/#tools","title":"Tools","text":"<p>Here is what I am using on my machine:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 11.0.2</li> <li>Apache Maven 3.8.1</li> <li>Alfresco Maven SDK 4.2 (No download necessary)</li> <li>Docker 20.10.6</li> <li>Docker Compose 1.29.1</li> </ul> <p>By default, when you create an Alfresco project using the Alfresco Maven SDK the project will be configured to depend on the latest stable Alfresco Community Edition build.</p> <p>An IDE is optional. Most people working with Alfresco use IntelliJ, Eclipse or something similar.</p>"},{"location":"webscripts/tutorial/tutorial/#project-organization","title":"Project Organization","text":"<p>You just saw that web scripts can be created by creating or uploading files to the Alfresco repository. For the rest of these examples, though, you'll create a project that will package the web scripts as an AMP (Alfresco Module Package). This is the recommended way to distribute your Alfresco customizations. It's a lot less error-prone than handing a bunch of files to someone and asking them to upload them to the proper place in the repository.</p> <p>I am not going to spend much time talking about how the Alfresco Maven SDK works. If you aren't already familiar with it, you may want to read the Getting Started with the Alfresco Maven SDK tutorial on ecmarchitect.com first and then come back to this one.</p> <p>If you are planning on following along, go ahead and use the Alfresco Maven SDK to bootstrap your project using the \"alfresco-allinone-archetype\" archetype. Use a <code>groupId</code> of \"com.someco\" and an <code>artifactId</code> of \"webscripts-tutorial\".</p> <p>I'll refer to the directory where you created the project directory as $TUTORIAL_HOME.</p> <p>One small change is necessary before continuing. Starting with SDK 3.0.0, the default is to output a JAR. But we always want to output AMPs. To configure the project to generate AMPs, edit the pom.xml and uncomment the maven-assembly-plugin.</p> <p>Next, there are a few dependencies we need to take care of. First, when running the project, we want the webscripts-tutorial AMPs to be deployed, but we also want some of the AMPs from previous tutorials to be deployed as well. Specifically, the content tutorial, behaviors tutorial, and actions tutorial. To make this happen, edit the pom.xml in the \"webscripts-tutorial-platform-docker\" directory and add the following platform dependencies:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;webscripts-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the content tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the actions tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the behavior tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;behavior-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>We also want the Share AMPs from those same projects to be installed, so edit the pom.xml file in the \"webscripts-tutorial-share-docker\" directory to add the following Share dependencies:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;webscripts-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the content tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the actions tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the behavior tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;behavior-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;type&gt;amp&lt;/type&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Finally, the tutorial will have a compile-time dependency on the behavior-tutorial. To address that, edit the pom.xml under \"webscripts-tutorial-platform\" and add the following dependency:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.someco&lt;/groupId&gt;\n    &lt;artifactId&gt;behavior-tutorial-platform&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Now we'll be able to refer to Java classes in the behavior tutorial and when running the project the correct AMPs will get installed automatically.</p> <p>If you have not already checked out the source code from the content, behavior, and actions tutorials, you need to do so, then run <code>mvn install -DskipTests=true</code> for each so that the artifacts will be installed in your local Maven repo.</p> <p>Now you're ready to write some web scripts.</p>"},{"location":"webscripts/tutorial/tutorial/#creating-your-own-rest-api-for-ratings","title":"Creating Your Own REST API for Ratings","text":"<p>SomeCo wants a REST API that front-end developers can use to find whitepapers and ratings as well as post new ratings. Before diving in, it probably makes sense to rough out the API.</p> URL Method Description Response Formats /someco/whitepapers GET Returns a list of whitepapers. HTML, JSON /someco/rating?id={id} GET Gets the average rating for a given whitepaper by passing in the whitepaper's noderef. HTML, JSON /someco/rating?id={id}&amp;rating={rating}&amp;user={user} POST Creates a new rating for the specified whitepaper by passing in a rating value and the user who posted the rating. HTML, JSON /someco/rating?id={id} DELETE Deletes all ratings for a specified whitepaper. HTML <p>Table: Planned ratings API</p> <p>The URL pattern must be unique. In this tutorial all URLs will be prefixed with \"someco\". Alfresco reserves certain package names and URLs for their own use but by incorporating things like your domain name into your URLs and package names, you'll steer clear of those.</p> <p>When this API is in place, front-end developers can incorporate whitepapers and user-contributed ratings into the SomeCo web site. The following mockups show how the front-end team plans to use the API you're going to build to query for whitepaper and ratings data.</p> <p></p> <p>You can't tell from the mockups, but the ratings widget is clickable. When clicked it sends an asynchronous post to the /someco/rating URL described in the table above. When the whitepaper link is clicked, the page below is displayed.</p> <p></p> <p>I reused the description from the index page for the Executive Summary. In the real world this would probably be a more lengthy description separate from the introduction on the index page. The \u201cDownload this white paper\u201d link uses the standard \u201cDownload URL\u201d to give the user direct access to the content.</p>"},{"location":"webscripts/tutorial/tutorial/#listing-all-whitepapers","title":"Listing all whitepapers","text":"<p>As a quick review, recall that SomeCo writes whitepapers and manages those papers with Alfresco. Some whitepapers are published to the web site. A custom aspect called <code>sc:webable</code> includes a boolean property called <code>sc:isActive</code>. Whitepapers with the <code>sc:isActive</code> flag set to <code>true</code> should be shown on the web site.</p> <p>Let's write a web script that returns all whitepapers. The list of whitepapers needs to be in two formats: HTML and JSON. HTML will allow you to easily test the service and JSON will make it easy for code on the front-end to process the list. This will require four files:</p> <ol> <li>one descriptor,</li> <li>one JavaScript controller,</li> <li>one FreeMarker template for the HTML response, and</li> <li>one FreeMarker template for the JSON response.</li> </ol> <p>I'll walk you through the descriptor, controller, and the two views.</p>"},{"location":"webscripts/tutorial/tutorial/#step-1-write-the-descriptor","title":"Step 1: Write the descriptor","text":"<p>The first step is to create the descriptor file. Web scripts that are deployed in an AMP go in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts\n</code></pre> <p>The Alfresco Maven SDK probably created that directory structure and added an \"alfresco\" directory with some demo web scripts. Go ahead and delete the example web scripts. We don't need those.</p> <p>The web script framework allows web script assets to be organized in a hierarchical folder or package structure within that directory. This keeps your web scripts from colliding with other people's web scripts or Alfresco's. Use a reverse domain name pattern just like you would for a Java package. This tutorial will use \"com/someco\" for its package. This particular web script is about whitepapers so the files that make up the whitepapers web script will reside in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/whitepapers\n</code></pre> <p>To create the descriptor, create a new XML file called \"whitepapers.get.desc.xml\" in that directory.</p> <p>Edit the file to have the following content:</p> <pre><code>&lt;webscript&gt;\n    &lt;shortname&gt;Get all whitepapers&lt;/shortname&gt;\n    &lt;description&gt;Returns a list of active whitepapers&lt;/description&gt;\n    &lt;url&gt;/someco/whitepapers&lt;/url&gt;\n    &lt;url&gt;/someco/whitepapers.json&lt;/url&gt;\n    &lt;url&gt;/someco/whitepapers.html&lt;/url&gt;\n    &lt;format default=\"json\"&gt;extension&lt;/format&gt;\n    &lt;authentication&gt;guest&lt;/authentication&gt;\n    &lt;transaction&gt;none&lt;/transaction&gt;\n&lt;/webscript&gt;\n</code></pre> <p>There are a few elements in this descriptor you didn't see in the Hello World example. First, notice that there are multiple <code>url</code> elements. There is one <code>url</code> element for each format plus one without a format. This shows how to request a different output format from the same base URL. Because the URLs differ only in format, it isn't strictly required that they be listed in the descriptor, but it is a good practice.</p> <p>The <code>format</code> element declares the which extension syntax the web script uses and defines a default output format. In this case, the web script uses the \u201cextension\u201d syntax\u2014the extension on the URL specifies the format of the response. An alternative syntax is to use the \u201cargument\u201d syntax like this:</p> <pre><code>&lt;url&gt;/someco/whitepapers?format=json&lt;/url&gt;\n&lt;url&gt;/someco/whitepapers?format=html&lt;/url&gt;\n</code></pre> <p>Which syntax you use is really up to you. If you want to accept either syntax, you can use \u201cany\u201d as the format.</p> <p>Using the <code>format</code> element set to \"extension\" and the <code>default</code> attribute set to \"json\", if someone invokes the URL and passes in the format as an argument instead of as an extension, they'll get an error 500. If someone invokes the web script without specifying a format, they'll get a JSON response.</p> <p>The <code>authentication</code> element declares the minimum level of authentication required for this script. If your web script access the repository this must be set to \"guest\" or higher. Other options are \"none\", \"user\", and \"admin\".</p> <p>The <code>transaction</code> element specifies the level of transaction required by the script. Listing whitepapers doesn't need a transaction, so in this example it is set to \"none\". Other possible values are:</p> <ul> <li>required: the web script requires a transaction and can be part of an existing transaction if one has already been started</li> <li>requiresnew: the web script must be run in its own new transaction</li> </ul> <p>The next step is to write the controller.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2-write-the-controller","title":"Step 2: Write the controller","text":"<p>The controller is where the logic that queries the whitepapers will live. Create a file called \"whitepapers.get.js\" in the same directory as the controller. Edit the file with the following content:</p> <pre><code>&lt;import resource=\"classpath:alfresco/extension/scripts/rating.js\"&gt;\n\nvar whitepapers = search.luceneSearch(\"PATH:\\\"/app:company_home/cm:Someco/cm:Whitepapers/*\\\" +TYPE:\\\"{http://www.someco.com/model/content/1.0}whitepaper\\\"\");\n\nif (whitepapers == null || whitepapers.length == 0) {\n    status.code = 404;\n    status.message = \"No whitepapers found\";\n    status.redirect = true;\n} else {\n    var whitepaperInfo = new Array();\n    for (i = 0; i &lt; whitepapers.length; i++) {\n        var whitepaper = new whitepaperEntry(whitepapers[i],\n        getRating(whitepapers[i]));\n        whitepaperInfo[i] = whitepaper;\n    }\n    model.whitepapers = whitepaperInfo;\n}\n\nfunction whitepaperEntry(whitepaper, rating) {\n    this.whitepaper = whitepaper;\n    this.rating = rating;\n}\n</code></pre> <p>The first thing to notice about the script is that it imports another script. The rating.js script was created as part of the custom behaviors tutorial to contain logic related to ratings.</p> <p>The next thing to notice is that the script queries the repository using Lucene to get a list of whitepapers. Look at what happens if there are no whitepapers found. The response code gets set to 404, which is the standard HTTP response code for \u201cFile not found\u201d. Alfresco has standard response templates for error codes but you can override them with your own by creating FreeMarker templates that follow a specific naming convention. For example, you could have a custom 404 response template for whitepapers by creating a file called \"whitepapers.get.html.404.ftl\". See the official Alfresco documentation on response status code templates for more information.</p> <p>The last thing that happens is that the web script builds a new Array for the results. The <code>model.whitepapers</code> variable could just be set to the <code>whitepapers</code> variable that contains the query results but I want to add some data to the result set, so I'm building a new Array and setting that to the model.</p> <p>The <code>getRating()</code> function that is getting called resides in rating.js, which is part of the AMP you created in the custom behaviors tutorial. Just for reference, that function looks like this:</p> <pre><code>function getRating(curNode, curUser) {\n    var rating = {};\n    rating.average = curNode.properties[\"{http://www.someco.com/model/ratings/1.0}averageRating\"];\n    rating.count = curNode.properties[\"{http://www.someco.com/model/ratings/1.0}ratingCount\"];\n    rating.user = getUserRating(curNode, curUser);\n    return rating;\n}\n</code></pre> <p>The function simply retrieves the <code>scr:averageRating</code> and <code>scr:ratingCount</code> properties from the specified node as well as the current user's rating for this object, and returns everything in a single rating object.</p>"},{"location":"webscripts/tutorial/tutorial/#step-3-write-the-views","title":"Step 3: Write the views","text":"<p>Assuming there are items in the search results, the web script will need FreeMarker templates to return them in the appropriate format. Let's create the HTML response template first. Create a new file called \"whitepapers.get.html.ftl\" in the same directory as the controller you just created. Edit the file with the following content:</p> <pre><code>&lt;#assign datetimeformat=\"EEE, dd MMM yyyy HH:mm:ss zzz\"&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h3&gt;Whitepapers&lt;/h3&gt;\n        &lt;table&gt;\n            &lt;#list whitepapers as child&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.properties.name}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Title&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.properties[\"cm:title\"]!\"\"}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Link&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;a href=\"${url.serviceContext}/api/node/workspace/SpacesStore/${child.whitepaper.id}/content?guest=true\"&gt;${url.serviceContext}/api/node/workspace/SpacesStore/${child.whitepaper.id}/content&lt;/a&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Type&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.mimetype}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Size&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.size}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Id&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.id}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;p&gt;&lt;#if child.whitepaper.properties[\"cm:description\"]?exists\n                &amp;&amp; child.whitepaper.properties[\"cm:description\"] !=\n                \"\"&gt;${child.whitepaper.properties[\"cm:description\"]}&lt;/#if&gt;&lt;/p&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;Pub Date&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;${child.whitepaper.properties[\"cm:modified\"]?string(datetimeformat)}&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;b&gt;&lt;a href=\"${url.serviceContext}/rating.html?id=${child.whitepaper.id}&amp;guest=true\"&gt;Rating&lt;/a&gt;&lt;/b&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;table&gt;\n                            &lt;tr&gt;\n                                &lt;td&gt;&lt;b&gt;Average&lt;/b&gt;&lt;/td&gt;\n                                    &lt;td&gt;${child.rating.average!\"0\"}&lt;/td&gt;\n                            &lt;/tr&gt;\n                            &lt;tr&gt;\n                                &lt;td&gt;&lt;b&gt;Count&lt;/b&gt;&lt;/td&gt;\n                                    &lt;td&gt;${child.rating.count!\"0\"}&lt;/td&gt;\n                            &lt;/tr&gt;\n                        &lt;/table&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;#if !(child.whitepaper == whitepapers?last.whitepaper)&gt;\n                    &lt;tr&gt;\n                        &lt;td colspan=\"2\" bgcolor=\"999999\"&gt;&amp;nbsp;&lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;/#if&gt;\n            &lt;/#list&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This template iterates through the query results passed in by the controller, and builds an HTML table with properties of each whitepaper. (Yes, the table is ugly. Yes, you could use CSS to spruce it up tremendously or even remove the table entirely. But for SomeCo, this response template is really for debugging purposes only and I didn't want to fool with the CSS so a table it is).</p> <p>Now create the response template for the JSON response. In the same directory as the HTML response template, create a file called \"whitepapers.get.json.ftl\" with the following content:</p> <pre><code>&lt;#assign datetimeformat=\"EEE, dd MMM yyyy HH:mm:ss zzz\"&gt;\n{\"whitepapers\" : [\n    &lt;#list whitepapers as child&gt;\n        {\n            \"name\" : \"${child.whitepaper.properties.name}\",\n            \"title\" : \"${child.whitepaper.properties[\"cm:title\"]}\",\n            \"link\" : \"${url.serviceContext}/api/node/workspace/SpacesStore/${child.whitepaper.id}/content\",\n            \"type\" : \"${child.whitepaper.mimetype}\",\n            \"size\" : \"${child.whitepaper.size}\",\n            \"id\" : \"${child.whitepaper.id}\",\n            \"description\" : \"&lt;#if child.whitepaper.properties[\"cm:description\"]?exists &amp;&amp; child.whitepaper.properties[\"cm:description\"] != \"\"&gt;${child.whitepaper.properties[\"cm:description\"]}&lt;/#if&gt;\",\n            \"pubDate\" : \"${child.whitepaper.properties[\"cm:modified\"]?string(datetimeformat)}\",\n            \"rating\" : {\n                \"average\" : \"${child.rating.average!\"0\"}\",\n                \"count\" : \"${child.rating.count!\"0\"}\"\n            }\n        }\n        &lt;#if !(child.whitepaper == whitepapers?last.whitepaper)&gt;,&lt;/#if&gt;\n    &lt;/#list&gt;\n    ]\n}\n</code></pre> <p>Again, just like the HTML response template, the script iterates through the result set, but this one outputs JSON instead of HTML. The JSON structure is completely arbitrary. In the real world, you would work this out with the front-end development team.</p>"},{"location":"webscripts/tutorial/tutorial/#deploying-the-whitepaper-web-script","title":"Deploying the whitepaper web script","text":"<p>Recall that after you bootstrapped this project from the \"all-in-one\" archetype, you edited the pom.xml file to add the content, behavior, and actions AMPs as dependencies. That means you can easily test your web script by firing up the Docker containers and your webscripts will have the dependencies they expect. Plus, you'll be able to log in to Share and create test content, run the custom actions from the actions tutorial, and so on.</p> <p>The dependencies from the earlier tutorials do the following:</p> <ul> <li>content-tutorial-platform. This is required because the web script looks for content with the <code>sc:isActive</code> flag set and that's defined in the SomeCo Content Model that is part of that project.</li> <li>behavior-tutorial-platform. This is required because it contains a behavior that calculates the average rating for a piece of content and because it has the rating.js server-side JavaScript file that the controllers in this tutorial import.</li> <li>actions-tutorial-platform. This one is optional. It contains a UI action that is used to set the <code>sc:isActive</code> flag from within the Alfresco Share user interface.</li> </ul> <p>Running the SDK-generated Docker containers with these dependencies installed automatically for you is really convenient. At some point, you'll want to deploy to an actual Alfresco installation, which you can do either by manually deploying the AMPs for this project and the ones listed above or by building your own Docker images.</p> <p>For now, it's easiest just to use the SDK-generated Docker containers. To start those up using Docker Compose, switch to the \"webscripts-tutorial\" directory and run <code>./run.sh build_start</code> or <code>run.bat build_start</code> depending on your platform.</p> <p>Now that your Alfresco server is running the webscripts-tutorial-platform AMP and its dependencies, you are ready to test out the whitepapers web script.</p>"},{"location":"webscripts/tutorial/tutorial/#testing","title":"Testing","text":"<p>You've deployed the project and its dependencies to your Alfresco installation and the server is running. You are now ready to test out the web script. Do this:</p> <ol> <li>Upload some files to your Alfresco repository. It doesn't matter what they are. The files should go in \"Company Home/Someco/Whitepapers\". Capitalization matters.</li> <li>Change the type on the files you uploaded to \"SomeCo Whitepaper\". You can save time if you set that up as a rule on your Whitepapers folder before you upload your test files in step 1.</li> <li>If you are going to run the web script as a guest user, make sure that \"Guest\" is given \"Consumer\" access to the Whitepapers folder.</li> </ol> <p>The web script descriptor says that this web script requires Guest access or higher. That means you have three options for running the web script:</p> <ol> <li>Log in to Alfresco (/alfresco) before running the web script.</li> <li>Run the web script and then authenticate with a valid user and password when the basic authentication dialog is presented.</li> <li> <p>Run the web script with \u201c?guest=true\u201d appended to the URL, like this:</p> <p>http://localhost:8080/alfresco/service/someco/whitepapers.html?guest=true</p> </li> </ol> <p>It doesn't matter which one you choose. The tutorial assumes you are going with option 3.</p> <p>If you forget the \".html\" extension in the URL, you'll get a JSON response because the descriptor set that format as the default.</p> <p>If all goes well you should see something similar to the figure below:</p> <p></p>"},{"location":"webscripts/tutorial/tutorial/#debugging","title":"Debugging","text":"<p>Did it work? If not, it's time to debug. Debug logging verbosity is controlled by log4j.properties. There are many log4j.properties files. For turning on JavaScript logging, edit the one in:</p> <pre><code>$TOMCAT_HOME/webapps/alfresco/WEB-INF/classes\n</code></pre> <p>Edit log4j.properties and change the ScriptLogger to DEBUG, like this:</p> <pre><code>log4j.logger.org.alfresco.repo.jscript.ScriptLogger=DEBUG\n</code></pre> <p>This will cause any logger.log statements in your controller to write to catalina.out. If that isn't enough logging for you, you can set:</p> <pre><code>log4j.logger.org.alfresco.repo.jscript=DEBUG\n</code></pre> <p>That will give you debug logging on all server-side JavaScript.</p> <p>You may decide that you need to step through your server-side JavaScript. Assuming your server is running on a machine with a GUI, you can edit log4j.properties and set:</p> <pre><code>log4j.logger.org.alfresco.repo.web.scripts.AlfrescoRhinoScriptDebugger=on\n</code></pre> <p>Then, when you restart your application server, Alfresco will launch the Rhino JavaScript Debugger in a GUI. You can use it to set breakpoints and step through your JavaScript controller.</p> <p>Another tool you'll want to leverage is the web script console. The web script console is at:</p> <pre><code>http://localhost:8080/alfresco/service/index\n</code></pre> <p>You can use it to see everything Alfresco knows about your script (and any other scripts it knows about). For example, you can go to:</p> <pre><code>http://localhost:8080/alfresco/service/script/com/someco/whitepapers/whitepapers.get\n</code></pre> <p>and Alfresco will dump everything it knows about that web script, including the descriptor, the controller, and all of the response templates.</p> <p>The node browser in Alfresco Share Admin Tools can be helpful to debug problems as well. You can get to it by going to:</p> <pre><code>http://localhost:8080/share/page/console/admin-console/node-browser\n</code></pre> <p>In this case, for example, the JavaScript controller runs a Lucene query. If the controller isn't finding any whitepapers even though you've created test data, try executing the query in the node browser. If it doesn't return results, there's something wrong with your test data (or your query). You can use the node browser to navigate to the test data and inspect its type, aspects, and property values.</p> <p>Remember that if you make changes to the web script without restarting the application server, you may need to use the web script console to refresh the web scripts.</p>"},{"location":"webscripts/tutorial/tutorial/#retrieving-the-ratings-for-a-specific-whitepaper","title":"Retrieving the ratings for a specific whitepaper","text":"<p>You have a working web script that fetches a list of whitepapers. Now let's create a web script that retrieves rating summary data for a specific object.</p> <p>This is pretty easy because of the existing <code>getRating()</code> function in rating.js. The controller is called \"rating.get.js\" and it resides in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/ratings\n</code></pre> <p>All the controller has to do is grab the ID of the rateable object that is being requested, locate the node, then call <code>getRating()</code> as shown below:</p> <pre><code>&lt;import resource=\"classpath:alfresco/module/behavior-tutorial-platform/scripts/rating.js\"&gt;\nif (args.id == null || args.id.length == 0) {\n    status.code = 400;\n    status.message = \"Node ID has not been provided\";\n    status.redirect = true;\n} else {\n    var curNode = search.findNode(\"workspace://SpacesStore/\" + args.id);\n    if (curNode == null) {\n        status.code = 404;\n        status.message = \"No node found for id:\" + args.id;\n        status.redirect = true;\n    } else {\n        model.rating = getRating(curNode, args.user);\n    }\n}\n</code></pre> <p>The descriptor and response templates are very similar to the whitepaper example so I won't include them here. If you want to grab them to copy them into your project, they are:</p> <ul> <li>rating.get.desc.xml</li> <li>rating.get.html.ftl</li> <li>rating.get.json.ftl</li> </ul> <p>Now you can deploy and test the rating web script.</p>"},{"location":"webscripts/tutorial/tutorial/#deploying-and-testing-the-rating-web-script","title":"Deploying and testing the rating web script","text":"<p>If you are following along, build the AMPs by running <code>mvn install -DskipTests</code> from the $TUTORIAL_HOME directory. Once it builds successfully, you can restart the Alfresco container by running <code>./run.sh reload_acs</code>.</p> <p>Now invoke the whitepaper web script you created earlier:</p> <pre><code>http://localhost:8080/alfresco/service/someco/whitepapers.html&amp;guest=true\n</code></pre> <p>The HTML the whitepaper web script returns includes a link that invokes your new rating web script for a specific whitepaper. The link should look similar to:</p> <pre><code>http://localhost:8080/alfresco/s/someco/rating.html?id=43946f68-1fc6-4d54-b730-33a20633b432&amp;guest=true\n</code></pre> <p>If you change the \".html\" suffix to \".json\", the result should look like this:</p> <pre><code>{\n  \"rating\" :\n    {\n        \"average\" : \"1.923\",\n        \"count\" : \"13\"\n    }\n}\n</code></pre> <p>Now you have a web script that can retrieve the rating information for a specific object. Next, you'll add a web script that creates new ratings.</p>"},{"location":"webscripts/tutorial/tutorial/#posting-a-rating-with-a-java-backed-web-script","title":"Posting a rating with a Java-backed Web Script","text":"<p>You have seen how to retrieve whitepapers and rating data about specific whitepapers. Now let's create a web script that can create ratings. But first, a few words about authentication.</p> <p>All of the web scripts created thus far require Guest access or higher. As you've seen, that means the URL has to include \"&amp;guest=true\" or a session has to be established with a valid login. (A third option would be to pass in a ticket, but that's out-of-scope for this tutorial).</p> <p>Remember that the goal here is for SomeCo to let users come to its web site, retrieve whitepapers, and rate whitepapers. How will SomeCo web site users be authorized to create whitepaper rating objects? There are three options:</p> <ol> <li>Set the permissions to allow write access for Guest users on the /Someco/Whitepapers folder. This isn't a good option because SomeCo doesn't want Guests to be able to upload arbitrary content to their repository.</li> <li>Set the web script descriptor to use \"user\" authentication and require Guests to authenticate as registered users before rating whitepapers. This isn't a terrible option but SomeCo doesn't want their web site users to have to register for an account and login before rating whitepapers.</li> <li>Let guest users call the web script but tell Alfresco to run the web script as a specific user that does have authorization to create new objects. In this case that user will be \"admin\" but a user account dedicated to the purpose of creating ratings is probably a better idea in the real world.</li> </ol> <p>Option 3 is the one SomeCo chooses to go with.</p> <p>Although it isn't required, this example will use a Java-based controller instead of server-side JavaScript so you can see how that works. Even though Java will be used, the steps are the same at a high-level:</p> <ol> <li>Write the descriptor</li> <li>Write the Java controller</li> <li>Write the views</li> </ol> <p>The descriptor, together with the two views, reside in the same folder as the GET rating web script you worked on in the previous section, which is:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/ratings\n</code></pre> <p>The controller will be written in the Java source code folder for the project, compiled, and packaged in a JAR as part of the AMP.</p> <p>Let's look at each of the steps needed to implement the post rating web script.</p>"},{"location":"webscripts/tutorial/tutorial/#step-1-write-the-descriptor_1","title":"Step 1: Write the descriptor","text":"<p>The descriptor, rating.post.desc.xml, has two things you haven't seen yet. First, the <code>authentication</code> element uses the <code>runas</code> attribute to specify that the web script should be executed as \"admin\" even though it only requires Guest access or higher to execute:</p> <pre><code>&lt;authentication runas=\"admin\"&gt;guest&lt;/authentication&gt;\n</code></pre> <p>Note that using <code>runas</code> in this way only works for web scripts that are loaded from the classpath. For security reasons, it will not work for web scripts uploaded to the repository.</p> <p>The second piece of the descriptor to look at is the <code>transaction</code> element. Unlike the GET web scripts you've seen so far, this web script creates new content so the web script will need a transaction:</p> <pre><code>&lt;transaction&gt;required&lt;/transaction&gt;\n</code></pre> <p>The descriptor will cause Alfresco to invoke the web script as if it were being run by \"admin\", regardless of who calls it, and it will run within a transaction. The next step is to write the Java controller.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2-write-the-java-controller","title":"Step 2: Write the Java controller","text":"<p>This step actually has three parts:</p> <p>a. Write the business logic for creating the rating. That's going to go into a class that doesn't know anything about web scripts so that it is easier to reuse. b. Write a Java class that functions as the web script controller. This class will do some basic error checking and then call the class created in the previous step to actually create a rating. c. Configure the web script controller via Spring so that Alfresco knows to invoke it when the web script is called.</p> <p>Let's take a look.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2a-write-the-business-logic-for-creating-the-rating","title":"Step 2a: Write the business logic for creating the rating","text":"<p>At some point there might be other Java classes that need to create ratings. So the logic that does that should be generic. This class has a dependency on the \"behavior-tutorial-platform\" project created in an earlier tutorial, so the first thing to do is to edit this project's pom.xml file, which lives in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform\n</code></pre> <p>And add the dependency, which looks like this:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.someco&lt;/groupId&gt;\n    &lt;artifactId&gt;behavior-tutorial-platform&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Create a new package called \"com.someco.beans\" in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/java\n</code></pre> <p>In that package, create a new class called \"RatingBean\". The class (without the imports) looks like this:</p> <pre><code>public class RatingBean {\n\n    // Dependencies\n    private NodeService nodeService;\n\n    public void create(final NodeRef nodeRef, final int rating, final String user) {\n        // add the aspect to this document if it needs it\n        if (nodeService.hasAspect(nodeRef, QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.ASPECT_SCR_RATEABLE))) {\n        } else {\n            nodeService.addAspect(nodeRef, QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.ASPECT_SCR_RATEABLE), null);\n        }\n        Map&lt;QName, Serializable&gt; props = new HashMap&lt;QName, Serializable&gt;();\n        props.put(QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, \"rating\"), rating);\n        props.put(QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, \"rater\"), user);\n        nodeService.createNode(nodeRef, QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.ASSN_SCR_RATINGS), QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, \"rating\" + new Date().getTime()), QName.createQName(SomeCoRatingsModel.NAMESPACE_SOMECO_RATINGS_CONTENT_MODEL, SomeCoRatingsModel.TYPE_SCR_RATING), props);\n    }\n\n    public NodeService getNodeService() {\n        return nodeService;\n    }\n\n\n    public void setNodeService(NodeService nodeService) {\n        this.nodeService = nodeService;\n    }    \n}\n</code></pre> <p>The <code>create()</code> method expects a <code>nodeRef</code> that is being rated, a <code>rating</code>, and the <code>user</code> creating the rating. The method checks the node to see if it already has the rateable aspect and adds it if it does not. Then, it sets up the rating and user properties to be set on the rating object. Finally, it calls <code>createNode()</code> on the Alfresco node service to create the rating as a child of the object being rated.</p> <p>As you can see, this class does not know that it will be invoked by a web script. It's generic enough to be used by anything that needs to create a rating.</p> <p>With that in place, you can now create the Java web script controller.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2b-write-the-controller-class","title":"Step 2b: Write the controller class","text":"<p>The <code>create()</code> method in the <code>RatingBean</code> class provides a handy method for creating new ratings on any object. Now all we have to do is write a Java controller for the rating POST web script that grabs the id of the object being rated, the rating, and the person creating the rating, and pass all of that to the <code>create()</code> method.</p> <p>To do that, create a new package called \"com.someco.scripts\" in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/java\n</code></pre> <p>Within that package, create a new class called \"PostRating\". The class name isn't significant but following a descriptive convention is helpful as the number of Java-backed web scripts grows.</p> <p>The class needs to extend <code>org.alfresco.webscripts.DeclarativeWebScript</code>. The logic goes in <code>executeImpl</code> as shown below.</p> <pre><code>public class PostRating extends DeclarativeWebScript {\n\n    private RatingBean ratingBean;\n    private NodeService nodeService;\n\n    @Override\n    protected Map&lt;String, Object&gt; executeImpl(WebScriptRequest req,\n            Status status) {\n        String id = req.getParameter(\"id\");\n        String rating = req.getParameter(\"rating\");\n        String user = req.getParameter(\"user\");\n\n        if (id == null || rating == null || rating.equals(\"0\") || user == null) {\n            status.setCode(400, \"Required data has not been provided\");\n            status.setRedirect(true);\n        } else {\n            NodeRef curNode = new NodeRef(\"workspace://SpacesStore/\" + id);\n            if (!nodeService.exists(curNode)) {\n                status.setCode(404, \"No node found for id:\" + id);\n                status.setRedirect(true);\n            } else {\n                ratingBean.create(curNode, Integer.parseInt(rating), user);\n            }\n\n        }\n\n        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();\n        model.put(\"node\", id);\n        model.put(\"rating\", rating);\n        model.put(\"user\", user);\n\n        return model;\n    }\n\n    public NodeService getNodeService() {\n        return nodeService;\n    }\n\n    public void setNodeService(NodeService nodeService) {\n        this.nodeService = nodeService;\n    }\n\n    public RatingBean getRatingBean() {\n        return ratingBean;\n    }\n\n    public void setRatingBean(RatingBean ratingBean) {\n        this.ratingBean = ratingBean;\n    }\n}\n</code></pre> <p>This code should look strikingly similar to a JavaScript controller and in fact it does the same thing. It checks the arguments, sets an error code if the arguments are missing, and then writes some data to the model.</p> <p>The controller gets the <code>RatingBean</code> class through Spring dependency injection.</p> <p>The next step is to configure both of these Java classes in Spring.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2c-create-spring-configuration-for-the-web-script-controller","title":"Step 2c: Create Spring configuration for the web script controller","text":"<p>The Java controller for the web script exists, but both the controller class, <code>PostRating</code>, and the bean that contains the business logic, <code>RatingBean</code>, have dependencies that need to be injected. And, the web script framework needs to know to invoke the <code>PostRating</code> class when the web script is called. All of that happens through Spring configuration.</p> <p>You learned in earlier tutorials that the Spring context file for a module is called service-context.xml and it lives in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/module/webscripts-tutorial-platform/context\n</code></pre> <p>The Alfresco Maven SDK created that file for you when you used it to bootstrap the project.</p> <p>Edit that file. You can delete any sample bean elements that may already be in the file. Make the <code>beans</code> element look like this:</p> <pre><code>&lt;beans&gt;\n    &lt;bean id=\"ratingBean\" class=\"com.someco.beans.RatingBean\"&gt;\n        &lt;property name=\"nodeService\"&gt;\n            &lt;ref bean=\"NodeService\" /&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"webscript.com.someco.ratings.rating.post\" class=\"com.someco.scripts.PostRating\" parent=\"webscript\"&gt;\n        &lt;property name=\"ratingBean\"&gt;\n            &lt;ref bean=\"ratingBean\" /&gt;       \n        &lt;/property&gt;\n        &lt;property name=\"nodeService\"&gt;\n            &lt;ref bean=\"NodeService\" /&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;    \n&lt;/beans&gt;\n</code></pre> <p>The first <code>bean</code> element is simple--the <code>RatingBean</code> class needs the Alfresco <code>NodeService</code> so one is being injected.</p> <p>The second <code>bean</code> element is where the web script framework finds out about the <code>PostRating</code> class. The magic is in the <code>id</code> and <code>parent</code> attributes. The <code>id</code> attribute follows a naming convention. The convention is:</p> <pre><code>webscript.package.service-id.method\n</code></pre> <p>Pay close attention to the use of the singular \"webscript\" here versus the plural \"webscripts\" in other places. Accidentally using the plural form here is a potential multi-hour debugging session ending in a forehead slap and a \u201cDoh!\u201d if you aren't careful.</p> <p>It is probably worth mentioning that a decision to use a Java-backed web script doesn't exclude the use of JavaScript for the same web script. If you have both a Java class and a JavaScript file for the same web script, the Java class gets executed first followed by the JavaScript. The script has access to everything the Java class put in the model and can update the model before passing it along to the view. Implementing both a Java-based controller and a JavaScript-based controller for the same web script is potentially confusing to you and the rest of your team so don't do it unless you have good reason, and if you do make sure to document it well.</p>"},{"location":"webscripts/tutorial/tutorial/#step-3-write-the-views_1","title":"Step 3: Write the views","text":"<p>The response templates for this web script look like the examples you've seen so far. Like previous examples, this web script can respond with either an HTML or JSON response:</p> <ul> <li>rating.post.html.ftl</li> <li>rating.post.json.ftl</li> </ul> <p>These should look similar to the views you've already created.</p>"},{"location":"webscripts/tutorial/tutorial/#deploying-the-post-web-script","title":"Deploying the post web script","text":"<p>This web script is written in Java so you'll need to shutdown the server, build the AMP, and deploy it to your Alfresco server as you've done in prior steps, then start Tomcat back up.</p>"},{"location":"webscripts/tutorial/tutorial/#testing-the-post-web-script-with-curl","title":"Testing the post web script with curl","text":"<p>Curl, and other types of HTTP clients, are great for testing web scripts. For example, using curl you can post a rating like this:</p> <pre><code>curl -X POST \"http://localhost:8080/alfresco/s/someco/rating?id=802d6f27-82ec-4c9c-8e29-9b6e4a3401ef&amp;rating=5&amp;user=jpotts&amp;guest=true\"\n</code></pre> <p>That <code>id</code> is from the node reference of an existing whitepaper.</p> <p>Running this returns:</p> <pre><code>{\n  \"rating\" :\n        {\n         \"node\" : \"802d6f27-82ec-4c9c-8e29-9b6e4a3401ef\",\n         \"rating\" : \"5\",\n         \"user\" : \"jpotts\"\n        }\n}\n</code></pre> <p>Assuming everything is okay, you now have web scripts that can retrieve as well as create content in the repository. Let's finish up the custom ratings API by creating a web script that deletes ratings.</p>"},{"location":"webscripts/tutorial/tutorial/#deleting-ratings","title":"Deleting ratings","text":"<p>This should be old hat by now. Creating a web script to delete the ratings associated with a specific whitepaper is similar to the other web scripts, it's just that this one is invoked with the DELETE HTTP method. Let's look at the descriptor and the controller.</p>"},{"location":"webscripts/tutorial/tutorial/#step-1-configure-the-descriptor-to-restrict-the-web-script-to-administrators","title":"Step 1: Configure the descriptor to restrict the web script to administrators","text":"<p>It seems rare that you would want to delete all ratings for a given node but highly likely that if you are going to expose it, it should be for admins only. So let's tell Alfresco that this web script can only by run by administrators. The descriptor is named rating.delete.desc.xml. It lives in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/ratings\n</code></pre> <p>To restrict the web script to administrators, set the <code>authentication</code> element like this:</p> <pre><code>&lt;authentication&gt;admin&lt;/authentication&gt;\n</code></pre> <p>Now only administrators can execute the web script.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2-write-the-controller_1","title":"Step 2: Write the controller","text":"<p>As in previous examples, the controller JavaScript, rating.delete.js, reads and checks the arguments then calls a function. In this case it is the <code>deleteRatings()</code> function that already exists in the rating.js file packaged in the behavior-tutorial project in the behavior-tutorial-platform module. The body of the function is:</p> <pre><code>function deleteRatings(curNode) {\n    // check the parent to make sure it has the right aspect\n    if (curNode.hasAspect(\"{http://www.someco.com/model/content/1.0}rateable\")) {\n        // continue, this is what we want\n    } else {\n        logger.log(\"Node did not have rateable aspect.\");\n        return;\n    }\n\n    // get the node's children\n    var children = curNode.children;\n\n    if (children != null &amp;&amp; children.length \\&gt; 0) {\n        logger.log(\"Found children...iterating\");\n        for (i in children) {\n            var child = children[i];\n            logger.log(\"Removing child: \" + child.id);\n            child.remove();\n        }\n    }\n}\n</code></pre> <p>The script bails if the node doesn't have the rateable aspect (because there wouldn't be any ratings). Otherwise, it grabs the children and deletes them. Note the important assumption that the only children that exist are ratings. If there's a possibility of other child associations, you'd obviously want to be more discriminating.</p>"},{"location":"webscripts/tutorial/tutorial/#step-3-create-the-view","title":"Step 3: Create the view","text":"<p>The delete web script has only a single view, rating.delete.html.ftl, and it is pretty boring. It echos back the ID of the object from which the ratings were deleted, then provides a link back to the GET rating web script.</p>"},{"location":"webscripts/tutorial/tutorial/#testing-the-delete-web-script-with-curl","title":"Testing the delete web script with curl","text":"<p>There is no reason to shutdown Alfresco when you deploy this web script. For example, in IntelliJ, I can just do a \"Build Project\" then re-run the web script. If your change isn't there try using the web scripts console to refresh the list of web scripts and you are ready to test.</p> <p>One way to test this web script is to use curl. For example, if you know the node reference of a piece of content with ratings, you can grab the ID part of the nodeRef and invoke the DELETE web script like this:</p> <pre><code>curl -uadmin:admin -X DELETE \"http://localhost:8080/alfresco/s/someco/rating/delete.html?id=802d6f27-82ec-4c9c-8e29-9b6e4a3401ef\"\n</code></pre> <p>Notice that the admin username and password are being passed in. The web script requires an administrator to execute it.</p> <p>If everything goes as planned you will see something similar to:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;Successfully deleted ratings for node: 802d6f27-82ec-4c9c-8e29-9b6e4a3401ef&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"/alfresco/s/someco/rating.html?id=802d6f27-82ec-4c9c-8e29-9b6e4a3401ef\"&gt;Back to Ratings&lt;/a&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If you then visit the GET rating web script, either in your browser or through curl, you'll see the object no longer has any ratings.</p>"},{"location":"webscripts/tutorial/tutorial/#example-summary","title":"Example summary","text":"<p>You've seen how to implement two GET web scripts (one that retrieves a list of whitepapers and that retrieves a specific rating), a POST web script for creating new ratings, and a DELETE web script for clearing out ratings. At this point SomeCo has everything they need to build a front-end that talks to the Alfresco repository via REST.</p> <p>One piece of functionality I didn't show, but I've included in the source, is the ability for an optional \u201cuser\u201d argument to be passed in to the two GET scripts. When present, the web script will return the last rating for the specified user in addition to the overall rating data.</p>"},{"location":"webscripts/tutorial/tutorial/#invoking-web-scripts-with-ajax","title":"Invoking web scripts with ajax","text":"<p>SomeCo's custom ratings API is in place but it would be nice to have a user interface for creating ratings. In this section, you'll add a little five star ratings widget to the rating.get.html.ftl template that uses client-side JavaScript to make POSTs against the rating web script to create ratings.</p> <p>If you have no interest in calling web scripts from client-side JavaScript you can safely skip this entire section. Otherwise, read on.</p> <p>Here is what the HTML view of the rating GET web script should look like when this is working:</p> <p></p> <p>The purpose of the rating widget is two-fold. First, it graphically displays the average rating for a whitepaper. Second, each star in the widget is hot. When one of the stars is clicked, an asynchronous post is made to the rating POST web script which causes a new rating object to get created.</p> <p>The name of the person submitting the rating would normally be passed in based on some sort of credential, maybe from a portal session or a cookie. In this test form, the rater's name is specified as a plain text field.</p> <p>To implement this you'll need to:</p> <ol> <li>Copy the client-side assets the widget needs into the appropriate folder in the AMP.</li> <li>Modify the GET rating web script with client-side JavaScript that instantiates the widget and calls the POST web script when it is clicked.</li> </ol>"},{"location":"webscripts/tutorial/tutorial/#step-1-copy-the-client-side-assets-into-the-project","title":"Step 1: Copy the client-side assets into the project","text":"<p>I found a five star widget online written in client-side JavaScript and used that as a starting point (the original site has gone offline). The widget leverages the prototype JavaScript library.</p> <p>The first step is to copy the JavaScript and images into the AMP project structure. The images reside in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/amp/web/images\n</code></pre> <p>And the client-side JavaScript resides in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/amp/web/scripts\n</code></pre> <p>Next you'll modify the rating web script to leverage these.</p>"},{"location":"webscripts/tutorial/tutorial/#step-2-modify-the-get-rating-web-script-to-include-client-side-javascript","title":"Step 2: Modify the GET rating web script to include client-side JavaScript","text":"<p>Recall that the FreeMarker view for the rating GET web script resides in:</p> <pre><code>$TUTORIAL_HOME/webscripts-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/ratings\n</code></pre> <p>The file is called rating.get.html.ftl, but let's focus on the main body of the HTML first. Here it is:</p> <pre><code>&lt;p&gt;&lt;a href=\"${url.serviceContext}/someco/whitepapers.html?guest=true\"&gt;Back to the list&lt;/a&gt; of whitepapers&lt;/p&gt;\n&lt;p&gt;Node: ${args.id}&lt;/p&gt;\n&lt;p&gt;Average: ${rating.average!''}&lt;/p&gt;\n&lt;p&gt;# of Ratings: ${rating.count!''}&lt;/p&gt;\n&lt;#if (rating.user &gt; 0)&gt;\n    &lt;p&gt;User rating: ${rating.user!''}&lt;/p&gt;\n&lt;/#if&gt;\n&lt;form name=\"login\"&gt;\n    Rater:&lt;input name=\"userId\"&gt;&lt;/input&gt;\n&lt;/form&gt;\nRating: &lt;div class=\"rating\" id=\"rating_${args.id}\" style=\"display:inline\"&gt;${rating.average!'0'}&lt;/div&gt;\n&lt;p&gt;&lt;a href=\"#\" onclick=deleteRatings(\"${args.id}\")&gt;Delete ratings&lt;/a&gt; for this node&lt;/p&gt;\n</code></pre> <p>This is all basic HTML/FreeMarker stuff you've seen before. The last line sets up a <code>div</code> for the ratings widget. The <code>id</code> of the <code>div</code> uses the node ref of the whitepaper. This allows multiple ratings widgets to be on the same page and makes it easy for the JavaScript to pass the node ref on to the rating POST web script.</p> <p>Now take a look at the inline JavaScript. I'm going to omit some of the less interesting functions and just show the functions related to posting ratings.</p> <pre><code>function submitRating(evt) {\n    var tmp = Event.element(evt).getAttribute('id').substr(5);\n    var widgetId = tmp.substr(0, tmp.indexOf('_'));\n    var starNbr = tmp.substr(tmp.indexOf('_')+1);\n    if (document.login.userId.value != undefined &amp;&amp; document.login.userId.value != \"\") {\n        curUser = document.login.userId.value;\n    } else {\n        curUser = \"jpotts\";\n    }\n    postRating(widgetId, starNbr, curUser);\n}           \n\nfunction postRating(id, rating, user) {\n    if (receiveReq.readyState == 4 || receiveReq.readyState == 0) {\n        receiveReq.open(\"POST\", \"${url.serviceContext}/someco/rating?id=\" + id + \"&amp;rating=\" + rating + \"&amp;guest=true&amp;user=\" + user, true);\n        receiveReq.onreadystatechange = handleRatingPosted;\n        receiveReq.send(null);\n    }\n}\n\nfunction handleRatingPosted() {\n    if (receiveReq.readyState == 4) {\n        window.location.reload(true);\n    }\n}\n</code></pre> <p>Those of you familiar with AJAX techniques may be wondering why I didn't use the prototype library to make the post--it is already already being used with the rating widget. I had trouble getting prototype to play nicely with the web script framework and this particular version of prototype is quite old, so rather than spend time upgrading the library and debugging the problem, I chose to use the lower-level <code>XMLHttpRequest</code>.</p>"},{"location":"webscripts/tutorial/tutorial/#dealing-with-the-cross-domain-scripting-limitation","title":"Dealing with the cross-domain scripting limitation","text":"<p>In this example, the Alfresco server and the server serving up the page with the ratings widget are the same machine. In production, Alfresco and the front-end might be different machines. Browsers hitting the front-end web site will be able to make AJAX calls to the front-end servers but not the Alfresco server. This known as the \u201ccross-domain scripting limitation\u201d. Ways to deal with the limitation are widely documented on the Internet. The web script framework does provide a callback mechanism if you choose to go that route.</p>"},{"location":"webscripts/tutorial/tutorial/#conclusion","title":"Conclusion","text":"<p>This tutorial provided an introduction to the Alfresco web script framework. It began with a very simple \"Hello World\" web script deployed to the content repository and then gradually moved to more complex examples.</p> <p>By the end of the tutorial you created a REST API for retrieving whitepapers, getting the average rating for a specific whitepaper, posting new ratings for a given whitepaper, and deleting all ratings for a specific whitepaper.</p> <p>You saw how to use both JavaScript and Java to implement web script controller logic. You used FreeMarker to render web script output in HTML as well as JSON.</p> <p>Finally, you saw one example of how to invoke web scripts from client-side JavaScript by implementing a five star ratings widget that creates new ratings when clicked. That discussion included options for working around the cross-domain scripting limitation.</p>"},{"location":"webscripts/tutorial/tutorial/#things-to-explore-on-your-own","title":"Things to Explore on Your Own","text":"<p>There are still topics left to explore. For now, that's up to you. Here are some suggestions for things you might want to investigate further...</p> <ul> <li>Web scripts are almost self-documenting. Help yourself and your team by giving web scripts a meaningful <code>description</code> in the descriptor XML. You can also set the <code>family</code> element to group web scripts to make them easier to find in the web script console.</li> <li>Web scripts can have an associated \"config\" file. This is useful when you would like administrators to be able to modify variables or settings for your web script without risking inadvertent changes to your code.</li> <li>The individual files that make up a web script can be overridden. For example, suppose you want to change how the HTML view of an out-of-the-box web script works but you don't want to change its descriptor, controllers, or other views. If you create a file in your project under the extension directory that has the same name and file path as Alfresco's, yours will take precedence.</li> <li>You can use web scripts to create portlets for portlet containers like like Liferay or JBoss Portal.</li> <li>This example showed web scripts running in the \"repo\" tier but the \"share\" tier also includes the web script framework. Web scripts are a fundamental building block of the Alfresco Share user interface. Any custom work you do in Share will most likely involve web scripts at some point.</li> <li>These examples showed the common case where the web script framework sends the response to the requester in its entirety. But you can also write web scripts that stream their responses.</li> <li>With a little bit of work you can write web script controllers in other languages besides JavaScript and Java.</li> </ul> <p>The number of web scripts shipped with Alfresco has grown tremendously over the years. Before writing your own, browse the web script index to see what you might be able to leverage. Be careful, though. Not all out-of-the-box web scripts are meant for public use. The web script console can sort web scripts by \"lifecycle\". Avoid web scripts marked \"deprecated\" or \"internal\".</p>"},{"location":"webscripts/tutorial/tutorial/#where-to-find-more-information","title":"Where to Find More Information","text":"<ul> <li>The complete source code for these examples is available on GitHub.</li> <li>Official documentation for both Enterprise Edition and Community Edition is available at docs.alfresco.com.</li> <li>Ask questions about web scripts in the community.</li> <li>If you are ready to cover new ground, try another ecmarchitect.com tutorial in the Alfresco Developer Series. The most logical next step is the Custom Advanced Workflows tutorial.</li> <li>Learn more about FreeMarker at freemarker.sourceforge.net.</li> <li>Learn more about JSON at json.org</li> </ul>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform/readme/","title":"Alfresco Custom Web Scripts Tutorial","text":"<p>These sample classes and sample Alfresco extension config files accompany an article called \"Alfresco Developer: Intro to the Web Script Framework\".</p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK or any of its dependencies.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform/readme/#dependencies","title":"Dependencies","text":"<p>The webscripts-tutorial-repo AMP must be deployed to a repository that also has in it the content-tutorial-repo AMP and the behavior-tutorial-repo AMP. These projects are also part of the Alfresco Developer Series project on GitHub.</p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war</code></p> <p>Which will start Alfresco on an embedded Jetty server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/","title":"Index","text":""},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#if-you-are-overriding-out-of-the-box-alfresco-web-scripts-put-these-files-here","title":"If you are overriding out-of-the-box Alfresco web scripts, put these files here","text":""},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#in-the-correct-orgalfresco-package","title":"in the correct org.alfresco... package.","text":""},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#if-you-are-defining-a-new-custom-web-script-add-it-under","title":"If you are defining a new custom web script, add it under","text":""},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#resourcesalfrescoweb-extensionsite-webscriptsyour-domain-path","title":"resources/alfresco/web-extension/site-webscripts/{your domain path}.","text":""},{"location":"webscripts/webscripts-tutorial/webscripts-tutorial-share/src/main/resources/alfresco/web-extension/site-webscripts/org/alfresco/#_1","title":"Index","text":""},{"location":"workflow/tutorial/tutorial/","title":"Creating Custom Advanced Workflows in Alfresco","text":"<p>Jeff Potts, Metaversant Group \u2014 July, 2021</p>"},{"location":"workflow/tutorial/tutorial/#license","title":"License","text":"<p>This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.</p>"},{"location":"workflow/tutorial/tutorial/#introduction","title":"Introduction","text":"<p>This tutorial is about the advanced workflow functionality available in Alfresco through its embedded Activiti workflow engine. First, because \"workflow\" can mean different things to different people, I'll talk about my definition of the term. Then, I'll introduce some Activiti concepts that will help you understand how processes are defined and how the workflow engine actually works. Once that foundation is in place, I'll walk through some examples that feature many of the different concepts.</p> <p>This tutorial builds upon the \"SomeCo\" examples covered in earlier tutorials. In it, I'll implement a business process that helps SomeCo route whitepapers for review and approval by internal as well as external parties.</p>"},{"location":"workflow/tutorial/tutorial/#what-is-a-workflow","title":"What is a workflow?","text":"<p>When Alfresco released version 1.4 of the product, they made a huge leap forward in enterprise readiness. That was the release when Alfresco embedded the JBoss jBPM engine into the product which meant that enterprises could route Alfresco repository content through complex business processes. A content repository without the ability to facilitate business processes that produce, consume, or transform the content within it is little more than a glorified file server, so this was a welcome addition.</p> <p>But before I geek out on the wonders of graph based execution languages let's agree on what the term workflow means. Generically, a workflow is \"a reliably repeatable pattern of activity enabled by a systematic organization of resources...that can be documented and learned\"(source). The term has been around since people started studying the nature of work in the early 20^th^ century in an effort to streamline manufacturing processes.</p> <p>In fact, in the world of ECM, it is sometimes helpful to think of an assembly line or manufacturing process when thinking about how content flows through an organization. Content is born of raw material (data), shaped and molded by one or more people (collaboration) or machines (systems), reviewed for quality, and delivered to consumers. Content may go through a single process or many sub-processes. Content may take different routes through a process based on certain characteristics of that content. The output of an organization or department of knowledge workers is essentially the content that comes rolling off the assembly line (the collection of workflows that define that organization's business processes).</p> <p>Although not always formalized or automated, almost everyone in modern society has been involved in a workflow in some way:</p> <ul> <li>When you submit an insurance claim, you are initiating a workflow.</li> <li>If you witness drunk and disorderly conduct on an airline flight and are asked to provide a statement to the airline, you are participating in a workflow. (Seriously, it happens more often than you'd think).</li> <li>When you check on the status of your loan application, you are asking for metadata about a running workflow.</li> <li>When someone brings you a capital request that requires your approval because it is over a certain dollar amount, a characteristic of that request (the dollar amount) has triggered a decision within the workflow that routes the capital request to you.</li> <li>When you give the final approval for a piece of web content to be published, it is likely you are completing a workflow.</li> </ul> <p>As varied as these examples are, all of them have a couple of things in common that make them relevant to ECM:</p> <ol> <li>They are examples of human-to-human and, in some cases, human-to-machine interaction</li> <li>They are content- or document-centric.</li> </ol> <p>These are two very important characteristics that help clarify the kind of workflow I am talking about. There are standalone workflow engines (in fact, Activiti is one of them) that can be used to model and execute all sorts of \"repeatable patterns of activity\", with or without content, but in the ECM space, the patterns focused on most often are those that involve humans working with content.</p> <p>Of course document-centric workflows may include fully automated steps and machine-to-machine interactions\u2014the point is that document-centric workflows in which humans review, approve, or collaborate in some way are in the scope of the discussion while processes which run lights-out system-to-system orchestration or integration are not.</p>"},{"location":"workflow/tutorial/tutorial/#options-for-implementing-workflow-in-your-apps","title":"Options for implementing workflow in your apps","text":"<p>Some of you are saying, \"You're right. Workflows are everywhere. I could really streamline my organization by moving processes currently implemented with email, phone calls, and cubical drive-bys into a more formalized workflow. What are my options?\" Let's talk about three: Roll your own, Standalone workflow engines, and Embedded workflow engines.</p>"},{"location":"workflow/tutorial/tutorial/#roll-your-own","title":"Roll your own","text":"<p>People are often tempted to meet their workflow requirements with custom code. Very basic systems might be able to get by with a single flag on a record or an object that declares the status of the content like \"Draft\" or \"In Review\" or \"Approved\". But flags only capture the \"state\" of a piece of content. If you want to automate how content moves from state to state, the coding and maintenance becomes more complex. Sure, you can write code as part of your application that knows that once Draft documents are submitted for review, they need to go to Purchasing first and then to Finance, if and only if the requested cash outlay is more than \\$10m but do you really want to?</p> <p>People intent on rolling their own workflow often realize the maintenance problem this creates, so they create an abstraction used to describe the flow from state-to-state that keeps them from embedding that logic in compiled code. Once they've done that, though, they've essentially created their own proprietary workflow engine that no one else in the world knows how to run or maintain. And with all of the open source workflow engines available, why would you want to do that? So the \"roll your own\" option is really not recommended for any but the most basic workflow requirements.</p>"},{"location":"workflow/tutorial/tutorial/#standalone-engines","title":"Standalone engines","text":"<p>There are a number of standalone workflow engines\u2014sometimes more broadly referred to as BPM (Business Process Management)\u2014both open source and proprietary. These are often extremely robust and scalable solutions that can be used to model, simulate, and execute any process you can think of from high-volume loan processing to call center queue management. Often, these workflow engines are implemented in conjunction with a rules engine which lets business users have control over complicated if-then-else decision trees.</p> <p>Standalone engines are most appropriate for extremely high volume or exceedingly complex solutions involving multiple systems. Another good use for standalone engines is when you are developing a custom application that has workflow requirements. Standalone engines can usually talk to any database or content management repository you might have implemented, but they won't be as tightly integrated into the content management system's user interface as the workflow engine built-in to the CMS. For this reason, for content-centric solutions that operate mostly within the scope of the CMS, it is usually less complicated (and less costly) to use the workflow engine embedded within the CMS, provided it has enough functionality to meet the business' workflow requirements.</p>"},{"location":"workflow/tutorial/tutorial/#embedded-workflow-engines","title":"Embedded workflow engines","text":"<p>Almost every CMS available today, whether open source or proprietary, has a workflow engine of some sort embedded within it. However, the capability of each of these vary widely. If you are in the process of selecting a CMS and you already know the kind of workflow requirements you'll face, it is important to understand the capabilities of the workflow engine embedded within the systems you are considering before making a final selection.</p> <p>The major benefit of leveraging an embedded workflow engine is the tight level of integration for users as well as developers. Users can initiate and interact with workflows without leaving the CMS client. Typically, developers customizing or extending the CMS can work with workflows using the core CMS API.</p>"},{"location":"workflow/tutorial/tutorial/#out-of-the-box-workflow-options-in-alfresco","title":"Out-of-the-box workflow options in Alfresco","text":"<p>Alfresco has two options for implementing workflows within the product. For very simplistic workflows, non-technical end-users can leverage Alfresco's Basic Workflow functionality. For more complex needs, Alfresco has Advanced Workflow functionality.</p>"},{"location":"workflow/tutorial/tutorial/#basic-workflows","title":"Basic workflows","text":"<p>Basic workflows are a nice end-user tool. You should know how they work and what the features and limitations are so you can make good decisions about when to use them. Basic workflows use folders and a \"forward step/backward step\" model to implement serial processes. When a piece of content is dropped in a folder, a rule is triggered that associates a \"forward step\" and a \"backward step\" (one or the other or both) with the content. These steps are tied to Alfresco actions such as \"Set a property\" or \"Move the content to a specified folder\". End users can then click on the appropriate step for a given piece of content.</p> <p>For example, suppose SomeCo has a simple submit-review-approve process in which content is submitted, then reviewed, then approved or rejected. One way to implement this with basic workflows is to use three folders\u2014let's say they are called \"Draft\", \"In Review\", and \"Approved\"\u2014each of which have a rule set that applies a basic workflow. The workflow for content in the Draft folder would have a single forward step labeled \"Submit\" and its action would move content to the \"In Review\" folder and send an email to the approver group. The \"In Review\" folder would have a workflow in which the forward step would be labeled \"Approve\" and it would copy the content to an \"Approved\" folder. The backward step would be labeled \"Reject\" and its action would move the content back to the \"Drafts\" folder.</p> <p>In the \"Creating Custom Actions\" tutorial, you created a custom rule action called \"Move Replaced\" that could be used in conjunction with this basic workflow to move old content out of the Approved folder and into an Archived folder, for example.</p> <p>You can see that basic workflows are useful, and when combined with rules and actions, you can automate simple business processes. But basic workflows are limited with regard to the complexity of the business processes they can handle.</p>"},{"location":"workflow/tutorial/tutorial/#advanced-workflows","title":"Advanced workflows","text":"<p>Advanced workflows are useful when you need much more control over the business process. Typical requirements that require the use of the advanced workflow engine are things like:</p> <ul> <li>Assignment of tasks to specific users or groups</li> <li>Parallel paths through the business process</li> <li>Decisions based on content metadata or other criteria</li> <li>The ability to handle exceptions</li> <li>Timers</li> </ul> <p>All of these (and more) are features of the embedded Activiti workflow engine which is what is used to implement advanced workflows in Alfresco.</p> <p>Although I haven't yet covered the detailed capabilities of Alfresco advanced workflows, I thought it would be a good idea to compare basic and advanced workflows at a high level now so I can leave the topic of basic workflows behind and spend the rest of the tutorial on advanced workflows:</p> Alfresco basic workflows... Alfresco advanced workflows... Are configurable by non-technical end-users via Alfresco Share Are defined by business analysts and developers using a graphical tool or by writing XML Leverage rules, folders, and actions Leverage the power of the embedded Activiti workflow engine Can only handle processes with single-step, forward and/or backward, serial flows Can model any business process including decisions, splits, joins, parallel flows, sub-processes, wait states, and timers Do not support decisions, splits, joins, or parallel flows Can include business logic written either in JavaScript or Java, either of which can access the Alfresco API Do not maintain state or metadata about the process itself Maintain state and process variables (metadata) about the process itself Do not support the concept of task assignment Support assigning tasks to individuals, groups, and pools of users <p>Table: Difference between basic and advanced workflows</p> <p>Now that you understand the definition of workflow in the context of ECM, some of the options for implementing workflow requirements, and the options within Alfresco specifically, it's time to start exploring some Activiti concepts.</p>"},{"location":"workflow/tutorial/tutorial/#activiti-concepts","title":"Activiti Concepts","text":"<p>This section introduces you to some Activiti concepts before moving on to the developer setup.</p>"},{"location":"workflow/tutorial/tutorial/#what-is-activiti","title":"What is Activiti?","text":"<p>Activiti is an open source, standalone workflow engine. All it needs is Java. It can run in a servlet container or it can be embedded in any Java application. The Activiti engine is responsible for managing deployed processes, instantiating and executing processes, persisting process state and metadata to a relational database, and tracking task assignment and task lists.</p> <p>Activiti is its own independent open source project. It just happens that the founders of the project and several other members of the development team are employed by Alfresco. Activiti is built to be embedded in any application that has workflow requirements. What's cool is that the work of integrating it with Alfresco has already been done for you.</p>"},{"location":"workflow/tutorial/tutorial/#why-two-advanced-workflow-engines","title":"Why two advanced workflow engines?","text":"<p>I mentioned earlier that Alfresco started embedding JBoss jBPM in Alfresco with release 1.4. Starting with Alfresco 4.0, Alfresco added Activiti.</p> <p>Alfresco added Activiti because they wanted an Apache-licensed workflow engine. JBoss was unwilling to change the jBPM license, so Alfresco hired jBPM creator, Tom Baeyens, and some of his team to start a new open source project aimed at building an Apache-licensed, BPMN 2.0 compliant workflow engine. The result is Activiti.</p> <p>In Alfresco 5.1, Alfresco dropped jBPM from the product and is moving forward with Activiti. If you are on older versions of Alfresco and you are still using jBPM, you should move to Activiti now.</p>"},{"location":"workflow/tutorial/tutorial/#bpmn-20","title":"BPMN 2.0","text":"<p>I mentioned earlier that Activiti is BPMN 2.0-compliant. BPMN stands for Business Process Modeling Notation. It's a specification managed by the Object Management Group (OMG) that defines exactly what the name suggests: A standard syntax for describing business processes. The specification is aimed at both humans (i.e., graphical notation of a business process) and machines (i.e., XML syntax describing the business process).</p> <p>The two main benefits of using a BPMN-compliant workflow engine are:</p> <ol> <li>When business analysts collaborate on business process projects,    they can use a common diagram and language to discuss the process,    regardless of the tool that is ultimately used to implement it.</li> <li>Any tool that produces BPMN-compliant XML can be used to define a    business process and the resulting XML should theoretically work    with any compliant workflow engine.</li> </ol>"},{"location":"workflow/tutorial/tutorial/#process-definitions","title":"Process definitions","text":"<p>A business process can be described as a graph of connected nodes. In Activiti (and really, in BPMN) these nodes are essentially events (start, stop, timer), tasks, and gateways. These nodes are connected by \"sequence flows\". You can model just about any business process you can think of by organizing events, tasks, gateways, and sequence flows on a diagram.</p> <p>The OMG has a great document called, \"BPMN 2.0 by Example\" that shows several examples of business process diagrams and then walks you through each. There's a link to it at the end of this document. The diagrams include features that may not be included in the current release of Activiti, but they do illustrate the kinds of things you can do with BPMN 2.0. For example, here's a diagram from that document called \"The Pizza Collaboration\":</p> <p></p> <p>A process, then, is a collection of events, tasks (some automated, some   performed by humans), and gateways, connected by sequence flows.</p>"},{"location":"workflow/tutorial/tutorial/#setup","title":"Setup","text":"<p>It's almost time to roll up your sleeves. Let me tell you about the tools you'll need and then give you a description of the project organization.</p>"},{"location":"workflow/tutorial/tutorial/#tools","title":"Tools","text":"<p>Here is what I am using on my machine:</p> <ul> <li>MacOS 11.4</li> <li>Java OpenJDK 11.0.2</li> <li>Apache Maven 3.8.1</li> <li>Alfresco Maven SDK 4.2 (No download necessary)</li> <li>Docker 20.10.6</li> <li>Docker Compose 1.29.1</li> <li>Eclipse Java EE IDE for Web Developers, Neon</li> <li>Activiti Eclipse BPMN 2.0 Designer 5.18 (Eclipse Update Site)</li> <li>Apache James 2.3.1 (for testing third-party notification via SMTP)</li> </ul> <p>By default, when you create an Alfresco project using the Alfresco Maven SDK the project will be configured to depend on the latest stable Alfresco Community Edition.</p>"},{"location":"workflow/tutorial/tutorial/#project-organization","title":"Project Organization","text":"<p>I am going to use the Alfresco Maven SDK to create a project from the \"all-in-one\" archetype that will package up my customizations in two AMPs (Alfresco Module Packages). One AMP is for the Alfresco web application (the \"repo\" tier) and the other is for the Alfresco Share web application (the \"Share\" tier).</p> <p>I am not going to spend much time talking about how the Alfresco Maven SDK works. If you aren't already familiar with it, you may want to read the Getting Started with the Alfresco Maven SDK tutorial on ecmarchitect.com first and then come back to this one.</p> <p>This tutorial relies on code from the Custom Content Types tutorial. The tutorial assumes that the repo tier AMP and Share tier AMP created during that tutorial have been installed into your local Maven repository. Or, if you are deploying to an Alfresco server instead of running the Docker images generated by the SDK, those AMPs need to be deployed to the Alfresco server. More details on that will be discussed later in the document.</p> <p>If you are planning on following along, go ahead and use the Alfresco Maven SDK to create a new project from the \"all-in-one\" archetype. Use a <code>groupId</code> of \"com.someco\" and an <code>artifactId</code> of \"workflow-tutorial\".</p> <p>Starting with 3.0.0, the SDK will generate JAR files by default. We always want to generate AMPs, not JARs, so edit the pom.xml file to uncomment the maven-assembly-plugin.</p> <p>We'll be running the project using Docker and Docker Compose. We can configure the project to install AMPs from the earlier tutorials into the Docker containers automatically. Edit the pom.xml file in the \"workflow-tutorial-platform-docker\" directory to add the following dependencies:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;workflow-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the content tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the behavior tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;behavior-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the actions tutorial repo AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-platform&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Those all have corresponding Share tier modules so edit the pom.xml file in the \"workflow-tutorial-share-docker\" directory to add the following dependencies:</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;workflow-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the content tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;content-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the behavior tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;behavior-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Bring in the actions tutorial share AMP so we can run embedded. --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.someco&lt;/groupId&gt;\n        &lt;artifactId&gt;actions-tutorial-share&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Now when we fire up the Docker containers the workflow AMPs will be installed as well as the AMPs from the earlier content, behavior, and actions tutorials.</p> <p>If you have not installed those artifacts into your local Maven repository, switch to the root of each of those earlier tutorial projects and run <code>mvn install -DskipTests</code> to do so now.</p>"},{"location":"workflow/tutorial/tutorial/#hello-world-examples","title":"Hello World Examples","text":"<p>Let's create a couple of super simple Hello World processes using the Activiti Process Designer. These processes will not be wired into the Alfresco web client user interface. Instead, I'll use the workflow console to start them. Once I've run through the basic steps of diagramming and deploying workflows, I'll show you examples that are fully integrated into the user interface.</p>"},{"location":"workflow/tutorial/tutorial/#the-helloworld-process","title":"The helloWorld process","text":"<p>The helloWorld process will consist of a start event, a user task, and an end event. The goal is to do nothing more than write \"Hello, World!\" to the Alfresco log.</p> <p>Workflows reside in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/workflow\n</code></pre> <p>When you created the workflow-tutorial project using the Alfresco Maven SDK, the folder structure was created for you, and it may have included a \"workflow\" directory in the workflow-tutorial-platform module with a sample workflow. If so, you can delete the sample workflow. If not, create the \"workflow\" directory now.</p> <p>Once that is done, follow these steps:</p> <ol> <li>Right-click the workflows folder and choose New, Other, Activiti Diagram. Specify \"helloWorld.bpmn\" for the process name and click Finish.</li> <li>Drag-and-drop a start event, a user task and an end event from the palette onto your blank canvas.</li> <li>Connect the start event to the user task and the user task to the end event using sequence flows from the palette. When you are done, the diagram should look like this:</li> </ol> <p></p> <ol> <li>If it isn't open already, open the \"Properties\" view by going to Window, Show View, Other, General, Properties.</li> <li>Make sure \"Select\" is clicked in the palette, then single-click the \"User Task\" task.</li> <li>Specify \"\\${initiator.properties.userName}\" as the assignee, as shown below:</li> </ol> <p></p> <ol> <li>Click somewhere on the canvas. This should display the \"Process\" tab in the Properties viewer. Specify \"helloWorld\" as the ID and \"Hello World\" as the Name.</li> </ol> <p></p> <ol> <li>Save and close the diagram.</li> </ol> <p>Let's put a little logger statement in the process to see how to add code to a process. Activiti supports multiple scripting languages, but in Alfresco's embedded Activiti, JavaScript is the most practical because it gives you access to the full JavaScript API.</p> <p>To add code to the process, re-open the \"helloWorld.bpmn\" file in the XML editor instead of the diagram editor and look for the sequence flow that connects the start event to the user task. It should look something like this:</p> <pre><code>&lt;sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"&gt;&lt;/sequenceFlow&gt;\n</code></pre> <p>Note that your <code>id</code> attribute value may be different than mine depending on what order you created the sequence flow.</p> <p>Activiti has all kinds of hook points for custom code. To log a message when this sequence flow starts, add an execution listener on the flow, like this:</p> <pre><code>&lt;sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:executionListener event=\"start\" class=\"org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;logger.log(\"Hello, World!\");&lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:executionListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>Now save the diagram.</p> <p>Look at the <code>activiti:executionListener</code> element. You can see from the <code>event</code> attribute that this script will be fired when the \"start\" event for this sequence flow happens. The <code>class</code> attribute specifies the class to invoke which is an out-of-the-box class called <code>ScriptExecutionListener</code>. The <code>activiti:string</code> element could contain any server-side JavaScript. For right now it is a simple logger statement. In a later example, you'll see how to iterate over the documents in the workflow package.</p> <p>You're going to run this process shortly. Before that, let's create another simple process to see how forks work.</p>"},{"location":"workflow/tutorial/tutorial/#the-helloworldfork-process","title":"The helloWorldFork process","text":"<p>Before I show you how to deploy the process definition to Alfresco, let's do another Hello World example that does a fork and a join.</p> <p>Do this:</p> <ol> <li>Create a new diagram in the workflows folder called \"helloWorldFork.bpmn\".</li> <li>From the palette, grab a start event, an end event, two user tasks, and two parallel gateways.</li> <li>Click \"Select\" in the palette, then click each of the two user tasks to change their names to \"User Task A\" and \"User Task B\" respectively.</li> <li>Click \"Sequence Flow\" in the palette and connect the nodes in the diagram so it looks like this:</li> </ol> <p></p> <ol> <li>Click somewhere on the canvas. This should display the \"Process\" tab in the Properties viewer. Specify \"helloWorldFork\" as the ID and \"Hello World Fork\" as the Name.</li> <li>Save and close the diagram.</li> </ol> <p>Now you have a business process with two parallel paths of execution. If you wanted the process to go to either User Task A or User Task B, but not both, you would use an exclusive gateway instead of a parallel gateway.</p> <p>Similar to the first example, let's add a logger statement to the sequence flows leading to the two user tasks. Open helloWorldFork.bpmn in the XML editor and add two new <code>extensionElements</code> elements, one in each of the <code>sequenceFlow</code> elements that lead to \"usertask1\" and \"usertask2\":</p> <pre><code>&lt;sequenceFlow id=\"flow2\" sourceRef=\"parallelgateway1\" targetRef=\"usertask1\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:executionListener event=\"start\" class=\"org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;\n                    logger.log(\"Hello, World, from transition to User Task A!\");\n                &lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:executionListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/sequenceFlow&gt;\n&lt;sequenceFlow id=\"flow3\" sourceRef=\"parallelgateway1\" targetRef=\"usertask2\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:executionListener event=\"start\" class=\"org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;\n                    logger.log(\"Hello, World, from transition to User Task B!\");\n                &lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:executionListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>Remember to save the diagram.</p> <p>With a couple of, admittedly, ridiculously simple examples saved in the workflow-tutorial-platform module, it is time to deploy them to Activiti running within Alfresco and try them out.</p>"},{"location":"workflow/tutorial/tutorial/#deploying-processes","title":"Deploying processes","text":"<p>There are two other options for deploying workflows to Alfresco:</p> <ol> <li>Use the Alfresco Workflow Console</li> <li>Configure the workflows through Spring configuration</li> </ol> <p>This tutorial will use Spring to deploy the workflows initially. Then, use the Alfresco Workflow Console to deploy subsequent versions if needed.</p>"},{"location":"workflow/tutorial/tutorial/#deploying-the-workflows-with-spring","title":"Deploying the workflows with Spring","text":"<p>As you learned in previous tutorials, the AMP project created by the Alfresco Maven SDK already has a Spring context file. It is named \"bootstrap-context.xml\" and resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/context\n</code></pre> <p>Edit that file and delete any existing bean elements that the SDK might have added for you. Then, add a workflow deployer bean, like this:</p> <pre><code>&lt;bean id=\"${project.artifactId}.workflowBootstrap\" parent=\"workflowDeployer\"&gt;\n    &lt;property name=\"workflowDefinitions\"&gt;\n        &lt;list&gt;\n            &lt;props&gt;\n                &lt;prop key=\"engineId\"&gt;activiti&lt;/prop&gt;\n                &lt;prop key=\"location\"&gt;alfresco/module/${project.artifactId}/workflow/helloWorld.bpmn&lt;/prop&gt;\n                &lt;prop key=\"mimetype\"&gt;text/xml&lt;/prop&gt;\n                &lt;prop key=\"redeploy\"&gt;false&lt;/prop&gt;\n            &lt;/props&gt;\n            &lt;props&gt;\n                &lt;prop key=\"engineId\"&gt;activiti&lt;/prop&gt;\n                &lt;prop key=\"location\"&gt;alfresco/module/${project.artifactId}/workflow/helloWorldFork.bpmn&lt;/prop&gt;\n                &lt;prop key=\"mimetype\"&gt;text/xml&lt;/prop&gt;\n                &lt;prop key=\"redeploy\"&gt;false&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Setting \"redeploy\" to false prevents the workflows from being redeployed every time Alfresco restarts.</p> <p>The JavaScript in these business processes contain \"logger\" statements. To get those to show up in the log, edit the dev-log4j.properties file that is in the workflow-tutorial-platform-docker module. It resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform-docker/src/main/docker\n</code></pre> <p>Change the <code>ScriptLogger</code> to debug by changing this line:</p> <pre><code>log4j.logger.org.alfresco.repo.jscript.ScriptLogger=DEBUG\n</code></pre> <p>Now everything is ready to go. For this test, you can leverage the SDK-generated Docker images that the Alfresco Maven SDK sets up for you. To run your AMPs in Docker, open a command-line window, switch to $TUTORIAL_HOME, and run <code>./run.sh build_start</code> (or <code>run.bat</code> depending on your operating system).</p> <p>Apache Maven will download some dependencies, build your AMPs, merge them with the Alfresco WAR file and Share WAR file, then use Docker Compose to start up containers for Alfresco, Share, PostgreSQL, and SOLR.</p> <p>Next you'll see how to use the Alfresco Workflow Console to test the two hello world process definitions.</p>"},{"location":"workflow/tutorial/tutorial/#using-the-workflow-console","title":"Using the workflow console","text":"<p>Your Alfresco server is running and the hello world process definitions should have been deployed when the server started up. The Alfresco Workflow Console can be used to verify that they were deployed successfully. And you can use it to start instances of those workflows to test them out. It can also be a handy workflow debugging tool.</p> <p>In Alfresco Enterprise, the Workflow Console link is: http://localhost:8080/alfresco/s/enterprise/admin/admin-workflowconsole</p> <p>In Alfresco Community, the Workflow Console link is: http://localhost:8080/alfresco/s/admin/admin-workflowconsole</p> <p>If you haven't already authenticated as an administrator you will be asked to do so when you go to that URL.</p> <p>In the workflow console do this:</p> <ol> <li> <p>Type \"show definitions all\" then click Execute to see what process definitions have been deployed:</p> <p></p> </li> </ol> <p>You should see entries for helloWorld and helloWorldFork. Note that the ID for helloWorld is \"activiti$helloWorld:1:104\" and the ID for helloWorldFork is \"activiti$helloWorldFork:1:108\". Your IDs may be different.</p> <ol> <li>Type \"use definition activiti\\$helloWorld:1:104\" and click Execute. Subsequent commands having to do with a workflow definition will now use that one by default.</li> <li> <p>Start an instance of the helloWorld workflow by typing \"start\" and clicking Execute. You should see something like this:</p> <p></p> </li> </ol> <p>And in the server log, the logger output appears:</p> <p></p> <p>Now follow the same steps to start an instance of the <code>helloWorldFork</code> process. You should see log messages from both tasks.</p> <p></p> <p>After running helloWorldFork go back to the workflow console and type \"show workflows all\" and click Execute. That command shows the running workflow instances. You'll notice that the helloWorldFork workflow is still running. The easiest way to get rid of it is to use the \"delete workflow [workflow ID]\" command (you'll need the workflow's ID from the \"show workflows all\" command you just completed).</p> <p>You've seen how to start workflows and how to list and delete running workflows using the workflow console. The table below shows some other common commands and what they do.</p> Command What it does show workflows all Shows all running workflows. use workflow \\&lt;workflow id&gt; where \\&lt;workflow id&gt; is something like activiti\\$6300 Makes all subsequent commands happen in the context of the specified workflow. show transitions Shows all leaving transitions. signal \\&lt;path id&gt; \\&lt;transition&gt; where \\&lt;path id&gt; is something like activiti\\$6334 and transition is the name of the leaving transition you want to take. Leave off the transition to take the default. Signals the token. Good when your workflow is stuck on a node or when you want to take a transition without fooling with the task management UI. desc path \\&lt;path id&gt; where \\&lt;path id&gt; is something like activiti\\$6334 Dumps the current context. Great for debugging process variables. end workflow \\&lt;workflow id&gt; where \\&lt;workflow id&gt; is something like activiti\\$6300 Cancels the specified workflow. show definitions all Shows the current deployed workflows. undeploy definition \\&lt;workflow id&gt; or undeploy definition name \\&lt;workflow name&gt; Undeploys the specified workflow and stops any workflows running with that definition. The \\&lt;workflow id&gt; variant undeploys a specific version of a workflow. <p>Table: Partial list of workflow console commands</p> <p>These are a subset of the commands available. Type \"help\" and click Execute to see the full list of commands.</p> <p>You may be wondering what happens to running workflow instances when a new version of the process definition is checked in. The answer is that Activiti handles that\u2014it makes sure that running workflows continue to run with their original process definition. By default, all new workflows will use the most current version of the process definition.</p>"},{"location":"workflow/tutorial/tutorial/#configuring-a-workflow-for-alfresco-share","title":"Configuring a workflow for Alfresco Share","text":"<p>So far you've learned what a workflow is and some Activiti concepts. You used the process designer to diagram two simple processes, deployed those to Alfresco, and ran them using the workflow console. This part of the tutorial explains how to configure a workflow in the Alfresco Share user interface.</p> <p>Workflows are configured for the Alfresco Share user interface through the form service. Recall from the custom content types stutorial that the form service uses the content model XML and the Share form configuration to generate a nice form for end users. Configuring a workflow works exactly the same way: you configure a content model that maps to a business process definition, then configure the form service to produce a form for that model.</p> <p>At a high level, then, the steps are:</p> <ol> <li>Define a process using the Activiti Process Designer.</li> <li>Define a content model for your workflow in which workflow tasks map to content types. There will never be instances of these content types--they are solely for the purpose of defining forms that the Alfresco Share form service will understand.</li> <li>Configure the Alfresco Share user interface. Recall from the custom content types tutorial that share-config-custom.xml is used to configure the Alfresco Share web client.</li> </ol> <p>With that in mind, let's do one more hello world example. This time, the example will use Alfresco Share form configuration. After that, you'll be ready to work through a more real world example that builds upon the SomeCo work started in previous tutorials.</p>"},{"location":"workflow/tutorial/tutorial/#step-1-define-the-helloworldui-process","title":"Step 1: Define the helloWorldUI process","text":"<p>The goal for this example is to create a workflow that will capture a piece of metadata (a name the logger should use for a greeting) when the workflow is submitted, and then write the greeting out to the log. The first step is to define the process.</p> <ol> <li>In Eclipse, right-click on the \"workflows\" folder and create a new Activiti Diagram named \"helloWorldUI.bpmn\".</li> <li>From the palette, drag a start event, an end event, an Alfresco User Task, and an Alfresco Script task onto the canvas. You'll see the benefit of using the Alfresco-specific User Task and Script Task shortly.</li> <li> <p>Click \"Sequence Flow\" in the palette and then connect the nodes in the process to look like this:</p> <p></p> </li> <li> <p>Now set the properties on the Alfresco User Task. Set the performer type to \"Assignee\" and the expression to \"${initiator.properties.userName}\". This is the equivalent to what you've done in the first two hello world examples, it's just that this panel uses two separate fields for the performer type and the expression.</p> </li> <li> <p>Now set the form key. In Alfresco, a form key is the name of a type in a workflow-specific content model. Because this is an Alfresco User Task instead of a generic User Task, it already knows the possible values for the out-of-the-box form keys. Set the form key to \"wf:activitiReviewTask\". The out-of-the-box workflow content model has a type by that name and the out-of-the-box form configuration is already set up to create a form for the properties defined as part of that type.</p> <p></p> </li> <li> <p>The requirement is to let the workflow initiator specify a name that the logger will use in a greeting. So the start event needs to point to a custom form key (which represents a custom content type you'll create shortly). Single-click the start event, then set the form key to \"scwf:submitHelloWorldTask\".</p> <p></p> </li> <li> <p>Single-click the canvas to open the properties editor for the process. Set the ID to \"helloWorldUI\" and the name to \"Hello World UI\".</p> </li> <li>Save and close the diagram.</li> </ol>"},{"location":"workflow/tutorial/tutorial/#tasks","title":"Tasks","text":"<p>You saw in the steps above that tasks can be assigned to human performers. Activiti maintains a list of tasks assigned to each participant. How users interact with the task list is up to each application. In Alfresco, a dashlet displays a to-do list for the currently logged in user. As users complete their tasks the tasks are removed from the to-do list. An empty to do list is shown below.</p> <p></p>"},{"location":"workflow/tutorial/tutorial/#task-assignment","title":"Task Assignment","text":"<p>If tasks are steps a human performs, how do tasks get assigned to the people who need to perform them? Activiti has extended BPMN with their own attribute called \"activiti:assignee\". The value of the attribute can be a literal username or group name, or it can be an expression. In this case you assigned the user task to \\${initiator.properties.userName}. Initiator is a special object that will always contain the object representing the person who started the workflow.</p> <p>The diagram is now complete and ready for some server-side JavaScript to be added.</p>"},{"location":"workflow/tutorial/tutorial/#add-logic-to-the-process-definition","title":"Add logic to the process definition","text":"<p>The diagram is done. Let's add some logic.</p> <p>Similar to earlier hello world examples, let's add a logger statement to print a greeting. The difference is that in this example, the greeting includes a person's name that was specified in a form when the initiator started the workflow.</p>"},{"location":"workflow/tutorial/tutorial/#process-variables","title":"Process Variables","text":"<p>Often, there is metadata about a process that needs to be tracked. In this case, the metadata is the person's name. The person's name isn't really a property of the content being routed through the workflow\u2014it's a property of the process itself. Activiti gives us the ability to store this kind of data as part of the running process through process variables.</p> <p>Process variables are name-value pairs that will get persisted with the rest of the process state.</p>"},{"location":"workflow/tutorial/tutorial/#try-it","title":"Try It","text":"<p>To add a logger statement with a process variable to the helloWorldUI example, do this:</p> <p>Open helloWorldUI.bpmn in the XML editor.</p> <p>Find the <code>sequenceFlow</code> element that goes from the start event to the user task and add the following <code>extensionElements</code> element:</p> <pre><code>&lt;sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"alfrescoUsertask1\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:executionListener event=\"start\" class=\"org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;logger.log(\"Hello, \" + scwf_helloName + \"!\");&lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:executionListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>The <code>scwf_helloName</code> variable maps to a property defined in the <code>scwf:submitHelloWorldTask</code> type. You'll define that later.</p> <p>The review task lets the user select \"approve\" or \"reject\". The execution of the workflow needs the value of that selection. Add the logic needed to make that happen:</p> <pre><code>&lt;userTask id=\"alfrescoUsertask1\" name=\"Alfresco User Task\" activiti:assignee=\"${initiator.properties.userName}\" activiti:formKey=\"wf:activitiReviewTask\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:taskListener event=\"complete\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;execution.setVariable('wf_reviewOutcome', task.getVariable('wf_reviewOutcome'));&lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:taskListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/userTask&gt;\n</code></pre> <p>And, finally, just to show that a value can be set in one task and read in another, let's log the value of the approve/reject selection from within the Alfresco Script service task:</p> <pre><code>&lt;serviceTask id=\"alfrescoScripttask1\" name=\"Alfresco Script Task\" activiti:class=\"org.alfresco.repo.workflow.activiti.script.AlfrescoScriptDelegate\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:field name=\"script\"&gt;\n            &lt;activiti:string&gt;logger.log(\"The outcome of the review task is: \" + wf_reviewOutcome);&lt;/activiti:string&gt;\n        &lt;/activiti:field&gt;\n    &lt;/extensionElements&gt;\n&lt;/serviceTask&gt;\n</code></pre> <p>Now the process is ready to go. The next step is to get the workflow content model squared away.</p>"},{"location":"workflow/tutorial/tutorial/#step-2-define-a-workflow-specific-content-model","title":"Step 2: Define a workflow-specific content model","text":"<p>The workflow-specific content model defines the data structure for the process. Workflow models use the same fundamental building blocks\u2014types, properties, aspects, and associations\u2014as \"normal\" Alfresco content model definitions. In fact, if you already have a custom model, you can define your workflow-specific model in the same content model XML file, although to reduce confusion, I recommend you keep your content types separate from your workflow types by using at least two different model files.</p> <p>What is the purpose of the workflow-specific model? Think of it like any other content model. Custom content models are used to define the metadata that needs to be captured about a piece of content. The metadata (properties) are grouped into types and aspects. By virtue of defining these properties as part of the content model, Alfresco takes care of persisting the data to the underlying database.</p> <p>Workflow models function in the same way. Suppose you have a process in which three different departments are involved in an approval process. Maybe you'd like the workflow initiator to be able to define which of those departments are required approvers and which are optional or \"FYI\" reviewers. A workflow model defines how that information is going to be stored.</p> <p>As in other content models, you don't have to start from scratch. Alfresco ships out-of-the-box with some workflow-specific types already defined. There are two model definition files related to this. One is called called bpmModel.xml. It resides in your Alfresco web application root under WEB-INF/classes/alfresco/model. The other is called workflowModel.xml and it resides under WEB-INF/classes/alfresco/workflow.</p> <p>The bpmModel file contains the lowest-level workflow classes such as the base definition for all tasks and the default start task. It also contains important aspects such as a set of \"assignee\" aspects that define associations between tasks and users or groups.</p> <p>The workflowModel file contains the content model for the out-of-the-box process definitions. This model file offers a lot of potential for reuse in your custom processes. For example, if your process starts by allowing the submitter to specify a list of several people to receive a task, you could use the <code>wf:submitParallelReviewTask</code> type. If you want to base an approval on the percentage of individuals who approve a task, you can use the <code>wf:submitConcurrentReviewTask</code> type. Of course just like any model you are free to use these as-is, extend them, or not use them at all.</p> <p>When users interact with the workflow via the web client, Alfresco will use the workflow content model and the Alfresco Share form service configuration to figure out what metadata to expose to the UI and how to present it just as it does when viewing content properties. In Activiti, Alfresco uses the value of the form key attribute to figure out the appropriate workflow content type. So, all tasks in which there are Alfresco web client user interactions must be given a form key that corresponds to the name of a workflow content type.</p>"},{"location":"workflow/tutorial/tutorial/#create-the-workflow-content-model-xml","title":"Create the workflow content model XML","text":"<p>In the helloWorldUI example, you defined the following start event:</p> <pre><code>&lt;startEvent id=\"startevent1\" name=\"Start\" activiti:formKey=\"scwf:submitHelloWorldTask\"&gt;&lt;/startEvent&gt;\n</code></pre> <p>Now you need to create a content model with a custom type that corresponds to the form key value. From previous tutorials you know that models are defined in XML and reside in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/model\n</code></pre> <p>The SDK has already created the \"model\" folder for you as well as a couple of sample model files. Go ahead and delete the sample model files as they will not be needed.</p> <p>In the model folder, create a new content model XML file called \"scWorkflowModel.xml\" with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Definition of new Model --&gt;\n&lt;model name=\"scwf:workflowmodel\"\n    xmlns=\"http://www.alfresco.org/model/dictionary/1.0\"&gt;\n\n    &lt;!-- Optional meta-data about the model --&gt;\n    &lt;description&gt;Someco Workflow Model&lt;/description&gt;\n    &lt;author&gt;Jeff Potts&lt;/author&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n\n    &lt;!-- Imports are required to allow references to definitions in other models --&gt;\n    &lt;imports&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/dictionary/1.0\"\n            prefix=\"d\" /&gt;\n        &lt;import uri=\"http://www.alfresco.org/model/bpm/1.0\"\n            prefix=\"bpm\" /&gt;\n    &lt;/imports&gt;\n\n    &lt;!-- Introduction of new namespaces defined by this model --&gt;\n    &lt;namespaces&gt;\n        &lt;namespace uri=\"http://www.someco.com/model/workflow/1.0\"\n            prefix=\"scwf\" /&gt;\n    &lt;/namespaces&gt;\n\n    &lt;types&gt;\n        &lt;type name=\"scwf:submitHelloWorldTask\"&gt;\n            &lt;parent&gt;bpm:startTask&lt;/parent&gt;\n            &lt;properties&gt;\n                &lt;property name=\"scwf:helloName\"&gt;\n                    &lt;type&gt;d:text&lt;/type&gt;\n                    &lt;mandatory&gt;true&lt;/mandatory&gt;\n                    &lt;multiple&gt;false&lt;/multiple&gt;\n                &lt;/property&gt;\n            &lt;/properties&gt;\n        &lt;/type&gt;\n    &lt;/types&gt;\n\n&lt;/model&gt;\n</code></pre> <p>The <code>scwf:submitHelloWorldTask</code> type is a child of <code>bpm:startTask</code> and declares a property called <code>scwf:helloName</code>. That's a text property that will be displayed as a text field the workflow initiator can use to tell the workflow who to greet.</p> <p>Alfresco needs to know about this model. This is done through Spring configuration. There will be a few other additions to that context file so you'll do them all at once shortly.</p>"},{"location":"workflow/tutorial/tutorial/#step-3-configure-alfresco-share","title":"Step 3: Configure Alfresco Share","text":"<p>The next step is to tell Alfresco Share how to display the process metadata. This works exactly like custom content types. As you saw in that tutorial, Share customizations go in their own project so that they can be packaged in an AMP specifically for the share tier.</p>"},{"location":"workflow/tutorial/tutorial/#edit-share-config-customxml","title":"Edit share-config-custom.xml","text":"<p>The user interface configuration for Alfresco Share resides in a directory called:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-share/src/main/resources/META-INF\n</code></pre> <p>The SDK probably already created this directory structure as well as a sample share-config-custom.xml file.</p> <p>In the META-INF directory, edit the file called \"share-config-custom.xml\" . Replace the sample content with the following content:</p> <pre><code>&lt;alfresco-config&gt;\n    &lt;config evaluator=\"string-compare\" condition=\"activiti$helloWorldUI\"&gt;\n      &lt;forms&gt;\n         &lt;form&gt;\n            &lt;field-visibility&gt;\n               &lt;show id=\"bpm:workflowDescription\" /&gt;\n               &lt;show id=\"packageItems\" /&gt;\n               &lt;show id=\"scwf:helloName\" /&gt;\n               &lt;show id=\"transitions\" /&gt;\n               &lt;show id=\"bpm:status\" /&gt;\n            &lt;/field-visibility&gt;\n            &lt;appearance&gt;\n               &lt;set id=\"\" appearance=\"title\" label-id=\"workflow.set.general\" /&gt;\n               &lt;set id=\"items\" appearance=\"title\" label-id=\"workflow.set.items\" /&gt;\n               &lt;set id=\"progress\" appearance=\"title\" label-id=\"workflow.set.task.progress\" /&gt;\n               &lt;set id=\"other\" appearance=\"title\" label-id=\"workflow.set.other\" /&gt;\n               &lt;field id=\"bpm:workflowDescription\" label-id=\"workflow.field.message\"&gt;\n                  &lt;control template=\"/org/alfresco/components/form/controls/textarea.ftl\"&gt;\n                     &lt;control-param name=\"style\"&gt;width: 95%&lt;/control-param&gt;\n                  &lt;/control&gt;\n               &lt;/field&gt;\n               &lt;field id=\"packageItems\" set=\"items\" /&gt;\n               &lt;field id=\"scwf:helloName\" set=\"other\" /&gt;\n               &lt;field id=\"bpm:status\" set=\"progress\" /&gt;\n            &lt;/appearance&gt;\n         &lt;/form&gt;\n      &lt;/forms&gt;\n    &lt;/config&gt;\n&lt;/alfresco-config&gt;\n</code></pre> <p>This form tells Alfresco Share that when someone starts a process named \"activiti$helloWorldUI\" it should show the user this form. The form definition includes the <code>scwf:helloName</code> property defined in the custom type.</p>"},{"location":"workflow/tutorial/tutorial/#externalize-the-strings","title":"Externalize the strings","text":"<p>Alfresco Share needs to know which strings to use to display things like the workflow title and description that show up in the \"Start Advanced Workflow\" dialog, and titles and descriptions for individual tasks. The identifiers for these strings follow a specific format.</p> <p>There are two separate properties bundles to deal with. One is for the \"repo\" tier, so it goes in the workflow-tutorial-platform module. The other is for the \"share\" tier, so it goes in the workflow-tutorial-share module.</p> <p>Properties for the repo tier go in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/messages\n</code></pre> <p>The SDK has already created the \"messages\" folder along with a sample properties file, which you can delete.</p> <p>In the messages folder, create a new file called \"scWorkflow.properties\" with the following content:</p> <pre><code># Workflow related strings\nhelloWorldUI.workflow.title=Hello World UI (Activiti)\nhelloWorldUI.workflow.description=A simple hello world process using Activiti\n\n# Workflow Model related strings\nscwf_workflowmodel.type.scwf_submitHelloWorldTask.title=Start Hello World UI Workflow\nscwf_workflowmodel.type.scwf_submitHelloWorldTask.description=Submit a workflow that says hello in the log\nscwf_workflowmodel.property.scwf_helloName.title=Name\nscwf_workflowmodel.property.scwf_helloName.description=Say hello to this person\n</code></pre> <p>I tend to think of these properties as belonging to two groups. One group is the set of model-related properties. These properties externalize the strings in the workflow content model. The other is the set of process-related properties. These properties externalize the strings users see when they are working with the process (the workflow title, the workflow history, etc.).</p> <p>Properties for the share tier go in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-share/src/main/resources/alfresco/web-extension/messages\n</code></pre> <p>The SDK has already created the \"messages\" folder and a sample properties file which you can delete.</p> <p>In the messages folder, create a new file called \"scWorkflow.properties\" with the following content:</p> <pre><code>#scwf:helloName\nprop.scwf_helloName=Name\n\n#workflow properties\nworkflow.scwf_helloWorldUI=Hello World UI\n</code></pre> <p>Both of these properties files have to be registered through Spring. You'll see that next.</p>"},{"location":"workflow/tutorial/tutorial/#update-the-spring-configuration","title":"Update the Spring configuration","text":"<p>In this section you've made several changes that require Spring configuration updates in each of the two projects:</p> <ul> <li>Custom workflow model</li> <li>helloWorldUI business process definition</li> <li>Localized properties for the repo tier</li> <li>Localized properties for the share tier</li> </ul> <p>Let's update the repo tier Spring configuration, then the share tier.</p>"},{"location":"workflow/tutorial/tutorial/#repo-tier-spring-configuration","title":"Repo tier Spring configuration","text":"<p>Edit the bootstrap-context.xml file that resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/context\n</code></pre> <p>You can add the workflow model, the new workflow, and the labels all in the same bean. Edit the bootstrap-context.xml file and append the following to the existing <code>bean</code> element:</p> <pre><code>            &lt;props&gt;\n                &lt;prop key=\"engineId\"&gt;activiti&lt;/prop&gt;\n                &lt;prop key=\"location\"&gt;alfresco/module/${project.artifactId}/workflow/helloWorldUI.bpmn&lt;/prop&gt;\n                &lt;prop key=\"mimetype\"&gt;text/xml&lt;/prop&gt;\n                &lt;prop key=\"redeploy\"&gt;false&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n    &lt;property name=\"models\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco/module/${project.artifactId}/model/scWorkflowModel.xml&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n    &lt;property name=\"labels\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;alfresco.module.${project.artifactId}.messages.scWorkflow&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre> <p>Save and close the file.</p>"},{"location":"workflow/tutorial/tutorial/#share-tier-spring-configuration","title":"Share tier Spring configuration","text":"<p>The Spring configuration for the workflow-tutorial-share module resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-share/src/main/resources/alfresco/web-extension\n</code></pre> <p>In the web-extension directory, the SDK has created file called \"workflow-tutorial-share-slingshot-application-context.xml\" . Replace the content of that file with the following content:</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'&gt;\n&lt;beans&gt;\n    &lt;!-- Add Someco Workflow messages --&gt;\n    &lt;bean id=\"${project.artifactId}_resources\" class=\"org.springframework.extensions.surf.util.ResourceBundleBootstrapComponent\"&gt;\n        &lt;property name=\"resourceBundles\"&gt;\n            &lt;list&gt;\n                &lt;value&gt;alfresco.web-extension.messages.scWorkflow&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre> <p>Save and close the file.</p> <p>The helloWorldUI example is now ready to deploy.</p>"},{"location":"workflow/tutorial/tutorial/#deploy-test","title":"Deploy &amp; Test","text":"<p>The hello world UI example can be tested using the SDK-generated Docker images. You probably already have containers running from earlier. To find out:</p> <ol> <li>Open a command-line window.</li> <li>Run <code>docker ps</code>.</li> <li>If anything comes back there are containers running. To stop them, switch to $TUTORIAL_HOME then do <code>./run.sh stop</code>.</li> </ol> <p>Now you are ready to re-build the AMPs and start up fresh containers. To do that:</p> <ol> <li>Switch to $TUTORIAL_HOME.</li> <li>Run <code>./run.sh build_start</code> (or <code>run.bat</code>).</li> </ol> <p>Your repo tier AMP and Share tier AMPs will be built, installed into their respective WARs in Docker images, and then Docker Compose will start up containers based on those images. Alfresco is running on port 8080 and Share is running on port 8180.</p> <p>When everything starts up:</p> <ol> <li>Go to http://localhost:8180/share and log in as admin (password: admin).</li> <li> <p>In the \"My Tasks\" dashlet, click \"Start Workflow\" to start a workflow. You should see the Hello World UI workflow in the list of workflows:</p> <p></p> </li> <li> <p>Select the Hello World UI workflow. Alfresco Share should display a form that includes the greeting field:</p> <p></p> </li> <li> <p>Specify a name in the name field then click \"Start Workflow\" to start the workflow.</p> </li> <li> <p>After the workflow starts, you should see the greeting in the log:</p> <p></p> </li> <li> <p>The \"My Tasks\" dashlet should now have a task waiting on you. Click the task description to edit the task.</p> </li> <li>Add a comment if you want, then click either \"Approve\" or \"Reject\".</li> <li>Check the log again. You should see a log message showing which one you selected:</li> </ol> <p></p> <p>If all goes well, congratulations, you've successfully deployed a custom workflow with custom metadata that can be started and managed in Alfresco Share.</p>"},{"location":"workflow/tutorial/tutorial/#implementation-summary","title":"Implementation summary","text":"<p>You've covered a lot of ground so far. The following summarizes the advanced workflow implementation steps:</p> <ol> <li>Model the process using the Activiti Process Designer. Add logic using expressions, Alfresco JavaScript, or Java classes. Use the workflow deployer bean in Spring so that the process definition will get deployed when Alfresco starts.</li> <li>Define a workflow content model. Remember to configure it in Spring.</li> <li>Update share-config-custom.xml with form configuration that tells Alfresco Share how to handle workflow model you defined in the previous step. Configuring Alfresco Share also means externalizing the strings and referring to those in the Spring context file for both the repo tier and the share tier.</li> </ol> <p>At this point you know enough about advanced workflows to be dangerous. Let's work through an example for the fictitious company, SomeCo, to put some of this new knowledge to work.</p>"},{"location":"workflow/tutorial/tutorial/#someco-whitepaper-submission-example","title":"SomeCo Whitepaper submission example","text":"<p>This example continues the SomeCo example from the past several Alfresco Developer Series tutorials. SomeCo is going to use Advanced Workflows to route Whitepapers for approval before being flagged for publication on the web site. The next section describes the process.</p>"},{"location":"workflow/tutorial/tutorial/#business-requirements","title":"Business requirements","text":"<p>Anyone that can log in to Alfresco can submit a whitepaper for publication on the SomeCo web site. The only information the submitter needs to specify is the email address of an external third-party reviewer, if applicable. More on that shortly.</p> <p>The whitepaper needs to be reviewed by the Engineering team as well as the Marketing team. It doesn't matter who on the team does the review\u2014SomeCo wants to notify each team and then let one representative from each team \"own\" the review task. Either team can reject the whitepaper. If rejected, the person who submitted the whitepaper can make revisions and resubmit. If both teams approve, the whitepaper moves on to the next step.</p> <p>Some whitepapers need to be reviewed by an external third-party. The third-party won't actually log in to Alfresco\u2014they'll get an email and click a link to approve or reject the whitepaper. If the third-party doesn't do anything in a certain amount of time, the whitepaper should be automatically approved.</p>"},{"location":"workflow/tutorial/tutorial/#high-level-steps","title":"High-level steps","text":"<p>Alright. You're going to implement this process in four major steps. Here's a look at the major steps and the respective sub-steps:</p> <ol> <li>Implement the basic flow and workflow user interface<ol> <li>Lay out the process using the Activiti Process Designer.</li> <li>Configure user tasks with appropriate assignments.</li> <li>Add decision logic.</li> <li>Implement the workflow content model, the Alfresco Share client configuration, and the workflow properties.</li> <li>Deploy and test.</li> </ol> </li> <li>Implement web scripts and actions for external third-party integration and other business logic<ol> <li>Execute the \"set web flag\" action (created in an earlier tutorial) against every whitepaper in the workflow package. The action adds the <code>sc:webable</code> aspect to the whitepaper and sets the properties appropriately.</li> <li>Write a web script to handle approval/rejection via HTTP. The logic needs to grab the task and then set the outcome with the appropriate \"approve\" or \"reject\" flag.</li> <li>Write an Activiti task listener Java class that sends a notification to the third-party email address.</li> <li>Deploy and test.</li> </ol> </li> <li>Add a timer to the third-party task<ol> <li>Add a timer to the Third Party Review task so that if the third party doesn't respond in a timely fashion the task will automatically approve.</li> <li>Deploy and test.</li> </ol> </li> </ol> <p>Now that you know where you're headed at a high-level, let's get into the details.</p>"},{"location":"workflow/tutorial/tutorial/#step-1-implement-the-basic-flow-and-workflow-user-interface","title":"Step 1: Implement the basic flow and workflow user interface","text":"<p>Just like in the Hello World examples, the first thing to do is diagram the process. Then, assign tasks, add a bit of logic, and establish the workflow content model before a quick deploy and test.</p>"},{"location":"workflow/tutorial/tutorial/#diagram-the-process","title":"Diagram the process","text":"<p>The diagram step is just like you've seen before, it's just that the diagram is a little more complex.</p> <ol> <li>Right-click on the workflows folder, New, Other, Activiti Process Diagram.</li> <li>Name the process \"publishWhitepaper.bpmn\".</li> <li>Click on the canvas to open the properties editor for the entire process. Set the ID to \"publishWhitepaper\" and the name to \"Publish Whitepaper\".</li> <li> <p>Drag-and-drop nodes from the palette and connect them with sequence flows to make your diagram look like this:</p> <p></p> </li> </ol> <p>Submit is a Service Task. The rest are User Tasks. This example does not use the Alfresco-specific events or tasks, but feel free to do so in your own diagrams.</p> <p>Now that the diagram is in place, continue to the next section to see how to set the task properties.</p>"},{"location":"workflow/tutorial/tutorial/#configure-user-tasks-with-assignments","title":"Configure user tasks with assignments","text":"<p>This table tells you how to set the performer type, expression, and form key on each task:</p> Task Performer Type Expression Form Key Start Event N/A N/A scwf:submitReviewTask Operations Review Candidate Groups GROUP_Operations scwf:activitiOperationsReview Marketing Review Candidate Groups GROUP_Marketing scwf:activitiMarketingReview Revise Assignee \\${initiator.properties.userName} scwf:activitiRevise Third-Party Review Assignee \\${initiator.properties.userName} scwf:activitiThirdPartyReview Approved Notification Assignee \\${initiator.properties.userName} scwf:activitiApprovedNotification <p>Table: Settings for performer, expression, &amp; form key</p>"},{"location":"workflow/tutorial/tutorial/#pooled-assignments","title":"Pooled Assignments","text":"<p>Notice that the Operations Review and Marketing Review are being assigned to groups instead of individuals. How will the group of people decide who should work on a task? This particular process uses a \"pooled assignment\". Suppose, for example, the Operations group contains ten people. You could iterate through the group and assign a task to each and every member of the group and then not consider the task complete until some or all group members have taken action. An alternative to that is to use a pooled assignment. Using a pool, all members of a group are notified of the task, but as soon as one group member takes \"ownership\" of the task, it is removed from everyone else's to do list. The owner can then either complete the task or return it to the pool. If it is returned to the pool, all members of the group see the task in their to do list until another person takes ownership or completes the task. To use pooled assignment, use the <code>activiti:candidateGroups</code> attribute on the <code>userTask</code> element instead of the <code>activiti:assignee</code> element.</p> <p>The decision to use pooled actors or not depends entirely on the business process\u2014there is no best practice approach.</p>"},{"location":"workflow/tutorial/tutorial/#add-decision-logic","title":"Add decision logic","text":"<p>At this point the process diagram should save without a problem. Now it is time to switch to re-open the file using the XML editor to add some decision logic to the process.</p> <p>The process definition has two decisions. One decision figures out if all required approvals have been obtained. If so, the process continues. If not, the initiator gets a chance to make revisions. The other decision is used to determine if a third-party review is required based on whether or not the initiator provided an email address. These are represented by the two exclusive gateways on the diagram.</p> <p>These are pretty easy decisions to make based on process variables.</p>"},{"location":"workflow/tutorial/tutorial/#implement-the-approval-check","title":"Implement the approval check","text":"<p>In the business process XML, find the <code>serviceTask</code> element named \"Submit\" and add the following script:</p> <pre><code>&lt;serviceTask id=\"scripttask1\" name=\"Submit\" activiti:class=\"org.alfresco.repo.workflow.activiti.script.AlfrescoScriptDelegate\"&gt;\n  &lt;extensionElements&gt;\n    &lt;activiti:field name=\"script\"&gt;\n      &lt;activiti:string&gt;&lt;![CDATA[execution.setVariable('scwf_approveCount', 0);\n          execution.setVariable('scwf_tpApproved', false);]]&gt;&lt;/activiti:string&gt;\n    &lt;/activiti:field&gt;\n  &lt;/extensionElements&gt;\n&lt;/serviceTask&gt;\n</code></pre> <p>This initializes two variables that will be used as part of the approval check. The <code>scwf_approveCount</code> variable will get incremented when the process follows the \"approve\" sequence flow. If the counter is equal to 2, the package received both approvals. It is important to initialize the counter to 0 and the approved variable to false in the \"Submit\" script task because it is possible that a whitepaper may go through several review cycles. Every time a new cycle starts the counters need to be reset.</p> <p>You may be wondering why this is a service task instead of a script task. In 5.0.d, the underlying JavaScript engine in Activiti switched from Rhino to Nashorn. This caused a problem related to setting execution variables. The workaround is to use a service task.</p> <p>Now add code to increment the counter when the execution follows the approve sequence flow. Find the <code>userTask</code> named \"Operations Review\" and add this extension element:</p> <pre><code>&lt;userTask id=\"usertask1\" name=\"Operations Review\" activiti:candidateGroups=\"GROUP_Operations\" activiti:formKey=\"scwf:activitiOperationsReview\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:taskListener event=\"complete\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;\n                    if(task.getVariableLocal('scwf_approveRejectOutcome') == 'Approve') {\n                        var newApprovedCount = scwf_approveCount + 1;\n                        execution.setVariable('scwf_approveCount', newApprovedCount);\n                    }\n                &lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:taskListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/userTask&gt;\n</code></pre> <p>The JavaScript inspects the value of <code>scwf_approveRejectOutcome</code> which will be set by the user when they manage the task in Alfresco Share. If it is equal to \"Approve\" it increments <code>scwf_approveCount</code>.</p> <p>Now add the same thing to the <code>userTask</code> element named Marketing Review.</p> <p>The first exclusive gateway after the \"Operations Review\" and \"Marketing Review\" user tasks represents a decision. If the approvals have been reached, the flow should continue on, otherwise it should go to the \"Revise\" user task.</p> <p>To implement this, find the <code>sequenceFlow</code> elements that connect that exclusive gateway and add a <code>conditionExpression</code> element to each one that inspects the <code>scwf_approveCount</code> variable, like this:</p> <pre><code>&lt;sequenceFlow id=\"flow8\" sourceRef=\"exclusivegateway1\" targetRef=\"exclusivegateway2\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_approveCount == 2}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n&lt;sequenceFlow id=\"flow9\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask3\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_approveCount &lt; 2}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>The \"Third Party\" decision is similar. In this case, if the person who started the workflow provided an email address for the third-party reviewer, the workflow should route to the \"Third Party Review\", otherwise, it should continue on. Here is what those conditions look like:</p> <pre><code>&lt;sequenceFlow id=\"flow11\" sourceRef=\"exclusivegateway2\" targetRef=\"usertask2\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_reviewerEmail != ''}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n&lt;sequenceFlow id=\"flow14\" sourceRef=\"exclusivegateway2\" targetRef=\"usertask5\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_reviewerEmail == ''}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>There are two more places condition expressions are needed. One is on the two flows that leave Third Party Review. If the third-party approves their review, flow should go to the \"Approved Notification\", otherwise, it should go to \"Revise\":</p> <pre><code>&lt;sequenceFlow id=\"flow12\" sourceRef=\"usertask2\" targetRef=\"usertask3\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_tpApproved == false}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n&lt;sequenceFlow id=\"flow17\" sourceRef=\"usertask2\" targetRef=\"usertask5\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_tpApproved == true}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>The other place for condition expressions is on the \"Revise\" user task. The flow should go to the \"Submit\" script task if the initiator re-submits and the \"End\" task if they decide to withdraw or abort their request:</p> <pre><code>&lt;sequenceFlow id=\"flow16\" sourceRef=\"usertask3\" targetRef=\"endevent1\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_resubmit == false}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n&lt;sequenceFlow id=\"flow13\" sourceRef=\"usertask3\" targetRef=\"scripttask1\"&gt;\n    &lt;conditionExpression xsi:type=\"tFormalExpression\"&gt;&lt;![CDATA[${scwf_resubmit == true}]]&gt;&lt;/conditionExpression&gt;\n&lt;/sequenceFlow&gt;\n</code></pre> <p>The \"Third Party Review\" user task needs some logic to capture the approve/reject outcome:</p> <pre><code>&lt;extensionElements&gt;\n    &lt;activiti:taskListener event=\"complete\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n        &lt;activiti:field name=\"script\"&gt;\n            &lt;activiti:string&gt;if(task.getVariableLocal('scwf_approveRejectOutcome') == 'Approve') {\n                execution.setVariable('scwf_tpApproved', true);\n                } else {\n                execution.setVariable('scwf_tpApproved', false);\n                }\n            &lt;/activiti:string&gt;\n        &lt;/activiti:field&gt;\n    &lt;/activiti:taskListener&gt;\n&lt;/extensionElements&gt;\n</code></pre> <p>Similarly, the Revise user task also needs to set a variable with the Abort/Re-Submit outcome:</p> <pre><code>&lt;extensionElements&gt;\n  &lt;activiti:taskListener event=\"complete\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n        &lt;activiti:field name=\"script\"&gt;\n            &lt;activiti:string&gt;if(task.getVariableLocal('scwf_reviseOutcome') == 'Re-submit') {\n                execution.setVariable('scwf_resubmit', true);\n                } else {\n                execution.setVariable('scwf_resubmit', false);\n                }\n            &lt;/activiti:string&gt;\n        &lt;/activiti:field&gt;\n  &lt;/activiti:taskListener&gt;\n&lt;/extensionElements&gt;\n</code></pre> <p>You may be thinking that my sequence flow ID's aren't very helpful. I agree. Unfortunately, when I went back in to the process definition to refactor those, it caused some unanticipated problems. When you do your own business process definitions you should start with meaningful ID's from the beginning.</p>"},{"location":"workflow/tutorial/tutorial/#workflow-content-model-including-alfresco-share-configuration","title":"Workflow content model including Alfresco Share configuration","text":"<p>At this point you've defined the process. It doesn't have all of the logic it will have eventually, but it has enough that you will be able to step through all of the paths in the process once the Alfresco Share user interface is configured. You'll do that in this section by defining the content model and updating the client configuration.</p>"},{"location":"workflow/tutorial/tutorial/#defining-the-workflow-content-model","title":"Defining the workflow content model","text":"<p>You started a workflow content model in the earlier Hello World UI example. The first thing to do is update the content model XML (scWorkflowModel.xml) with types and aspects specific to the publish whitepaper process.</p> <p>Edit the file and add:</p> <pre><code>&lt;type name=\"scwf:submitReviewTask\"&gt;\n    &lt;parent&gt;bpm:startTask&lt;/parent&gt;\n    &lt;mandatory-aspects&gt;\n        &lt;aspect&gt;scwf:thirdPartyReviewable&lt;/aspect&gt;\n    &lt;/mandatory-aspects&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiMarketingReview\"&gt;\n    &lt;parent&gt;scwf:activitiReviewTask&lt;/parent&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiOperationsReview\"&gt;\n    &lt;parent&gt;scwf:activitiReviewTask&lt;/parent&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiThirdPartyReview\"&gt;\n    &lt;parent&gt;scwf:activitiReviewTask&lt;/parent&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiRevise\"&gt;\n    &lt;parent&gt;bpm:activitiOutcomeTask&lt;/parent&gt;\n    &lt;properties&gt;\n        &lt;property name=\"scwf:reviseOutcome\"&gt;\n            &lt;type&gt;d:text&lt;/type&gt;\n            &lt;default&gt;Abort&lt;/default&gt;\n            &lt;constraints&gt;\n                &lt;constraint type=\"LIST\"&gt;\n                    &lt;parameter name=\"allowedValues\"&gt;\n                        &lt;list&gt;\n                            &lt;value&gt;Re-submit&lt;/value&gt;\n                            &lt;value&gt;Abort&lt;/value&gt;\n                        &lt;/list&gt;\n                    &lt;/parameter&gt;\n                &lt;/constraint&gt;\n            &lt;/constraints&gt;\n        &lt;/property&gt;\n    &lt;/properties&gt;\n    &lt;overrides&gt;\n        &lt;property name=\"bpm:packageItemActionGroup\"&gt;\n        &lt;default&gt;edit_package_item_actions&lt;/default&gt;\n        &lt;/property&gt;\n        &lt;property name=\"bpm:outcomePropertyName\"&gt;\n        &lt;default&gt;{http://www.someco.com/model/workflow/1.0}reviseOutcome&lt;/default&gt;\n        &lt;/property&gt;\n    &lt;/overrides&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiReviewTask\"&gt;\n    &lt;parent&gt;bpm:activitiOutcomeTask&lt;/parent&gt;\n    &lt;properties&gt;\n        &lt;property name=\"scwf:approveRejectOutcome\"&gt;\n            &lt;type&gt;d:text&lt;/type&gt;\n            &lt;default&gt;Reject&lt;/default&gt;\n            &lt;constraints&gt;\n                &lt;constraint type=\"LIST\"&gt;\n                    &lt;parameter name=\"allowedValues\"&gt;\n                        &lt;list&gt;\n                            &lt;value&gt;Approve&lt;/value&gt;\n                            &lt;value&gt;Reject&lt;/value&gt;\n                        &lt;/list&gt;\n                    &lt;/parameter&gt;\n                &lt;/constraint&gt;\n            &lt;/constraints&gt;\n        &lt;/property&gt;\n    &lt;/properties&gt;\n    &lt;overrides&gt;\n        &lt;property name=\"bpm:packageItemActionGroup\"&gt;\n            &lt;default&gt;read_package_item_actions&lt;/default&gt;\n        &lt;/property&gt;\n        &lt;property name=\"bpm:outcomePropertyName\"&gt;\n            &lt;default&gt;{http://www.someco.com/model/workflow/1.0}approveRejectOutcome&lt;/default&gt;\n        &lt;/property&gt;\n    &lt;/overrides&gt;\n&lt;/type&gt;\n&lt;type name=\"scwf:activitiApprovedNotification\"&gt;\n    &lt;parent&gt;bpm:workflowTask&lt;/parent&gt;\n    &lt;overrides&gt;\n        &lt;property name=\"bpm:packageItemActionGroup\"&gt;\n            &lt;default&gt;read_package_item_actions&lt;/default&gt;\n        &lt;/property&gt;\n    &lt;/overrides&gt;\n&lt;/type&gt;\n</code></pre> <p>There's one type for each task. The name of each type matches the form key of the user tasks in the publishWhitepaper.bpmn file.</p> <p>You'll notice that each type inherits from a type defined in the BPM content model. If you were to look at the out-of-the-box bpmModel.xml file you would see that the <code>bpm:startTask</code> type has helpful properties such as the workflow description, due date, and priority.</p> <p>The <code>bpm:workflowTask</code> has an association called <code>bpm:package</code>. The <code>bpm:package</code> points to a <code>bpm:workflowPackage</code> which is the aspect applied to a container (like a folder) that holds the documents being routed through a workflow. When you write code that needs to access the content being routed in a workflow you can get to it through the <code>bpm:package</code> association.</p> <p>The <code>property</code> element named \"bpm:packageItemActionGroup\" defines what actions are available for working with the content in the workflow at that particular step in the process. In the case, the initiator needs to be able to change the contents of the workflow when the workflow is started and when making revisions, but reviewers should not be able to add or remove anything to or from the workflow.</p> <p>The start task has a mandatory aspect called \"scwf:thirdPartyReviewable\". After the closing <code>types</code> element, add the following:</p> <pre><code>&lt;aspects&gt;\n    &lt;aspect name=\"scwf:thirdPartyReviewable\"&gt;\n        &lt;title&gt;Someco Third Party Reviewable&lt;/title&gt;\n        &lt;properties&gt;\n            &lt;property name=\"scwf:reviewerEmail\"&gt;\n                &lt;type&gt;d:text&lt;/type&gt;\n                &lt;mandatory&gt;false&lt;/mandatory&gt;\n                &lt;multiple&gt;false&lt;/multiple&gt;\n            &lt;/property&gt;\n        &lt;/properties&gt;\n    &lt;/aspect&gt;\n&lt;/aspects&gt;\n</code></pre> <p>This defines an aspect used to define a property that will store the third-party reviewer's email address.</p> <p>That's it for the workflow content model. Now configure it in the Alfresco Share user interface.</p>"},{"location":"workflow/tutorial/tutorial/#configure-the-alfresco-share-user-interface","title":"Configure the Alfresco Share user interface","text":"<p>In the Hello World UI example you saw that Alfresco Share is configured using share-config-custom.xml. Because it is mostly repetitive, I'll just show the configuration for <code>scwf:activitiReviewTask</code> here and if you want to see the rest of the Share configuration, you can look at the source that accompanies this tutorial.</p> <pre><code>&lt;config evaluator=\"task-type\" condition=\"scwf:activitiReviewTask\"&gt;\n    &lt;forms&gt;\n        &lt;form&gt;\n            &lt;field-visibility&gt;\n                &lt;show id=\"bpm:workflowDescription\" /&gt;\n                &lt;show id=\"packageItems\" /&gt;\n                &lt;show id=\"scwf:approveRejectOutcome\" /&gt;\n                &lt;show id=\"transitions\" /&gt;\n            &lt;/field-visibility&gt;\n            &lt;appearance&gt;\n                &lt;set id=\"\" appearance=\"title\" label-id=\"workflow.set.general\" /&gt;\n                &lt;set id=\"info\" appearance=\"\" template=\"/org/alfresco/components/form/2-column-set.ftl\" /&gt;\n                &lt;set id=\"assignee\" appearance=\"title\" label-id=\"workflow.set.assignee\" /&gt;\n                &lt;set id=\"items\" appearance=\"title\" label-id=\"workflow.set.items\" /&gt;\n                &lt;set id=\"response\" appearance=\"title\" label-id=\"workflow.set.response\" /&gt;\n                &lt;field id=\"bpm:workflowDescription\" label-id=\"workflow.field.message\"&gt;\n                    &lt;control template=\"/org/alfresco/components/form/controls/textarea.ftl\"&gt;\n                        &lt;control-param name=\"style\"&gt;width: 95%&lt;/control-param&gt;\n                    &lt;/control&gt;\n                &lt;/field&gt;\n                &lt;field id=\"packageItems\" set=\"items\" /&gt;\n                &lt;field id=\"scwf:approveRejectOutcome\" set=\"response\" /&gt;\n                &lt;field id=\"transitions\" set=\"response\" /&gt;\n            &lt;/appearance&gt;\n        &lt;/form&gt;\n    &lt;/forms&gt;\n&lt;/config&gt;\n</code></pre> <p>Something that isn't immediately obvious without looking closely at the accompanying Share form configuration is that there are multiple workflow form configurations needed for a given workflow. This table explains what configuration does what:</p> For example, this configuration... Is used by Share to figure out... \\&lt;config evaluator=\"string-compare\" condition=\"activiti\\$publishWhitepaper\"&gt; What form to use when a workflow is started that has an ID matching the condition. \\&lt;config evaluator=\"task-type\" condition=\"scwf:activitiReviewTask\"&gt;\\&lt;form&gt;...\\&lt;/form&gt; What form to use when someone manages a task with an activiti:formKey that matches the condition. \\&lt;config evaluator=\"task-type\" condition=\"scwf:activitiReviewTask\"&gt;\\&lt;form id=\u201dworkflow-details\u201d&gt;...\\&lt;/form&gt; What form to use when someone opens the \"Workflow Details\" page (e.g., from Workflows I've Started) where the last completed task has an <code>activiti:formKey</code> that matches the condition. <p>Table: What does the config do?</p>"},{"location":"workflow/tutorial/tutorial/#externalize-the-strings_1","title":"Externalize the strings","text":"<p>The last step is to externalize the strings in the model and process. Remember that in the Hello World UI example the strings went into two files named \"scWorkflow.properties\", one for the workflow-tutorial-platform module and one for the workflow-tutorial-share module.</p> <p>The one in the workflow-tutorial-platform module resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/messages\n</code></pre> <p>Add the following to scWorkflow.properties:</p> <pre><code>publishWhitepaper.workflow.title=Publish Whitepaper to Web (Activiti)\npublishWhitepaper.workflow.description=Review and approve Someco Whitepaper content using Activiti\n</code></pre> <p>Note that the first part of the property key matches the name you gave the process definition. The values for the workflow.title and workflow.description keys will be what the user sees when she clicks \"Start Advanced Workflow\" in Alfresco Share.</p> <p>Also add this set of properties, which are for the types and properties defined in the workflow model:</p> <p><pre><code>scwf_workflowmodel.type.scwf_submitReviewTask.title=Start Someco Web Review\nscwf_workflowmodel.type.scwf_submitReviewTask.description=Submit Someco Web documents for review &amp; approval to a group of people\n\nscwf_workflowmodel.type.scwf_activitiMarketingReview.title=Marketing Review\nscwf_workflowmodel.type.scwf_activitiMarketingReview.description=Review documents for impact on Someco marketing message\n\nscwf_workflowmodel.type.scwf_activitiOperationsReview.title=Operations Review\nscwf_workflowmodel.type.scwf_activitiOperationsReview.description=Review documents for technical accuracy and best practices\n\nscwf_workflowmodel.type.scwf_activitiThirdPartyReview.title=Third Party Review\nscwf_workflowmodel.type.scwf_activitiThirdPartyReview.description=Obtain third party approval\n\nscwf_workflowmodel.type.scwf_activitiRevise.title=Revise\nscwf_workflowmodel.type.scwf_activitiRevise.description=Make changes then resubmit or abort\n\nscwf_workflowmodel.type.scwf_activitiReviewTask.title=Review\nscwf_workflowmodel.type.scwf_activitiReviewTask.description=Approve or reject this change\n\nscwf_workflowmodel.property.scwf_reviewerEmail.title=Reviewer email\nscwf_workflowmodel.property.scwf_reviewerEmail.description=Third-party reviewer email address\n\nscwf_workflowmodel.property.scwf_approveRejectOutcome.title=Outcome\nscwf_workflowmodel.property.scwf_approveRejectOutcome.description=Reviewer outcome\n\nscwf_workflowmodel.property.scwf_reviseOutcome.title=Outcome\nscwf_workflowmodel.property.scwf_reviseOutcome.description=Reviewer outcome\n</code></pre> The first part of the key is the name of the workflow model, then whether or not this key is for a type or a property, then the name of the type or property. These are the strings shown when someone manages a task.</p> <p>Now edit scWorkflow.properties in the workflow-tutorial-share module. It resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-share/src/main/resources/alfresco/web-extension/messages\n</code></pre> <p>Add these properties to the file:</p> <pre><code>workflow.scwf_publishWhitepaper=SC Publish Whitepaper\n\n#scwf:publishWhitepaper\nprop.scwf_reviewerEmail=Reviewer Email\n</code></pre> <p>Save the file and you are ready to deploy and test what you have so far.</p>"},{"location":"workflow/tutorial/tutorial/#deploy-and-test","title":"Deploy and test","text":"<p>You created a new workflow so it needs to be deployed via Spring. Edit the \"bootstrap-context.xml\" file that resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/context\n</code></pre> <p>Add the new workflow to the list of workflows:</p> <pre><code>&lt;props&gt;\n    &lt;prop key=\"engineId\"&gt;activiti&lt;/prop&gt;\n    &lt;prop key=\"location\"&gt;alfresco/module/${project.artifactId}/workflow/publishWhitepaper.bpmn&lt;/prop&gt;\n    &lt;prop key=\"mimetype\"&gt;text/xml&lt;/prop&gt;\n    &lt;prop key=\"redeploy\"&gt;false&lt;/prop&gt;\n&lt;/props&gt;\n</code></pre> <p>At this stage you can continue to test using Alfresco on the SDK-generated Docker containers configured by the Alfresco Maven SDK. Here are the steps necessary to start up that you used earlier:</p> <ol> <li>Open a command-line window and switch to $TUTORIAL_HOME.</li> <li>Stop the running containers with <code>./run.sh stop</code> (or <code>run.bat</code>).</li> <li>Run <code>./run.sh build_start</code> (or <code>run.bat</code>). Your AMPs will be installed into Docker containers running on 8080 (Alfresco) and 8180 (Share).</li> </ol> <p>When everything starts up:</p> <ol> <li>Go to http://localhost:8180/share and log in as admin (password: admin).</li> <li>If you haven't done so already, create a group called \"Operations\" and a group called \"Marketing\" and place one or more test users in each group.</li> <li>Create a piece of test content. It doesn't matter what it is.</li> <li>Now start a workflow for that piece of content.</li> <li>You should see the \"Submit Whitepaper\" workflow in the list of workflows. Start the workflow.</li> </ol> <p>You should see the workflow form you defined that includes the field for the third-party reviewer email. Even though you haven't yet added logic to make changes to the document in the workflow, you should at least be able to test every path.</p>"},{"location":"workflow/tutorial/tutorial/#step-2-implement-web-scripts-and-actions","title":"Step 2: Implement web scripts and actions","text":"<p>Now that the base process is running and it's hooked in to the Alfresco UI, it's time to make the process smarter by adding some business logic.</p>"},{"location":"workflow/tutorial/tutorial/#call-the-set-web-action-on-approved-documents","title":"Call the set-web-action on approved documents","text":"<p>When a whitepaper is approved it needs to show up on the web site. Recall from the \"Custom Actions\" tutorial that there is already an action that will add the <code>sc:webable</code> aspect to a document and set the <code>sc:isActive</code> and <code>sc:publishedFlag</code> properties. So all you have to do is tell the process to execute it against the approved whitepaper.</p> <p>To do that, edit the business process and search for the <code>userTask</code> element named \"Approved Notification\". Add the following extension element:</p> <pre><code>&lt;userTask id=\"usertask4\" name=\"Approved Notification\" activiti:assignee=\"${initiator.properties.userName}\" activiti:formKey=\"scwf:activitiApprovedNotification\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:taskListener event=\"create\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n            &lt;activiti:field name=\"script\"&gt;\n                &lt;activiti:string&gt;\n                    var setWebFlagAction = actions.create(\"set-web-flag\");\n                    setWebFlagAction.parameters[\"active\"] = true;\n                    for (var i = 0; i &amp;lt; bpm_package.children.length; i++) {\n                        logger.log(\"Approving node:\" + bpm_package.children[i].nodeRef);\n                        setWebFlagAction.execute(bpm_package.children[i]);\n                    }\n                &lt;/activiti:string&gt;\n            &lt;/activiti:field&gt;\n        &lt;/activiti:taskListener&gt;\n    &lt;/extensionElements&gt;\n&lt;/userTask&gt;\n</code></pre> <p>This is a straightforward piece of Alfresco JavaScript that executes the custom action called \"set-web-flag\" for every piece of content in the workflow package. The action adds the aspect and sets the properties appropriately.</p> <p>That's all that's needed to handle the approval. Now for the Third Party Review.</p>"},{"location":"workflow/tutorial/tutorial/#implement-the-external-third-party-review","title":"Implement the external third-party review","text":"<p>The goal is to send an email to a third-party who may not have access to Alfresco. The email will include two links--one if they approve the whitepaper and one if they reject. When they click the link the workflow continues execution along the selected path.</p> <p>All of the business logic you've seen so far has been written in server-side JavaScript. Let's change it up a little bit. There are two pieces required to make this work. The first piece is some Java code that will send the email with the \"approve\" and \"reject\" links in the email body. The recipient will open their email and click on either the approve link or the reject link. This won't require logging in to Alfresco at all. The second part is a web script that gets called when the recipient clicks the links. The web script will get a handle to the workflow task and set the outcome appropriately.</p> <p>This may seem backwards, but let's build the web script that handles the links first, then you'll see how to build an Activiti task listener class that sends the email notification.</p>"},{"location":"workflow/tutorial/tutorial/#implement-the-web-script","title":"Implement the Web Script","text":"<p>The \"Introduction to Web Scripts\" tutorial showed you how to create custom web scripts, so I am only going to show you the Java class that acts as the web script controller. See the source for the other files that make up the web script.</p> <p>The source for the web script's controller resides in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/java\n</code></pre> <p>First, create a package folder structure called \"com/someco/scripts\".</p> <p>Now create a new class called \"GetReview\" . Here's the class, without the imports or the getter/setter methods:</p> <pre><code>public class GetReview extends DeclarativeWebScript {\n\n    Log logger = LogFactory.getLog(GetReview.class);\n\n    // Dependencies\n    private WorkflowService workflowService;\n\n    @Override\n    protected Map&lt;String, Object&gt; executeImpl(WebScriptRequest req, Status status) {\n\n        final String id = req.getParameter(\"id\");\n        final String action = req.getParameter(\"action\");\n\n        if (id == null || action == null) {\n            logger.debug(\"Email, ID, action, or secret not set\");\n            status.setCode(400);\n            status.setMessage(\"Required data has not been provided\");\n            status.setRedirect(true);\n        }\n\n        Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();\n\n        Map&lt;QName, Serializable&gt; props = new HashMap&lt;QName, Serializable&gt;();\n        props.put(QName.createQName(SomeCoWorkflowModel.NAMESPACE_SOMECO_WORKFLOW_CONTENT_MODEL, SomeCoWorkflowModel.PROP_APPROVE_REJECT_OUTCOME), action);\n        workflowService.updateTask(id, props, null, null);\n        workflowService.endTask(id, action);\n\n        return model;\n    }\n}\n</code></pre> <p>The class grabs the task ID and the action to take (the outcome) and then uses the workflow service to update and end the task. So, for example, if someone were to post this URL:</p> <pre><code>http://localhost:8080/alfresco/service/someco/bpm/review?id=activiti\\$89&amp;action=Approve\n</code></pre> <p>the Java class would update the task identified by activiti$89 with the \"Approve\" outcome.</p> <p>If you are following along, don't forget to copy over the web script descriptor and the freemarker for the web script into:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/extension/templates/webscripts/com/someco/bpm\n</code></pre> <p>You will also need to copy the Spring bean that wires in the Java controller into the bootstrap-context.xml file located in:</p> <pre><code>$TUTORIAL_HOME/workflow-tutorial-platform/src/main/resources/alfresco/module/workflow-tutorial-platform/context\n</code></pre> <p>Once these are in place, the web script will be ready to receive clicks from the email that gets sent out. Writing code that sends the email is the next step.</p>"},{"location":"workflow/tutorial/tutorial/#create-a-custom-task-listener","title":"Create a custom task listener","text":"<p>The second piece to the Third Party Review is sending the email to the third-party. There is an out-of-the-box mail action, and you've already seen how to call an action from a workflow using Alfresco JavaScript, but there are a few things to take care of other than simply sending an email, so let's write a custom task listener class to handle it.</p> <p>First, create a new package called \"com.someco.bpm\".</p> <p>Then, create a new class called \"ExternalReviewNotification\" . The goal is to send an email that has two links\u2014one for approve and one for reject\u2014that represent the two possible outcomes of the Third Party Review user task. The links need to include the task ID and the desired outcome as arguments.</p> <p>The task listener's notify method will be called by Activiti. Here is what the method looks like:</p> <pre><code>public void notify(DelegateTask task) {\n\n    String recipient = (String)\n    task.getVariable(ExternalReviewNotification.RECIP_PROCESS_VARIABLE);\n\n    StringBuffer sb = new StringBuffer();\n    sb.append(\"You have been assigned to a task named \");\n    sb.append(task.getName());\n    sb.append(\". Take the appropriate action by clicking one of the links below:rnrn\");\n    sb.append(getLink(task.getId(), \"Approve\"));\n    sb.append(getLink(task.getId(), \"Reject\"));\n\n    ActionService actionService = getServiceRegistry().getActionService();\n    Action mailAction = actionService.createAction(MailActionExecuter.NAME);\n\n    mailAction.setParameterValue(MailActionExecuter.PARAM_SUBJECT, ExternalReviewNotification.SUBJECT);\n    mailAction.setParameterValue(MailActionExecuter.PARAM_TO, recipient);\n    mailAction.setParameterValue(MailActionExecuter.PARAM_FROM, ExternalReviewNotification.FROM_ADDRESS);\n    mailAction.setParameterValue(MailActionExecuter.PARAM_TEXT, sb.toString());\n\n    actionService.executeAction(mailAction, null);\n\n    return;\n}\n</code></pre> <p>The first thing the method does is grab the recipient from a process variable. Next, it uses a string buffer to start building the message body. The <code>task.getName()</code> call grabs the node name (\"Third Party Review\").</p> <p>The <code>getLink()</code> method is just a helper method that produces a link that looks like this:</p> <pre><code>http://localhost:8080/alfresco/service/someco/bpm/review?id=activiti\\$999&amp;action=Approve&amp;guest=true\n</code></pre> <p>The method has the host and port hardcoded which is another thing you'd want to fix if you did this for real.</p> <p>The last major block of code in the <code>notify()</code> method uses the action service to execute the Alfresco mail action. Sure, you could use the Java mail API to do it yourself, but why not leverage the mail action? That way you can leverage the same SMTP configuration settings already configured for Alfresco in alfresco-global.properties.</p> <p>The last thing to do is to call the <code>ExternalReviewNotification</code> class from the process. Edit the publishWhitepaper.bpmn file and find the task named \"Third Party Review\". The user task already has a task listener on the \"complete\" event that you added earlier. Insert a new <code>activiti:taskListener</code> element that creates a task listener on the \"create\" event that invokes the ExternalReviewNotification class, like this:</p> <pre><code>&lt;userTask id=\"usertask5\" name=\"Third Party Review\" activiti:assignee=\"${initiator.properties.userName}\" activiti:formKey=\"scwf:activitiThirdPartyReview\"&gt;\n    &lt;extensionElements&gt;\n        &lt;activiti:taskListener event=\"create\" class=\"com.someco.bpm.ExternalReviewNotification\"&gt;&lt;/activiti:taskListener&gt;\n        &lt;activiti:taskListener event=\"complete\" class=\"org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener\"&gt;\n        &lt;activiti:field name=\"script\"&gt;\n        ...\n</code></pre> <p>Now the process will send an email to a third-party reviewer if an email address is specified, the third-party reviewer can click on the appropriate outcome link which will trigger a web script causing the workflow to continue along the right path, and if the whitepaper is ultimately approved, the workflow will invoke the \"set web flag\" action to set its properties so it can be searched for and displayed on a web site.</p>"},{"location":"workflow/tutorial/tutorial/#deploy-and-test_1","title":"Deploy and test","text":"<p>It's time to deploy and test. If you want to try out the notification piece, you'll need access to an SMTP server. For developing and testing locally, Apache James works great.</p> <p>Remember to edit alfresco-global.properties to set your outgoing email settings to match your environment. The alfresco-global.properties file that is copied to the Docker container resides in \"workflow-tutorial-platform-docker\" under src/main/docker. For example, I have Apache James running on a little test server, so I've added the following to the alfresco-global.properties file:</p> <pre><code>## Outbound email settings\nmail.host=192.168.0.30\nmail.port=25\nmail.protocol=smtp\n</code></pre> <p>I often use my local /etc/hosts file to resolve IP addresses, but because Alfresco is running in a Docker container, that won't work, so I'm using the IP address instead of the hostname.</p> <p>Two critical dependencies to your test are the content-tutorial and actions-tutorial AMPs. These must be deployed to the same repository your workflow-tutorial AMP is deployed to because your business process leverages an action and some Java code that exists in those AMPs.</p> <p>That's why, in the very beginning of the tutorial, you edited the Docker module pom.xml to add those projects as dependencies. That way, when you run the containers those AMPs will be installed automatically.</p> <p>If you are deploying the workflow tutorial AMPs to a standalone Alfresco installation, you can deploy the AMPs to your Alfresco installation as you normally would using the \"apply_amps.sh\" script.</p> <p>Deploying to a standalone Alfresco is fine, but while you are developing (and working through these tutorials) it is easiest to use the Docker containers.</p> <p>Start it up by doing <code>./run.sh build_start</code> or <code>run.bat</code> depending on your platform. When it comes up, you'll be ready to test.</p> <p>At a minimum, you'll need to run several workflows:</p> <ol> <li>The whitepaper receives all of its approvals but does not have a third-party reviewer.</li> <li>The whitepaper receives all of its approvals, has a third-party reviewer, and the third-party approves.</li> <li>The whitepaper receives all of its approvals, has a third-party reviewer, and the third-party rejects, followed by a re-submission that then gets approved all the way through.</li> </ol> <p>When you test using the third-party reviewer email you should get an email that looks like this:</p> <p></p> <p>Clicking on a link causes the workflow to proceed along the specified path.</p> <p>Warning: The Third Party example is not production-ready</p> <p>I included the third-party example to show one type of wait-state/asynchronous behavior in a process. It's got a long way to go before it can be used in production. A short list list of obvious issues includes:</p> <ul> <li>The email recipient doesn't get a copy of the documents being reviewed. One way to address this would be to have the notification action send a zip of the documents in the workflow package. Another way would be to write additional web scripts or send them a download link. I simply didn't have time to implement this and figured it was a bit off-topic anyway.</li> <li>It'd be really easy for an unauthorized person to signal any node in the system because the controller class doesn't do any validation whatsoever and the task ID's are trivial to guess. In real life, you'd want to check that (1) the person making the request is the person assigned to the task, (2) that the task is still active, and (3) possibly use an additional security mechanism like a shared secret of some kind.</li> <li>The email body should probably come from a Freemarker template. That way you could reuse the notification class in any number of processes and it simplifies email body maintenance.</li> </ul> <p>So, long story short, feel free to use this idea, but realize that I've cut corners for brevity's sake.</p>"},{"location":"workflow/tutorial/tutorial/#step-3-add-a-timer-to-the-third-party-task","title":"Step 3: Add a timer to the third-party task","text":"<p>What if you sent an email to the third party and they never took action? One way to handle that problem is with a timer.</p> <p>One way to do this is to add a boundary timer to the Third Party Review task. When the timer expires, the timer can cancel the Third Party Review task and then route to the Approved task.</p> <p>Here's how to do it:</p> <ol> <li>Edit the publishWhitepaper.bpmn process definition file.</li> <li> <p>Find the Third-Party Review task. In my diagram it is \"usertask2\". Find the \"Approved Notification\" task. In my diagram it is \"usertask5\". With those references updated to reflect the values in your diagram, add the following:</p> <pre><code>&lt;boundaryEvent id=\"boundarytimer1\" cancelActivity=\"true\" attachedToRef=\"usertask2\"&gt;\n    &lt;timerEventDefinition&gt;\n        &lt;timeDuration&gt;PT5M&lt;/timeDuration&gt;\n    &lt;/timerEventDefinition&gt;\n&lt;/boundaryEvent&gt;\n&lt;sequenceFlow id=\"toExpiredApprove\" name=\"\" sourceRef=\"boundarytimer1\" targetRef=\"usertask5\"&gt;&lt;/sequenceFlow&gt;\n</code></pre> </li> </ol> <p>This sets the timer for 5 minutes\u2014that's what the \"PT5M\" expression means--but you could obviously set it for as long or as short as you wish. That expression is part of the ISO 8601 standard for durations.</p> <p>Setting an absolute date works as well. The due date could also be the result of an expression. To use a specific date instead of a duration, use a <code>timeDate</code> element instead of a <code>timeDuration</code> element.</p>"},{"location":"workflow/tutorial/tutorial/#deploy-and-test_2","title":"Deploy and test","text":"<p>If you only make changes to the process definition, you can just build the project and restart the Alfresco container. You don't have to restart all of the containers. To do that, run <code>mvn install -DskipTests</code> and then <code>./run.sh reload_acs</code> to rebuild and reload the Alfresco container.</p> <p>Remember to use the Alfresco workflow console to redeploy the process definition.</p> <p>Now test the third-party reviewer path but instead of clicking the approve or reject link that is included in the email, ignore it for five minutes. You should see the workflow continue along the approved path when the timer expires.</p>"},{"location":"workflow/tutorial/tutorial/#conclusion","title":"Conclusion","text":"<p>You now know the ins and outs of implementing advanced workflows using the Activiti engine embedded within Alfresco. You know when Alfresco's basic workflows will suffice and when advanced workflows are more appropriate. You learned that process definitions are collections of events, tasks, and gateways joined by sequence flows. The representation of a process definition, both as a diagram, and as XML, is standardized through BPMN. And, you now know how to add business logic to workflows using expressions, Alfresco JavaScript, and Java.</p> <p>I also walked you through the overall process of implementing advanced workflows in Alfresco by walking through some simple Hello World examples and then a more complex example that used many different node types and business logic options. I even spiced things up a bit by exposing the business process to a third-party via SMTP and HTTP with the help of the web script framework.</p> <p>Hopefully, this has sparked some ideas about how you can leverage Alfresco and Activiti in your own projects and has given you some concrete examples you can leverage in your own projects going forward.</p>"},{"location":"workflow/tutorial/tutorial/#where-to-find-more-information","title":"Where to find more information","text":"<ul> <li>The complete source code for these examples is available on GitHub.</li> <li>Official documentation for both Enterprise Edition and Community Edition is available at docs.alfresco.com.</li> <li>Ask questions about Activiti embedded within Alfresco in the Alfresco Community.</li> <li>If you are ready to cover new ground, try another ecmarchitect.com tutorial in the Alfresco Developer Series.</li> <li>Activiti and BPMN<ul> <li>The Activiti home page has documentation and tutorials.</li> <li>OMG hosts bpmn.org, which is where the BPMN 2.0 spec lives as well as the BPMN by Example document.</li> </ul> </li> </ul>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-platform/readme/","title":"Alfresco Custom Workflows Tutorial","text":"<p>These sample classes and sample Alfresco extension config files accompany an article called \"Alfresco Developer Series: Advanced Workflows, 2nd Edition\".</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-platform/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK or any of its dependencies.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-platform/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war</code></p> <p>Which will start Alfresco on an embedded Jetty server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p> <p>You should also deploy the workflow-article-share AMP to configure Share appropriately.</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-platform/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Alfresco.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-platform&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources directory.</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-platform-docker/src/main/docker/license/","title":"Enterprise License location","text":"<p>Put the Alfresco Enterprise license file in this directory. It will then be copied into the ACS container in the $TOMCAT_DIR/WEB-INF/classes/alfresco/extension/license directory.  </p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-share/readme/","title":"Alfresco Custom Workflows Tutorial","text":"<p>These sample classes and sample Alfresco extension config files accompany an article called \"Alfresco Developer Series: Advanced Workflows, 2nd Edition\".</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-share/readme/#building-the-source","title":"Building the source","text":"<p>The project leverages Maven. It does not require you to separately download the Alfresco SDK or any of its dependencies.</p> <p>To build the source, run: <code>mvn install</code></p> <p>This will create an AMP file in the target directory.</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-share/readme/#deploying-the-amp","title":"Deploying the AMP","text":"<p>You can deploy the AMP to your Alfresco instance.</p> <p>For example, if you are running Alfresco installed with the binary installer in <code>/opt/alfresco/4.2e-installer</code>, you would copy the AMP from the target directory to <code>/opt/alfresco/4.2e-installer/amps_share</code>, then run <code>bin/apply_amps.sh</code>.</p> <p>Alternatively, you can run: <code>mvn integration-test -Pamp-to-war</code></p> <p>Which will start Alfresco on an embedded Jetty server with the AMP deployed to a WAR. If you want to change the version of the Alfresco WAR, edit the pom.xml file.</p> <p>You must also deploy the workflow-article-repo AMP to the Alfresco WAR.</p>"},{"location":"workflow/workflow-tutorial/workflow-tutorial-share/src/main/assembly/web/","title":"Web resources that should override out-of-the-box files","text":"<p>Put here any web resources that should override out-of-the-box web resources, such as favicon.ico. They will then end up in the  /web directory in the AMP, and applied to the WAR, and override any existing web resources in the Share.WAR.</p> <p>Note. Module dependency needs to be set to amp for the web resources to be applied by MMT:</p> <p><code>&lt;moduleDependency&gt;     &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;     &lt;artifactId&gt;some-share&lt;/artifactId&gt;     &lt;version&gt;${project.version}&lt;/version&gt;     &lt;type&gt;amp&lt;/type&gt; &lt;/moduleDependency&gt;</code></p> <p>Important. New web resources should not be located here, but instead                 in the usual place in the src/main/resources/META-INF/resources// directory."}]}